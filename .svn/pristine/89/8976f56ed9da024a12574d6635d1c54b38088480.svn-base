<?php

namespace App\Http\Controllers\Admin\Accounts;

use App\Http\Controllers\Controller;
use App\Models\Expense;
use App\Models\ExpenseGroup;
use App\Models\Ledger;
use App\Models\User;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class ExpenseController extends Controller
{
  use Common;
  public function expenses()
  {
    $expenseLedger = Ledger::get();
    $expenseGroup = ExpenseGroup::get();
    $companyLedger = Ledger::where('ledger_type_id', 1)->get();
    $employeeLeger = $this->getUserRolesForDropDown();

    return view('admin.accounts.expenses.expenses', compact('expenseLedger', 'employeeLeger', 'expenseGroup', 'companyLedger'));
  }

  public function expenseCreate(Request $request)
  {
    DB::beginTransaction();
    try {

      // $request->validate([
      //   'ddldate' => 'required',
      //   'txtExpenseDetail' => 'required',
      //   'ddlExpenselVendor' => 'required'
      // ]);

      $last_insert_expense_id = Expense::insertGetId([
        'expense_date' => $request->ddlDate,
        'expensegroup_id' => $request->ddlExpenseGroup,
        'expense_type_id' => $request->txtExpenseType,
        'ledger_id' => $request->ddlExpenselVendor,
        'company_ledger_id' => $request->ddlExpenselCompany,
        'employee_user_id' => $request->ddlExpenselEmployee,
        'amount' => $request->txtAmount,
        'is_paid' => $request->isPaid,
        'amount_paid' => $request->isPaid == 0 ? 0 : $request->txtAmount,
        'notes' => $request->txtExpenseDetail,
        'created_by' => Auth::user()->id

      ]);

      if ($request->isPaid == 0) {
        if ($request->ddlExpenselVendor) {
          Ledger::findorfail($request->ddlExpenselVendor)->update([
            'closing_balance' => $request->hdclosinglvendor + $request->txtAmount
          ]);
        }

        if ($request->ddlExpenselEmployee) {
          User::findorfail($request->ddlExpenselEmployee)->update([
            'closing_balance' => $request->hdPendingEmployee + $request->txtAmount
          ]);
        }
      } else {
        if ($request->ddlExpenselVendor) {
          Ledger::findorfail($request->ddlExpenselCompany)->update([
            'closing_balance' => $request->hdclosinglvendor - $request->txtAmount
          ]);
        }
        if ($request->ddlExpenselEmployee) {
          User::findorfail($request->ddlExpenselEmployee)->update([
            'closing_balance' => $request->hdPendingEmployee - $request->txtAmount
          ]);
        }
      }

      if ($request->hasFile('txtfileattachment')) {
        $path = $request->file('txtfileattachment')->store('temp');
        $file = $request->file('txtfileattachment');
        $extension = $file->getClientOriginalExtension();
        $fileName = $this->generateRandom(16) . '.' . $extension;

        Expense::findorfail($last_insert_expense_id)->update([
          'expense_proof_path' => $this->fileUpload($file, 'upload/expenses/' . $last_insert_expense_id, $fileName),
        ]);
      }
      DB::commit();
      $notification = array(
        'message' => 'Expense Created Successfully',
        'alert-type' => 'success'
      );
      return redirect()->route('expenselist')->with($notification);
    } catch (\Exception $e) {
      DB::rollback();
      $notification = array(
        'message' => 'Something went wrong!',
        'alert-type' => 'error'
      );
      return redirect()->route('expenses')->with($notification);
      $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
    }
  }

  public function expenseList()
  {
    return view('admin.accounts.expenses.expense_list');
  }

  public function expenseData()
  {
    try {
      $expenses = Expense::select('expenses.*', 'ledgers.ledger_name', 'expense_groups.expensegroup_name')
        ->join('ledgers', 'ledgers.id', 'expenses.ledger_id')
        ->join('expense_groups', 'expense_groups.id', 'expenses.expensegroup_id')
        ->get();

      return datatables()->of($expenses)
        ->addColumn('action', function ($row) {
          $html = '<i class="text-danger ti ti-x me-1" id="confrim-color(' . $row->id . ')" 
              onclick="showDelete(' . $row->id . ');"></i>';
          return $html;
        })->toJson();
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function expenseEmployeeData()
  {
    try {
      $expenses = Expense::select('expenses.*', 'users.display_name', 'expense_groups.expensegroup_name')
        ->join('users', 'users.id', 'expenses.employee_user_id')
        ->join('expense_groups', 'expense_groups.id', 'expenses.expensegroup_id')
        ->get();

      return datatables()->of($expenses)
        ->addColumn('action', function ($row) {
          // $html = '<i class="text-danger ti ti-x me-1" id="confrim-color(' . $row->id . ')" 
          //     onclick="showDelete(' . $row->id . ');"></i>';
          $html = `<a data-bs-toggle="modal" data-bs-target="#modalClose" id="divDelete"
          onclick="$('#aModalClose').attr('href','/accounts/cancelexpenseentry/'.$row->id.'/');">
          <i class="fa fa-close text-danger btn-action" title="Cancel Expense"></i>
      </a>`;

          return $html;
        })->toJson();
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function LedgerBalanceInfo(Request $request)
  {
    $ledgerBalanceInfo = Ledger::where('id', $request->ledger_id)->first();
    $companyLedgerBalanceInfo = Ledger::where('id', $request->ledger_id)->where('ledger_type_id', 1)->first();
    $employeeLeger = $this->getUserRolesForDropDown()->where('id', $request->employee_id)->first();
    return response()->json([
      'responseData' => $ledgerBalanceInfo,
      'companyLedgerBalanceInfo' => $companyLedgerBalanceInfo,
      'employeeLeger' => $employeeLeger
    ]);
  }

}
