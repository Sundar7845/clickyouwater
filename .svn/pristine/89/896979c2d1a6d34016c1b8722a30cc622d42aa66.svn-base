<?php

namespace App\Http\Controllers\Admin\ProductsManagement;

use App\Http\Controllers\Controller;
use App\Models\Brands;
use App\Models\Category;
use App\Models\Products;
use App\Models\ProductType;
use App\Traits\Common;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Intervention\Image\Facades\Image;

class ProductsController extends Controller
{
    use Common;
    public function products(Request $request)
    {
        try {
            $categories = Category::where('is_active', 1)->get();
            $product_types = ProductType::where('is_active', 1)->get();
            $brands = Brands::where('is_active', 1)->get();
            return view('admin.product_management.products.products', compact('categories', 'product_types', 'brands'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function addProducts(Request $request)
    {
        $request->validate([
            'ddlCategory' => 'required',
            'ddlProducttype' => 'required',
            'ddlBrand' => 'required',
            'txtProductName' => 'required',
            'txtCustomerPrice' => 'required',
            'txtWholesalePrice' => 'required',
            'canreturn' => 'required',
            'txtCapacity' => 'required',
            'txtDescription' => 'required',
            'txtCgst' => 'required',
            'txtSgst' => 'required',
            'productImage' => 'required'
        ]);
        DB::beginTransaction();
        try {
            if ($request->hdProductId == null) {

                $image = $request->file('productImage');
                $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
                image::make($image)->save('upload/products/' . $name_gen);
                $save_url = 'upload/products/' . $name_gen;

                Products::create([
                    'category_id' => $request->ddlCategory,
                    'product_type_id' => $request->ddlProducttype,
                    'brand_id' => $request->ddlBrand,
                    'product_name' => $request->txtProductName,
                    'customer_price' => $request->txtCustomerPrice,
                    'wholesale_price' => $request->txtWholesalePrice,
                    'is_emptycan_return' => ($request->canreturn == null ? 0 : 1),
                    'capacity' => $request->txtCapacity,
                    'desc' => $request->txtDescription,
                    'CGST' => $request->txtCgst,
                    'SGST' => $request->txtSgst,
                    'product_image' => $save_url,
                    'created_by' => Auth::user()->id
                ]);
                $notification = array(
                    'message' => 'Product Created Successfully',
                    'alert-type' => 'success'
                );
            } else {
                
                $oldImage = $request->hdProductImg;

                if ($request->file('productImage')) {
                    @unlink($oldImage);
                    $image = $request->file('productImage');
                    $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
                    Image::make($image)->save('upload/products/' . $name_gen);
                    $save_url = 'upload/products/' . $name_gen;

                    Products::findorfail($request->hdProductId)->update([
                        'product_image' => $save_url,
                        'updated_by' => Auth::user()->id
                    ]);
                }

                Products::findorfail($request->hdProductId)->update([
                    'category_id' => $request->ddlCategory,
                    'product_type_id' => $request->ddlProducttype,
                    'brand_id' => $request->ddlBrand,
                    'product_name' => $request->txtProductName,
                    'customer_price' => $request->txtCustomerPrice,
                    'wholesale_price' => $request->txtWholesalePrice,
                    'is_emptycan_return' => ($request->canreturn == null ? 0 : 1),
                    'capacity' => $request->txtCapacity,
                    'desc' => $request->txtDescription,
                    'CGST' => $request->txtCgst,
                    'SGST' => $request->txtSgst,
                    'updated_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Product Updated Successfully',
                    'alert-type' => 'success'
                );
            }

            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Product Not Created!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }

        return redirect()->route('products')->with($notification);
    }

    public function getProductsData()
    {
        try {
            $productsData = Products::select('products.*', 'categories.category_name', 'product_types.product_type_name', 'brands.brand_name')
                ->join('categories', 'categories.id', 'products.category_id')
                ->join('product_types', 'product_types.id', 'products.product_type_id')
                ->join('brands', 'brands.id', 'products.brand_id')->get();

            return datatables()->of($productsData)
                ->addColumn('action', function ($row) {
                    $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getProductsById($id)
    {
        try {
            $products = Products::select('products.*')->where('products.id', $id)->first();
            return response()->json([
                'products' => $products
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteProducts($id)
    {
        try {
            $products = Products::findorfail($id);
            $products->delete();
            $products->update([
                'deleted_by' => Auth::user()->id
            ]);
            $notification = array(
                'message' => 'Products Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (QueryException $e) {

            $notification = array(
                'message' => 'Products could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function activeStatus($id, $status)
    {
        DB::beginTransaction();
        try {
            Products::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
