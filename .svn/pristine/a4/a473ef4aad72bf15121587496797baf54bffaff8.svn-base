<?php

// app/Http/Controllers/API/OrdersController.php

namespace App\Http\Controllers\API;

use App\Enums\DocumentModulesType;
use App\Enums\WalletTransactionType;
use App\Http\Controllers\Controller;
use App\Http\Resources\OrderDetailsResource;
use App\Http\Resources\OrderResource;
use App\Jobs\PlaceOrderJob;
use App\Models\OfferHubAllocation;
use App\Models\Order;
use App\Models\OrderDet;
use App\Models\OrderTracking;
use App\Models\User;
use App\Models\UserOrderHistory;
use App\Models\UserReferralHistory;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Traits\ResponseAPI;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Dompdf\Dompdf;

class OrdersController extends Controller
{
    use ResponseAPI;
    use Common;

    public function placeOrder(Request $request)
    {
        //TODO:Job Queue for All request job(one by one)
        //TODO:Stored procedure

        $validator = $request->validate([

            'hub_id' => 'required',
            'delivery_address_id' => 'required',
            'delivery_address' => 'required',
            'delivery_charge' => 'required',
            'coupon_id' => 'nullable',
            'coupon_code' => 'nullable',
            'total_discount_amount' => 'required',
            'total_igst_amount' => 'required',
            'total_sgst_amount' => 'required',
            'total_cgst_amount' => 'required',
            'total_qty' => 'required',
            'wallet_points_used' => 'required',
            'deposit_amount' => 'required',
            'total_tax_amount' => 'required',
            'sub_total' => 'required',
            'taxable_amount' => 'required',
            'roundoff' => 'required',
            'coupon_code_type' => 'nullable',
            'offer_points' => 'nullable',
            'offer_points_used' => 'nullable',
            'grand_total' => 'required',
            'desc' => 'nullable',
            'status_id' => 'required',
            'payment_method' => 'required',
            'payment_through' => 'required',
            'product_details' => 'required|array',
            'product_details.*.product_id' => 'required',
            'product_details.*.qty' => 'required',
            'product_details.*.price' => 'required',
            'offer_id' => "nullable",
            // 'offer_id' => "nullable",
        ]);
        // PlaceOrderJob::dispatch($request);

        DB::beginTransaction();

        try {
            $currentDate = now();

            $transaction_date = $currentDate;
            $exp_delivery_date = $currentDate;
            $order_no = $this->getAutoGeneratedCode(DocumentModulesType::Order);
            // $order_no = $this->getAutoGeneratedCode(DocumentModulesType::Order);
            if ($request->payment_through == 'wallet') {
                $status = 15;
                // $invoice_path=self::generateInvoicePDF($request->order_id);
                $this->updateWallet(Auth::user()->id, $request->wallet_points_used);

                //TODO: debit from wallet(need to update wallet blc)
                $message = "Order Placed";
            } else {
                $status = $request->status_id;
                $message = "Payment Initiated";
            }
            if ($request->offer_id && $request->coupon_code_type == "coupon") {

                $hub_allocation_point = OfferHubAllocation::where('offer_id', $request->offer_id)->where('hub_id', $request->hub_id)->first();
                $total_point = (int)$hub_allocation_point->points_used + (int)$request->offer_points_used;
                if ($hub_allocation_point->points_allocated >= $total_point) {
                    $hub_allocation_point->points_used = $total_point;
                    $hub_allocation_point->save();
                    if ($request->transaction_amount < $request->offer_points)
                        $this->addReferralWallet(Auth::user()->id, $request->offer_points, WalletTransactionType::Offers);
                    $this->updateWallet(Auth::user()->id, $request->offer_points_used);
                } else {
                    $response = [
                        'status' => true,
                        'data' => [],
                        'message' => "Offer Not  Available!"
                    ];
                    return response($response, 200);
                }
            } elseif ($request->coupon_code_type == "referral") {
                # code...
                $referred_by = User::where('referral_code', $request->coupon_code)->first();

                UserReferralHistory::create([
                    'user_id' => Auth::user()->id,
                    'referred_by' => $referred_by->id,
                    'referred_on' => Carbon::today()
                ]);
                $referral_points = $this->getReferralSetting()->earnpoints_per_referral;
                //Add referral points to user wallet
                $this->addReferralWallet(Auth::user()->id, $referral_points, WalletTransactionType::Referral);
                $this->addReferralWallet($referred_by->id, $referral_points, WalletTransactionType::Referral);
            }

            $orders = Order::create([
                'order_no' => $order_no,
                'user_id' => Auth::user()->id,
                'hub_id' => $request->hub_id,
                'delivery_address_id' => $request->delivery_address_id,
                'delivery_address' => $request->delivery_address,
                'delivery_charge' => $request->delivery_charge,
                'exp_delivery_date' => $exp_delivery_date,
                // 'coupon_id' => $request->coupon_id,
                'coupon_code' => $request->coupon_code,
                'total_discount_amount' => $request->total_discount_amount,
                'total_igst_amount' => $request->total_igst_amount,
                'total_sgst_amount' => $request->total_sgst_amount,
                'total_cgst_amount' => $request->total_cgst_amount,
                'total_qty' => $request->total_qty,
                'coupon_code_type' => $request->coupon_code_type,
                'wallet_points_used' => $request->wallet_points_used,
                'deposit_amount' => $request->deposit_amount,
                'total_tax_amount' => $request->total_tax_amount,
                'sub_total' => $request->sub_total,
                'taxable_amount' => $request->taxable_amount,
                'roundoff' => $request->roundoff,
                'grand_total' => $request->grand_total,
                'desc' => $request->desc,
                'status_id' => $status,
                'transaction_amount' => $request->transaction_amount,
                'transaction_date' => $transaction_date,
                'payment_method' => $request->payment_method,
                'payment_through' => $request->payment_through,
            ]);
            $product_details = $request->product_details;
            foreach ($product_details as $value) {
                # code...
                OrderDet::create([
                    'order_id' => $orders->id,
                    'product_id' => $value['product_id'],
                    'qty' => $value['qty'],
                    'price' => $value['price'],
                    'return_empty_cans_qty' => $value['return_empty_cans_qty'],
                ]);
            }
            UserOrderHistory::create([
                'order_id' => $orders->id,
                'status_id' => $request->status_id,
            ]);
            OrderTracking::create([
                'order_id' => $orders->id,
                'status_id' => $request->status_id,
            ]);


            $response = [
                'status' => true,
                'data' => ['order_id' => $orders->id],
                'message' => $message
            ];
            DB::commit(); // Commit the transaction
            return response($response, 200);
        } catch (\Exception $e) {
            DB::rollback(); // Roll back the transaction if an error occurs

            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function updateStatus(Request $request)
    {
        $validator = $request->validate([
            'order_id' => 'required',
            'status_id' => 'required',

        ]);
        DB::beginTransaction();

        try {


            UserOrderHistory::create([
                'order_id' => $request->order_id,
                'status_id' => $request->status_id,
            ]);
            OrderTracking::create([
                'order_id' => $request->order_id,
                'status_id' => $request->status_id,
            ]);
            DB::commit();
            $response = array(
                'message' => "Updated Successfully",
                'data' => [],
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {

            DB::rollback(); // Roll back the transaction if an error occurs
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function updatePaymentStatus(Request $request)
    {
        $validator = $request->validate([
            'order_id' => 'required',
            'status_id' => 'required',
            'transaction_response' => 'required',
            'transaction_status' => 'required',
            'transaction_id' => 'required',
        ]);
        DB::beginTransaction();

        try {
            if (strtolower($request->transaction_status) == 'success') {
                $invoice = $this->getAutoGeneratedCode(DocumentModulesType::Invoice);
                $invoice_path = self::generateInvoicePDF($request->order_id);
                $this->updateLiveCount(DocumentModulesType::Invoice, 1);
            } else {
                $invoice = '';
                $invoice_path = '';
            }
            //pdf create
            $order = Order::find($request->order_id);
            $order->status_id = $request->status_id;
            $order->invoice_no = $invoice;
            $order->invoice_path = $invoice_path;
            $order->transaction_response = $request->transaction_response;
            $order->transaction_id = $request->transaction_id;
            $order->transaction_status = $request->transaction_status;
            $order->save();

            UserOrderHistory::create([
                'order_id' => $request->order_id,
                'status_id' => $request->status_id,
            ]);
            OrderTracking::create([
                'order_id' => $request->order_id,
                'status_id' => $request->status_id,
            ]);
            DB::commit();
            $response = array(
                'message' => "Updated Successfully",
                'data' => [],
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {

            DB::rollback(); // Roll back the transaction if an error occurs
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function getOrderHistory()
    {
        try {
            $userOrders = Order::where('user_id', Auth::user()->id)
                ->with('products.orderDets')
                ->get();

            $response = array(
                'message' => "Success",
                'data' => OrderResource::collection($userOrders),
                'status' => false,
            );
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function getOrderDetails($id)
    {
        try {
            $userOrders = Order::where('id', $id)->with('products.orderDets')->get();
            $response = array(
                'message' => "Success",
                'data' => OrderDetailsResource::collection($userOrders),
                'status' => false,
            );
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }


    public function generateInvoicePDF($orderId)
    {
        $order = Order::findOrFail($orderId);

        // Create new Dompdf instance
        $dompdf = new Dompdf();

        // Generate the HTML content for the invoice
        $html = view('invoice.invoice')->render();
        // $html = view('invoices.invoice', compact('order'))->render();

        // Load HTML content into Dompdf
        $dompdf->loadHtml($html);

        // Set paper size and orientation
        $dompdf->setPaper('A4', 'portrait');

        // Render the PDF
        $dompdf->render();

        // Save the PDF to a file
        $pdfOutput = $dompdf->output();
        $fileName = 'invoice-' . $order->id . '.pdf';
        $pdfPath = public_path('upload/invoice/' . $fileName);
        file_put_contents($pdfPath, $pdfOutput);

        // Return a download link to the PDF
        $url = asset('upload/invoice/' . $fileName);
        return $url;
    }
}
