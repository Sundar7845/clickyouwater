<?php

namespace App\Http\Controllers\Admin\LogisticManagement;

use App\Enums\DocumentModulesType;
use App\Enums\MenuPermissionType;
use App\Enums\RoleTypes;
use App\Http\Controllers\Controller;
use App\Models\FuelType;
use App\Models\Hub;
use App\Models\HubManufactureConfig;
use App\Models\LogisticPartner;
use App\Models\LogisticPartnerDocuments;
use App\Models\LogisticsHubConfig;
use App\Models\LogisticsManufactureConfig;
use App\Models\Manufacturer;
use App\Models\VehicleBrand;
use Illuminate\Validation\Rule;
use App\Models\VehicleType;
use App\Traits\Common;
use Carbon\Carbon;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class LogisticController extends Controller
{
   use Common;
   public function logisticPartner($id = NULL)
   {
      try {
         $allocatedHubIds = Hub::select('logistics_hub_configs.hub_id')->join('logistics_hub_configs', 'logistics_hub_configs.hub_id', 'hubs.id')->get();
         $hub = Hub::whereNotIn('id', $allocatedHubIds)->get();

         //Get states
         $states = $this->getStates();
         $man = Manufacturer::where('is_active', 1)->whereNull('deleted_at')->get();
         $fueltypes = FuelType::all();
         $vehicletypes = VehicleType::all();
         $vehiclebrands = VehicleBrand::all();
         $bindDocuments = $this->getDocumentConfigsByModule(DocumentModulesType::Logistic, $id);
         if ($bindDocuments->isEmpty()) {
            $bindDocuments = $this->getDocumentsByModule(DocumentModulesType::Logistic);
         }
         if ($id) {
            $log = LogisticPartner::find($id);
            $manconfiq = LogisticsManufactureConfig::where('logistic_partner_id', $id)->pluck('manufacture_id')->toArray();
            $hubconfiq = LogisticsHubConfig::where('logistic_partner_id', $id)->pluck('hub_id')->toArray();
            $hub_id = LogisticsHubConfig::whereIn('hub_id', $hubconfiq)->pluck('hub_id')->toArray();
            $mergeHub = array_merge($hubconfiq, $hub_id);
            $hub = LogisticsHubConfig::select('logistics_hub_configs.*', 'hubs.hub_name')
               ->join('hubs', 'hubs.id', 'logistics_hub_configs.hub_id')
               ->where('logistics_hub_configs.logistic_partner_id', $id)
               ->whereIn('logistics_hub_configs.hub_id', $mergeHub)
               ->get();
            //Get Cities against state
            $cities = $this->getCities($log->state_id);
            //Get Areas against city
            $areas = $this->getAreas($log->city_id);
            $logExample = $log->logistic_partner_code;
            return view('admin.logistic_management.edit_logistic', compact('bindDocuments', 'states', 'log', 'hub', 'manconfiq', 'hubconfiq', 'man', 'logExample', 'cities', 'areas', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
         }

         $log = null;
         $logExample = $this->getAutoGeneratedCode(DocumentModulesType::Logistic);
         $manconfiq = LogisticsManufactureConfig::where('logistic_partner_id', $id)->pluck('manufacture_id')->toArray();
         $hubconfiq = LogisticsHubConfig::where('logistic_partner_id', $id)->pluck('hub_id')->toArray();
         return view('admin.logistic_management.add_logistic', compact('log', 'bindDocuments', 'man', 'manconfiq', 'hubconfiq', 'hub', 'states', 'logExample', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function addLogisticPartner(Request $request)
   {
      $validator = Validator::make($request->all(), [
         'txtLogisticId' =>  'required',
         'txtLogisticName' =>  'required',
         'ddlManufacturerName' =>  'required',
         'ddlHubName' =>  'required',
         'txtYearsOfExperience' =>  'required',
         'txtMobile' => [
            'required', 'numeric', 'digits:10',
            Rule::unique('logistic_partners', 'mobile')->whereNull('deleted_at')->ignore($request->hdLogisticId),
         ],
         'txtEmail' => [
            'required', 'email',
            Rule::unique('logistic_partners', 'email')->whereNull('deleted_at')->ignore($request->hdLogisticId),
         ],

         'txtCreditPeriod' =>  'required',
         'txtSettlementPeriod' =>  'required',
         // 'password' => [
         //    'string', 'min:6', 'confirmed'
         // ],
         'ddlState' =>  'required',
         'ddlCity' =>  'required',
         'ddlArea' =>  'required',
         'txtAddress' =>  'required',
         'txtPincode' =>  'required',
         'txtProprietorName' =>  'required',
         'txtProprietorMobile' => 'required',
         'txtProprietorEmail' => 'required',
         'txtContactPersonName' =>  'required',
         'txtContactPersonMobile' =>  'required',
         'txtContactPersonEmail' => 'required',
      ], [
         'txtMobile.unique' => 'Mobile number already exists.',
         'txtEmail.unique' => 'Email Id already exists.'
      ]);

      if ($validator->fails()) {
         return redirect()->back()->withInput()->withErrors($validator);
      }

      DB::beginTransaction();
      try {
         if ($request->hdLogisticId == null) {

            //Create New Area Or Get Area ID
            $area_id = $this->getOrCreateAreaId($request->ddlArea, $request->ddlState, $request->ddlCity);

            // Validate the documents for hub
            $is_valid = $this->validateDocuments($request, DocumentModulesType::Logistic);

            if (isset($is_valid->documentType->documenttype_name)) {
               $notification = array(
                  'message' => $is_valid->documentType->documenttype_name . ' Required',
                  'alert-type' => 'error'
               );
               return redirect()->route('logistic')->with($notification);
            }

            $data = $request->all();

            $last_inserted_logistic_id = LogisticPartner::insertGetId([
               'logistic_partner_code' => $request->txtLogisticId,
               'logistic_partner_name' => $request->txtLogisticName,
               'years_of_experience' => $request->txtYearsOfExperience,
               'mobile' => $request->txtMobile,
               'email' => $request->txtEmail,
               'credit_period' => $request->txtCreditPeriod,
               'settlement_period' => $request->txtSettlementPeriod,
               // 'password' => Hash::make($request->password),
               'state_id' => $request->ddlState,
               'city_id' => $request->ddlCity,
               'area_id' => $area_id,
               'address' => $request->txtAddress,
               'pincode' => $request->txtPincode,
               'proprietor_name' => $request->txtProprietorName,
               'proprietor_mobile' => $request->txtProprietorMobile,
               'proprietor_email' => $request->txtProprietorEmail,
               'contact_person_name' => $request->txtContactPersonName,
               'contact_person_mobile' => $request->txtContactPersonMobile,
               'contact_person_email' => $request->txtContactPersonEmail,
               'is_active' => 1,
               'created_by' => Auth::user()->id,
               'created_at' => Carbon::now()

            ]);

            // if ($request->filled('password')) {
            //    $password = Hash::make($request->password);
            //    LogisticPartner::findorFail($last_inserted_logistic_id)->update([
            //       'password' => $password
            //    ]);
            // }

            // foreach ($data['ddlManufacturerName'] as $value) {
            //    LogisticsManufactureConfig::create([
            //       'logistic_partner_id' => $last_inserted_logistic_id,
            //       'manufacture_id' => $value

            //    ]);
            // }
            LogisticsManufactureConfig::create([
               'logistic_partner_id' => $last_inserted_logistic_id,
               'manufacture_id' => $request->ddlManufacturerName,

            ]);

            foreach ($data['ddlHubName'] as $value) {
               $datas = LogisticsHubConfig::create([
                  'logistic_partner_id' => $last_inserted_logistic_id,
                  'hub_id' => $value

               ]);
            }

            $documents = $this->getDocumentsByModule(DocumentModulesType::Logistic);

            //Create hub documents in create mode
            $this->createLogisticDocuments($request, $documents, $last_inserted_logistic_id);

            //Increase hublive count in settings table
            $this->updateLiveCount(DocumentModulesType::Logistic, 1);

            //Create hub user account for login
            $this->createUser(
               $request->txtMobile,
               $request->txtEmail,
               $request->txtMobile,
               $last_inserted_logistic_id,
               $request->txtLogisticName,
               $request->txtMobile,
               RoleTypes::LogisticPartner,
               1,
               Auth::user()->id
            );

            //Hub Activation
            $logisticHub =  LogisticsHubConfig::where('logistic_partner_id', $last_inserted_logistic_id)->get();
            foreach ($logisticHub as $value) {
               $this->hubActivation($value->hub_id);
            }

            $notification = array(
               'message' => 'Logistic Created Successfully',
               'alert-type' => 'success'
            );
         } else {

            //Create New Area Or Get Area ID
            $area_id = $this->getOrCreateAreaId($request->ddlArea, $request->ddlState, $request->ddlCity);

            //Validate the documents for hub
            $is_valid = $this->validateUpdateDocuments($request, DocumentModulesType::Logistic, $request->hdLogisticId);

            if ($is_valid !== true) {
               if ($is_valid->document_number == null || $is_valid->document_path == null) {
                  $notification = array(
                     'message' => $is_valid->documentType->documenttype_name . ' Required',
                     'alert-type' => 'error'
                  );
                  return redirect()->route('logistic', $request->hdLogisticId)->with($notification);
               }
            }

            $data = $request->all();

            LogisticPartner::findorFail($request->hdLogisticId)->update([
               'logistic_partner_code' => $request->txtLogisticId,
               'logistic_partner_name' => $request->txtLogisticName,
               'years_of_experience' => $request->txtYearsOfExperience,
               'mobile' => $request->txtMobile,
               'email' => $request->txtEmail,
               'credit_period' => $request->txtCreditPeriod,
               'settlement_period' => $request->txtSettlementPeriod,
               // 'password' => Hash::make($request->password),
               'state_id' => $request->ddlState,
               'city_id' => $request->ddlCity,
               'area_id' => $area_id,
               'address' => $request->txtAddress,
               'pincode' => $request->txtPincode,
               'proprietor_name' => $request->txtProprietorName,
               'proprietor_mobile' => $request->txtProprietorMobile,
               'proprietor_email' => $request->txtProprietorEmail,
               'contact_person_name' => $request->txtContactPersonName,
               'contact_person_mobile' => $request->txtContactPersonMobile,
               'contact_person_email' => $request->txtContactPersonEmail,
               'updated_by' => Auth::user()->id
            ]);

            // if ($request->filled('password')) {
            //    $password = Hash::make($request->password);
            //    LogisticPartner::findorFail($request->hdLogisticId)->update([
            //       'password' => $password
            //    ]);
            // }

            //Hub Activation
            $old_hub_id =  LogisticsHubConfig::where('logistic_partner_id',  $request->hdLogisticId)->value('hub_id');

            LogisticsManufactureConfig::where('logistic_partner_id', $request->hdLogisticId)->delete();
            // foreach ($data['ddlManufacturerName'] as $value) {
            //    LogisticsManufactureConfig::where('logistic_partner_id', $request->hdLogisticId)->updateorCreate([
            //       'logistic_partner_id' => $request->hdLogisticId,
            //       'manufacture_id' => $value
            //    ]);
            // }
            LogisticsManufactureConfig::create([
               'logistic_partner_id' => $request->hdLogisticId,
               'manufacture_id' => $request->ddlManufacturerName,
            ]);

            LogisticsHubConfig::where('logistic_partner_id', $request->hdLogisticId)->delete();
            foreach ($data['ddlHubName'] as $value) {
               LogisticsHubConfig::where('logistic_partner_id', $request->hdLogisticId)->updateorCreate([
                  'logistic_partner_id' => $request->hdLogisticId,
                  'hub_id' => $value

               ]);
            }
            $documents = $this->getDocumentConfigsByModule(DocumentModulesType::Logistic, $request->hdLogisticId);

            $nullDocuments = $this->getDocumentsByModule(DocumentModulesType::Logistic);

            foreach ($documents as $doc) {
               if ($request->hasFile('file_' . $doc->id)) {
                  @unlink($doc->document_path);
               }
            }
            LogisticPartnerDocuments::where('logistic_partner_id', $request->hdLogisticId)->delete();

            //Create hub documents in edit mode
            $this->createLogisticDocuments($request, $documents == null ? $documents : $nullDocuments, $request->hdLogisticId);

            //Hub Activation
            $logisticHub =  LogisticsHubConfig::where('logistic_partner_id',  $request->hdLogisticId)->get();
            //Check current hub_id
            foreach ($logisticHub as $value) {
               $this->hubActivation($value->hub_id);
               $this->hubActivation($old_hub_id);
            }

            //Update logistic user account for login
            $this->updateUser(
               $request->txtMobile,
               $request->txtEmail,
               $request->txtMobile,
               $request->hdLogisticId,
               $request->txtLogisticName,
               $request->txtMobile,
               RoleTypes::LogisticPartner,
               1,
               Auth::user()->id
            );

            $notification = array(
               'message' => 'Logistic Partner Updated Successfully',
               'alert-type' => 'success'
            );
         }

         DB::commit();
         return redirect()->route('logisticList')->with($notification);
      } catch (\Exception $e) {
         DB::rollback();
         $notification = array(
            'message' => 'Logistic Partner Not Created!',
            'alert-type' => 'error'
         );
         $redirectUrl = $request->hdLogisticId ? 'addlogistic/' . $request->hdLogisticId : 'addlogistic';
         $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
         return redirect($redirectUrl)->with($notification);
      }
   }

   private function createLogisticDocuments($request, $documents, $logistic_id)
   {
      try {
         foreach ($documents as $doc) {
            if ($request->hasFile('file_' . $doc->id)) {
               $path = $request->file('file_' . $doc->id)->store('temp');
               $file = $request->file('file_' . $doc->id);
               $extension = $file->getClientOriginalExtension();
               $fileName = $this->generateRandom(16) . '.' . $extension;
            }
            $doc_no = 'doc_' . $doc->id;
            $existingfile_path = 'hdDocumentImg_' . $doc->id;

            $documentPath = null;
            if ($request->hasFile('file_' . $doc->id)) {
               $documentPath = $this->fileUpload($file, 'upload/logistics/' . $request->txtLogisticId, $fileName);
            } elseif ($request->$existingfile_path != null) {
               $documentPath = $request->$existingfile_path;
            }

            if ($documentPath !== null) {
               LogisticPartnerDocuments::create([
                  'logistic_partner_id' => $logistic_id,
                  'documenttype_id' => $doc->documenttype_id,
                  'documentmodule_id' => $doc->documentmodule_id,
                  'document_path' => $documentPath,
                  'document_number' => $request->$doc_no
               ]);
            }
         }
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
      }
   }

   public function logisticData(Request $request)
   {
      try {
         $logisticData = "";
         $query = DB::table('logistic_partners as lp')
            ->join('logistics_manufacture_configs as lmc', 'lp.id', '=', 'lmc.logistic_partner_id')
            ->join('logistics_hub_configs as lhc', 'lhc.logistic_partner_id', '=', 'lp.id')
            ->join('manufacturers', 'lmc.manufacture_id', '=', 'manufacturers.id')
            ->join('hubs', 'lhc.hub_id', '=', 'hubs.id')
            ->leftjoin('logistic_driver_infos as ldi', 'ldi.logistic_partner_id', 'lp.id')
            ->leftjoin('logistic_vehicle_infos as lvi', 'lvi.logistic_partner_id', 'lp.id')
            ->leftjoin('logistic_partner_documents as lpd', 'lpd.logistic_partner_id', 'lp.id')
            ->select(
               'lp.*',
               'manufacturers.manufacturer_name',
               'hubs.hub_name',
               'lpd.document_path'
            )
            ->whereNull('lp.deleted_at')
            ->groupby('lmc.logistic_partner_id')->distinct();


         if ($request->state_id > 0) {
            $query = $query->where('lp.state_id', $request->state_id);
         }
         if ($request->city_id > 0) {
            $query = $query->where('lp.city_id', $request->city_id);
         }
         if ($request->area_id > 0) {
            $query = $query->where('lp.area_id', $request->area_id);
         }

         // Apply type filters based on the 'type' parameter
         if ($request->type === 'today') {
            $query = $query->whereDate('lp.created_at', today());
         } elseif ($request->type === 'thismonth') {
            $query = $query->whereMonth('lp.created_at', now()->month);
         }

         $logisticData = $query->get();

         foreach ($logisticData as $logisticPartner) {
            $logisticPartnerId = $logisticPartner->id;
            $logisticDriverCount = DB::table('logistic_driver_infos')
               ->where('logistic_partner_id', $logisticPartnerId)
               ->count();
            $logisticVehicleCount = DB::table('logistic_vehicle_infos')
               ->where('logistic_partner_id', $logisticPartnerId)
               ->count();
            $logisticPartner->logistic_driver_count = $logisticDriverCount;
            $logisticPartner->logistic_vehicle_count = $logisticVehicleCount;
         }

         return datatables()->of($logisticData)
            ->addColumn('action', function ($row) {
               $html = "";
               if ($this->isUserHavePermission(MenuPermissionType::Edit)) {
                  $html = '<a href="addlogistic/' . $row->id . '"><i class="text-primary ti ti-pencil me-1"></i></a> ';
               }
               if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
                  $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
               }
               return $html;
            })->toJson();
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function activeStatus($id, $status)
   {
      try {
         LogisticPartner::findorfail($id)->update([
            'is_active' => $status,
            'updated_by' => Auth::user()->id
         ]);
         //Hub Activation
         $logisticHub =  LogisticsHubConfig::where('logistic_partner_id',  $id)->get();
         //Check current hub_id
         foreach ($logisticHub as $value) {
            $this->hubActivation($value->hub_id);
         }
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function DeletelogisticList($id)
   {

      try {
         $logistic = LogisticPartner::findorfail($id);
         $logisticHub =  LogisticsHubConfig::where('logistic_partner_id',  $id)->get();
         $logistic->delete();
         LogisticsManufactureConfig::where('logistic_partner_id', $id)->delete();
         LogisticsHubConfig::where('logistic_partner_id', $id)->delete();

         $logistic->Update([
            'deleted_by' => Auth::user()->id
         ]);

         //Hub Activation
         //Check current hub_id
         foreach ($logisticHub as $value) {
            $this->hubActivation($value->hub_id);
         }

         $notification = array(
            'message' => 'LogisticPartner Deleted Successfully',
            'alert' => 'success'
         );
         return response()->json([
            'responseData' => $notification
         ]);
      } catch (\Exception $e) {

         $notification = array(
            'message' => 'LogisticPartner could not be deleted',
            'alert' => 'error'
         );
         return response()->json([
            'responseData' => $notification
         ]);
      }
   }

   public function logisticPartnerList(Request $request)
   {
      try {
         //Get states
         $states = $this->getStates();
         //To load list based type(All,Today,ThisMonth)
         $type = $request->input('type');
         return view('admin.logistic_management.logistic_list', compact('type', 'states'));
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function getHubs(Request $request)
   {
      //DO:IF MULPLE MANUFACTURES
      // $data_array = $request->all();
      // $manufacturers = $data_array['manufacturer_id'];
      // $results = collect();

      // foreach ($manufacturers as $value) {
      //    $data = HubManufactureConfig::select('hubs.id', 'hubs.hub_name')
      //       ->join('hubs', 'hubs.id', 'hub_manufacture_configs.hub_id')
      //       ->where('manufacturer_id', $value)
      //       ->whereNotIn('hubs.id', $allocatedHubIds)
      //       ->orderBy('hub_name', 'asc')
      //       ->get(["hub_name", "id"]);

      //    // Concatenate the data with the existing results
      //    $results = $results->concat($data);
      // }

      $allocatedHubIds = Hub::select('hub_id')->join('logistics_hub_configs', 'logistics_hub_configs.hub_id', 'hubs.id')->get();

      $hubs = HubManufactureConfig::select('hubs.id', 'hubs.hub_name')
         ->join('hubs', 'hubs.id', 'hub_manufacture_configs.hub_id')
         ->where('manufacturer_id', $request->manufacturer_id)
         ->whereNotIn('hubs.id', $allocatedHubIds)
         ->orderBy('hub_name', 'asc')
         ->get(["hub_name", "id"]);

      return response()->json($hubs);
   }

   public function logisticDocument($id)
   {
      try {
         $documentTitle = $this->documentTitle(DocumentModulesType::Logistic);
         $documents = $this->documentByUsers(DocumentModulesType::Logistic, $id);
         $documentmodule_id = DocumentModulesType::Logistic;
         $logisticDetails = LogisticPartner::with('area', 'city', 'state')
            ->where('id', $id)
            ->first();
         $userCode = $logisticDetails->logistic_partner_code;
         $userName = $logisticDetails->logistic_partner_name;
         $userMobile = $logisticDetails->mobile;
         $userActiveStatus = $logisticDetails->is_active;
         $userAddress = $logisticDetails->address . ','
            . $logisticDetails->area->area_name . ','
            . $logisticDetails->city->city_name . ','
            . $logisticDetails->state->state_name . '-'
            . $logisticDetails->pincode;
         return view('admin.documents.documents', compact(
            'documents',
            'documentTitle',
            'documentmodule_id',
            'userCode',
            'userName',
            'userMobile',
            'userAddress',
            'userActiveStatus'
         ));
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function verifyDocument($id, $status)
   {
      try {
         $this->updateDocumentVerification(DocumentModulesType::Logistic, $id, $status);
      } catch (\Exception $e) {
         DB::rollback();
         $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }
}
