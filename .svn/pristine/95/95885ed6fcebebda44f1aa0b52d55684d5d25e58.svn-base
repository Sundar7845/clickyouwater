<?php

namespace App\Traits;

use App\Models\Cordinates;
use App\Models\Hub;
use GuzzleHttp\Client;
use GeometryLibrary\PolyUtil;
use GoogleMaps\Facade\GoogleMapsFacade;
use Grimzy\LaravelMysqlSpatial\Types\Point;
use Grimzy\LaravelMysqlSpatial\Types\Polygon;
use Grimzy\LaravelMysqlSpatial\Types\LineString;

trait Maps
{
    // private $api_key = 'AIzaSyCxSrT3mnTnRnbUSW1DGhTKAu2kGpdgm5Y';
    public function getDistance($fromLatLng, $toLatLng)
    {
        $response = GoogleMapsFacade::load('directions')
            ->setParam(['destination' => $toLatLng, 'origin' => $fromLatLng])
            ->get();

        // $url = 'https://maps.googleapis.com/maps/api/directions/json?destination=' . $toLatLng . '&origin=' . $fromLatLng . '&key=' . $this->api_key;

        // $client = new Client();
        // $response = $client->request('GET', $url);
        // $data = json_decode($response->getBody(), true);

        $data = json_decode($response, true);

        $distance = $data['routes'][0]['legs'][0]['distance'];
        $duration = $data['routes'][0]['legs'][0]['duration'];

        $result = [
            'distance' => $distance,
            'duration' => $duration,
        ];

        return response()->json($result)->content();
    }

    public function getServiceAvailable($lat, $lng)
    {
        $point = new Point($lat, $lng);

        // $value = "(11.072191811309,77.039669835422),(11.044562073317,77.030571782443),(11.043045731869,77.055806004855),(11.07202334519,77.065247380588),(11.089543302088,77.0487678884),(11.083984198646,77.029198491427),(11.075729577403,77.02456363425)";

        // $polygon = []; // Define $polygon array

        // foreach (explode('),(', trim($value, '()')) as $index => $single_array) {
        //     if ($index == 0) {
        //         $lastcord = explode(',', $single_array);
        //     }
        //     $coords = explode(',', $single_array);
        //     $polygon[] = new Point($coords[0], $coords[1]);
        // }
        // $polygon[] = new Point($lastcord[0], $lastcord[1]);

        // $poly = new Polygon([new LineString($polygon)]);
        // // $poly->contains($poly,$point);
        // $cordinates = new Cordinates();
        // $cordinates->geo_coordinates = $poly;
        // $cordinates->save();

        $geo_location = Hub::where('id', 2)->contains('geo_coordinates', $point)->latest()->first();
        // dd($geo_location);
        if (!$geo_location) {
            $response = [
                'status' => false,
                'message' => "Service not available in this area",
            ];
            return response($response, 200);
        } else {
            $response = [
                'status' => true,
                'message' => "Service available in this area",
            ];
            return response($response, 200);
        }
        // dd($poly);
    }

    public static function format_coordiantes($coordinates)
    {
        $data = [];
        foreach ($coordinates as $coord) {
            $data[] = (object)['lat' => $coord->getlat(), 'lng' => $coord->getlng()];
        }
        return $data;
    }
}
