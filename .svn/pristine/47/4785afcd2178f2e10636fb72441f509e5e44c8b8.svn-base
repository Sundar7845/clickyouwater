<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Http\Resources\ProductResource;
use App\Models\Cart;
use App\Models\CustomerAddress;
use App\Models\Products;
use App\Models\ProductType;
use App\Models\StateBrandAllocation;
use App\Models\User;
use App\Traits\Common;
use App\Traits\ResponseAPI;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ProductsController extends Controller
{
    use Common;
    use ResponseAPI;
    //
    public function getProductTypes()
    {
        # code...
        try {

            $types = ProductType::where('is_active', 1)->get(['id', 'product_type_name', 'delivery_charge', 'delivery_duration', 'order_before_time', 'newcan_deposit_amt', 'min_order_qty', 'max_order_qty', 'desc']);

            $response = [
                'status' => true,
                'data' => $types,
            ];
            return response($response, 200);
        } catch (\Exception $e) {

            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), 1, request()->ip(), gethostname(), 1);
            // return response($response, 200);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function getProducts($category_id = null)
    {
        # code...
        try {


            $customer_id = User::where('id', Auth::user()->id)->pluck('ref_id')->first();
            $customer_address = CustomerAddress::where('customer_id', $customer_id)->where('is_default', 1)->select('state_id', 'city_id')->first();
            $brands = StateBrandAllocation::where('state_id', $customer_address->state_id)->where('city_id', $customer_address->city_id)->pluck('brand_id')->first();
            // dd($customer_id);
            // $products = Products::where('is_active', 1);
            // if ($category_id != null) {
            //     $products = $products->where('category_id', $category_id);
            // }
            // $products = $products->get(["id", "product_name", "category_id", "product_image", "customer_price", "wholesale_price", "capacity", "desc", "is_emptycan_return", "CGST", "SGST"]);
            $products = Products::with('brand', 'category', 'productType')
                ->whereIn('brand_id', explode(",", $brands))
                ->when($category_id, function ($query, $category_id) {
                    return $query->where('category_id', $category_id);
                })
                ->whereHas('brand', function ($query) {
                    $query->where('is_active', 1);
                })
                ->whereHas('category', function ($query) {
                    $query->where('is_active', 1);
                })
                ->whereHas('productType', function ($query) {
                    $query->where('is_active', 1);
                })
                ->get();
            //dd($products);
            $products = ProductResource::collection($products);
            // Append base URL to product_image field

            // $cart = Cart::where('product_id', 1)->where('user_id', Auth::user()->id)->first();
            // dd($cart);
            foreach ($products as $product) {
                $cart = Cart::where('product_id', $product->id)->where('user_id', Auth::user()->id)->first();
                $product->product_image = $this->getBaseUrl() . '/' . $product->product_image;
                $product->is_cart = ($cart != null ? true : false);
            }

            $response = [
                'status' => true,
                'data' => $products,
            ];
            return response($response, 200);
        } catch (\Exception $e) {

            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), 1, request()->ip(), gethostname(), 1);
            // return response($response, 200);
            return $this->error($e->getMessage(), 200);
        }
    }


    public function getProductDetails($id = null)
    {
        # code...
        try {

            // $products = Products::where('id', $id)->get(["id", "product_name", "category_id", "product_image", "customer_price", "wholesale_price", "capacity", "desc", "is_emptycan_return", "CGST", "SGST"]);
            $products = Products::with('brand', 'category', 'productType')->where('id', $id)->get();
            $products = ProductResource::collection($products);
            // Append base URL to product_image field
            foreach ($products as $product) {
                $cart = Cart::where('product_id', $product->id)->where('user_id', Auth::user()->id)->first();
                $product->product_image = $this->getBaseUrl() . '/' . $product->product_image;
                $product->is_cart = ($cart != null ? true : false);
            }

            $response = [
                'status' => true,
                'data' => $products,
            ];
            return response($response, 200);
        } catch (\Exception $e) {

            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), 1, request()->ip(), gethostname(), 1);
            // return response($response, 200);
            return $this->error($e->getMessage(), 200);
        }
    }
}
