<?php

namespace App\Http\Controllers\Admin\UserRightsManagement;

use App\Http\Controllers\Controller;
use App\Models\Employee;
use App\Models\Menu;
use App\Models\RolePermission;
use App\Models\User;
use App\Models\UserRolePermission;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;

class UsersController extends Controller
{
    public function users()
    {
        $employee = Employee::get();
        $users = User::get();
        $roles = RolePermission::select('role_permissions.*', 'roles.role_name')->join('roles', 'roles.id', 'role_permissions.role_id')->where('roles.id', '!=', 1)->get();
        return view('admin.users_rights_management.users', compact('employee', 'users', 'roles'));
    }

    public function createUser(Request $request)
    {
        // dd($request->all());
        $request->validate([
            'ddlEmployee' => 'required',
            'ddlRoleName' => 'required',
            'txtDisplayName' => 'required',
            'txtUserMobile' => 'required',
            'txtUserEmail' => 'required',
            'password' => 'required|min:6|confirmed',
            'password_confirmation' => 'required|min:6'
        ]);

        $employee = Employee::where('id', $request->ddlEmployee)->pluck('employee_name')->first();

        if ($request->hdRolePermissionId == null) {
            $user_id =  User::insertGetId([
                'user_name' => $employee,
                'employee_id' => $request->ddlEmployee,
                'email' => $request->txtUserEmail,
                'password' => Hash::make($request->password),
                'role_id' => $request->ddlRoleName,
                'display_name' => $request->txtDisplayName,
                'mobile' => $request->txtUserMobile,
                'created_by' => Auth::user()->id
            ]);
            $id = $user_id;
            $fileds = $request['menuId'];
            $menuPermissionData = [];
            for ($i = 0; $i < count($request['menuId']); $i++) {

                $row = $fileds[$i];
                $menuPermissionData['rolepermission_id'] = $request['ddlRoleName'];
                $menuPermissionData['user_id'] = $id;
                $menuPermissionData['menu_id'] = $row;
                $menuPermissionData['is_edit'] = $request['checkEdit'][$row][0] ?? 0;
                $menuPermissionData['is_delete'] = $request['checkDelete'][$row][0] ?? 0;
                $menuPermissionData['is_view'] = $request['checkView'][$row][0] ?? 0;
                $menuPermissionData['is_print'] = $request['checkPrint'][$row][0] ?? 0;
                $menuPermissionData['is_approval'] = $request['checkApproval'][$row][0] ?? 0;
                $menuPermissionData['created_by'] =  Auth::user()->id;

                $dd = UserRolePermission::create($menuPermissionData);
            }

            $notification = array(
                'message' => 'User Created Successfully',
                'alert-type' => 'success'
            );
        } else {
            User::findorfail($request->hdRolePermissionId)->update([
                'user_name' => $employee,
                'employee_id' => $request->ddlEmployee,
                'email' => $request->txtUserEmail,
                'password' => Hash::make($request->password),
                'role_id' => $request->ddlRoleName,
                'display_name' => $request->txtDisplayName,
                'mobile' => $request->txtUserMobile,
                'updated_by' => Auth::user()->id
            ]);
            UserRolePermission::where('user_id', $request->hdRolePermissionId)->delete();
            $id = $request->hdRolePermissionId;
            $fileds = $request['menuId'];
            $menuPermissionData = [];
            for ($i = 0; $i < count($request['menuId']); $i++) {

                $row = $fileds[$i];
                $menuPermissionData['rolepermission_id'] = $request['ddlRoleName'];
                $menuPermissionData['user_id'] = $id;
                $menuPermissionData['menu_id'] = $row;
                $menuPermissionData['is_edit'] = $request['checkEdit'][$row][0] ?? 0;
                $menuPermissionData['is_delete'] = $request['checkDelete'][$row][0] ?? 0;
                $menuPermissionData['is_view'] = $request['checkView'][$row][0] ?? 0;
                $menuPermissionData['is_print'] = $request['checkPrint'][$row][0] ?? 0;
                $menuPermissionData['is_approval'] = $request['checkApproval'][$row][0] ?? 0;
                $menuPermissionData['created_by'] =  Auth::user()->id;

                $create = UserRolePermission::create($menuPermissionData);
            }

            $notification = array(
                'message' => 'User Updated Successfully',
                'alert-type' => 'success'
            );
        }
        return redirect()->route('users')->with($notification);
    }

    public function listMenus($id)
    {
        $getMenuId = RolePermission::select('menu_id')->where('role_id', '=', $id)->get()->toArray();
        $getMenuName = explode(',', $getMenuId[0]['menu_id']);
        $menu = Menu::where('is_visible',1)->whereIn('id', $getMenuName)->get();
        return response()->json([
            'menu' => $menu
        ]);
    }

    public function getUserPermissionData(Request $request)
    {
        $userRoleData = User::select('users.*', 'roles.role_name')->join('roles', 'roles.id', 'users.role_id')->where('users.id', '!=', 1)->get();
        return datatables()->of($userRoleData)
            ->addColumn('action', function ($row) {
                $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                $html .= '<i class="text-danger ti ti-trash me-1" id="confirm-color' . $row->id . '" onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    public function getUserPermissionById($id)
    {
        $userPermission = User::select('users.*', 'roles.role_name')->join('roles', 'roles.id', 'users.role_id')
        ->where('users.id', '!=', 1)->where('users.id', $id)->first();

        $userMenuPermission = UserRolePermission::where('user_id', $id)->get();

        return response()->json([
            'userPermission' => $userPermission,
            'userMenuPermission' => $userMenuPermission
        ]);
    }

    public function activeStatus($id, $status)
    {
        User::findorfail($id)->update([
            'is_active' => $status,
            'updated_by' => Auth::user()->id
        ]);
    }

    public function deleteUserPermission($id)
    {
        try {
            $permission = User::findorfail($id);
            $permission->delete();

            $permission->Update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'User Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (QueryException $e) {

            $notification = array(
                'message' => 'User could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }
}
