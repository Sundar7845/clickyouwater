<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Http\Controllers\Controller;
use App\Models\AssetType;
use App\Traits\Common;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;

class AssetTypeController extends Controller
{
    use Common;
    public function assetType()
    {
        try {
            return view('admin.masters.asset_type.asset_type');
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function addAssetType(Request $request)
    {
        $request->validate([
            'txtAssetType' => [
                'required',
                Rule::unique('asset_types', 'asset_type')->WhereNull('deleted_at')->ignore($request->hdAssetTypeId),
            ],
            'txtPrefix' => [
                'required',
                Rule::unique('asset_types', 'prefix')->WhereNull('deleted_at')->ignore($request->hdAssetTypeId),
            ],
        ], [
            'txtAssetType.unique' => 'Asset type already exists!.',
            'txtPrefix.unique' => 'Asset prefix already exists!.',
        ]);

        DB::beginTransaction();
        try {

            if ($request->hdAssetTypeId == null) {
                AssetType::create([
                    'asset_type' => $request->txtAssetType,
                    'prefix' => $request->txtPrefix,
                    'created_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Asset Type Created Successfully',
                    'alert-type' => 'success'
                );
            } else {

                AssetType::findorfail($request->hdAssetTypeId)->update([
                    'asset_type' => $request->txtAssetType,
                    'prefix' => $request->txtPrefix,
                    'updated_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Asset Type Updated Successfully',
                    'alert-type' => 'success'
                );
            }
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Asset Type Not Created!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
        return redirect()->route('asset-type')->with($notification);
    }

    public function getAssetTypeById($id)
    {
        try {
            $assettype = AssetType::select('asset_types.*')->where('asset_types.id', $id)->first();
            return response()->json([
                'assettype' => $assettype
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getAssetTypeData()
    {
        try {
            $assetTypeData = AssetType::select('asset_types.*')->whereNull('deleted_at')->get();
            return datatables()->of($assetTypeData)
                ->addColumn('action', function ($row) {
                    $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteAssetType($id)
    {
        try {
            $assetType = AssetType::findorfail($id);
            $assetType->delete();
            $assetType->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'AssetType Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
            $notification = array(
                'message' => $e->getMessage(),
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
        // } catch (QueryException $e) {

        //     $notification = array(
        //         'message' => 'AssetType Could Not Be Deleted!',
        //         'alert' => 'error'
        //     );
        //     return response()->json([
        //         'responseData' => $notification
        //     ]);
        // }
    }
}
