<?php

namespace App\Http\Controllers\Admin\AdminOrders;

use App\Enums\DocumentModulesType;
use App\Http\Controllers\Controller;
use App\Models\AdminOrder;
use App\Models\AdminOrderDet;
use App\Models\Hub;
use App\Models\HubManufactureConfig;
use App\Models\HubStock;
use App\Models\ManufactureStock;
use App\Models\Products;
use App\Traits\Common;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class AdminOrderController extends Controller
{
    use Common;
    //Admin Place Order View
    public function adminOrders()
    {
        try {
            //TODO::Allow admin to place order for all products(Don't check is_watercan)
            // $products = Products::select('products.id as product_id', 'products.product_name as product_name')
            // ->join('categories', 'categories.id', 'products.category_id')
            // ->where('categories.is_watercan', 1)
            // ->where('products.is_active', 1)->get();

            $adminOrderNo = $this->getAutoGeneratedCode(DocumentModulesType::AdminOrder);
            $hubs = Hub::where('is_active', 1)->whereNull('deleted_at')->get();
            $products = Products::where('is_active', 1)->whereNull('deleted_at')->get();


            return view('admin.adminorders.admin_orders', compact('adminOrderNo', 'hubs', 'products'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    //Place Admin Order
    public function addAdminOrder(Request $request)
    {
        DB::beginTransaction();
        try {
            $validator = Validator::make($request->all(), [
                "adminOrderNo" => 'required',
                "ddlHubName" => 'required',
                "tabProductName" => 'required',
                "tabProductQty" => 'required',
            ]);

            if ($validator->fails()) {
                return redirect()->back()->withInput()->withErrors($validator);
            }

            $productName = $request->tabProductName;
            $productQty = $request->tabProductQty;

            if (count($productName) && count($productName) == count($productQty)) {

                $adminOrder = AdminOrder::create([
                    "order_no" => $request->adminOrderNo,
                    "hub_id" => $request->ddlHubName,
                    "user_id" => Auth::user()->id,
                    "total_qty" => array_sum($productQty)
                ]);

                foreach ($productName as $key => $product) {
                    AdminOrderDet::create([
                        'admin_order_id' => $adminOrder->id,
                        'product_id' => $product,
                        'qty' => $productQty[$key]
                    ]);

                    //Store Order Data in HubStock
                    HubStock::updateOrCreate([
                        'product_id' => $product,
                        'hub_id' => $request->ddlHubName,
                    ], [
                        'hub_id' => $request->ddlHubName,
                        'product_id' => $product,
                        'order_qty' => DB::raw('order_qty + ' . $productQty[$key])
                    ]);

                    //Store Order Data in ManufacturerStock
                    $manufacture_id = HubManufactureConfig::where('hub_id', $request->ddlHubName)->pluck('manufacturer_id')->first();
                    ManufactureStock::updateOrCreate([
                        'product_id' => $product,
                        'manufacture_id' => $manufacture_id,
                    ], [
                        'manufacture_id' => $manufacture_id,
                        'product_id' => $product,
                        'order_qty' => DB::raw('order_qty + ' . $productQty[$key])
                    ]);
                }
            }

            //Increase OrderNo count in settings table
            $this->updateLiveCount(DocumentModulesType::AdminOrder, 1);

            DB::commit();
            $notification = array(
                'message' => 'Ordere Placed Successfully',
                'alert-type' => 'success'
            );
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Something Went Wrong!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
        return redirect()->route('adminOrders')->with($notification);
    }

    public function adminOrderList()
    {
        $hubs = Hub::where('is_active', 1)->whereNull('deleted_at')->get();
        return view('admin.adminorders.admin_orders_list', compact('hubs'));
    }

    public function adminOrderData(Request $request)
    {
        try {
            $adminoderdata = "";
            $query = AdminOrder::select('admin_orders.*', 'hubs.hub_name', 'admin_order_dets.product_id', 'products.product_name', 'admin_order_dets.qty')
                ->join('admin_order_dets', 'admin_order_dets.admin_order_id', 'admin_orders.id')
                ->join('products', 'products.id', 'admin_order_dets.product_id')
                ->join('hubs', 'hubs.id', 'admin_orders.hub_id');

            if ($request->hub_id > 0) {
                $query = $query->where('admin_orders.hub_id', $request->hub_id);
            }

            $adminoderdata = $query->get();

            return datatables()->of($adminoderdata)->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
