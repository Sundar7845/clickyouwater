<?php

namespace App\Http\Controllers\Admin\Accounts;

use App\Enums\DocumentModulesType;
use App\Http\Controllers\Controller;
use App\Models\Bank;
use App\Models\Expense;
use App\Models\Ledger;
use App\Models\Payment;
use App\Models\PaymentMode;
use App\Models\PaymentType;
use App\Models\User;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class PaymentsController extends Controller
{
  use Common;
  public function payments()
  {
    try {
      $paymentType = PaymentType::get();
      $employeeName = $this->getUserRolesForDropDown();
      $companyLedger = Ledger::where('ledger_type_id', 1)->get();
      $paymentMode = PaymentMode::get();
      $bankName = Bank::get();
      $payment_auto_code = $this->getAutoGeneratedCode(DocumentModulesType::Payment);
      return view('admin.accounts.payments.payments', compact('bankName', 'paymentType', 'employeeName', 'companyLedger', 'paymentMode', 'payment_auto_code'));
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function paymentsForGeneralExpense(Request $request)
  {
    try {
      $generalExpenseData = Ledger::select('ledgers.*', 'expenses.amount_paid')
        ->join('expenses', 'expenses.ledger_id', 'ledgers.id')
        ->where('ledger_type_id', $request->ledger_type_id)
        ->where('expenses.amount_paid', 0)
        ->groupBy('ledgers.ledger_name')
        ->distinct()
        ->get();
      return response()->json([
        'generalExpenseData' => $generalExpenseData
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function BalanceInfo(Request $request)
  {
    try {
      $companyLedgerBalanceInfo = Ledger::where('id', $request->ledger_id)->where('ledger_type_id', 1)->first();
      return response()->json([
        'companyLedgerBalanceInfo' => $companyLedgerBalanceInfo
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function getPendingBillsData(Request $request)
  {
    try {
      $vendorPendingBills = Expense::where('ledger_id', $request->vendor_id)->where('is_paid', 0)->get();
      $employeePendingBills = Expense::where('ledger_id', $request->ledger_id)->where('is_paid', 0)->get();
      return response()->json([
        'vendorPendingBills' => $vendorPendingBills,
        'employeePendingBills' => $employeePendingBills
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function createPayment(Request $request)
  {
    DB::beginTransaction();
    try {

      Payment::Create([
        'payment_date' => $request->ddlPaymentDate,
        'payment_code' => $request->txtPaymentCode,
        'ledger_id' => $request->ddlLedgerName,
        'company_ledger_id' => $request->ddlCompanyLedger,
        'employee_user_id' => $request->ddlEmployeeName,
        'payment_type_id' => $request->ddlPaymentFor,
        'payment_mode_id' => $request->ddlPaymentMode,
        'amount_paid' => $request->txtAmount,
        'notes' => $request->txtRemarks,
        'bank_id' => $request->ddlBankName,
        'branch_name' => $request->txtBranchName,
        'transaction_date' => $request->txtTransDate,
        'transaction_number' => $request->txtChequeNo,
        'is_cancelled' => 0,
        'created_by' => Auth::user()->id,
      ]);

      $this->updateLiveCount(DocumentModulesType::Payment, 1);

      if ($request->ddlPaymentFor == 1) {
        $vendor = Ledger::findOrfail($request->ddlLedgerName)->where('ledger_type_id', 2)->first();
        Ledger::findOrfail($vendor->id)->update([
          'closing_balance' => $vendor->closing_balance - $request->txtAmount
        ]);
      }

      if ($request->ddlPaymentFor == 2) {
        $employee = User::findOrfail($request->ddlEmployeeName)->first();
        User::findOrfail($employee->id)->update([
          'closing_balance' => $employee->closing_balance - $request->txtAmount
        ]);
      }

      $ledger = Ledger::where('id', $request->ddlCompanyLedger)->where('ledger_type_id', 1)->first();
      Ledger::findOrfail($ledger->id)->update([
        'closing_balance' => $ledger->closing_balance - $request->txtAmount
      ]);

      $data = json_decode($request->hiddenPaymentDet, true);

      foreach ($data as $value) {
        $expenses = Expense::whereIn('ledger_id', $value->purchaseId)->get();

        foreach ($expenses as $expense) {
          Expense::findorfail($expense->id)->update([
            'closing_balance' => $expense->amount_paid + $value['amount']
          ]);
        }
      }

      $notification = array(
        'message' => 'Payments Created Successfully',
        'alert-type' => 'success'
      );

      DB::commit();

      return redirect()->route('payments')->with($notification);
    } catch (\Exception $e) {
      DB::rollBack();
      $notification = array(
        'message' => 'Something went wrong!',
        'alert-type' => 'error'
      );
      return redirect()->route('payments')->with($notification);
      $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function paymentsList()
  {
    return view('admin.accounts.payments.payments_list');
  }
}
