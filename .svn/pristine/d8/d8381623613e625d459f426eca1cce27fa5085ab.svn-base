<?php

namespace App\Http\Controllers\Admin\Accounts;

use App\Enums\DocumentModulesType;
use App\Enums\MenuPermissionType;
use App\Http\Controllers\Controller;
use App\Models\Bank;
use App\Models\Expense;
use App\Models\Ledger;
use App\Models\Payment;
use App\Models\PaymentDet;
use App\Models\PaymentMode;
use App\Models\PaymentType;
use App\Models\User;
use App\Traits\Common;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class PaymentsController extends Controller
{
  use Common;
  public function payments()
  {
    try {
      $paymentType = PaymentType::get();
      $companyLedger = Ledger::where('ledger_type_id', 1)->get();
      $paymentMode = PaymentMode::get();
      $bankName = Bank::get();
      $payment_auto_code = $this->getAutoGeneratedCode(DocumentModulesType::Payment);
      return view('admin.accounts.payments.payments', compact('bankName', 'paymentType', 'companyLedger', 'paymentMode', 'payment_auto_code'));
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function paymentsForExpense(Request $request)
  {
    try {
      $generalExpenseData = Ledger::select('ledgers.*', 'expenses.amount_paid', 'expenses.amount')
        ->join('expenses', 'expenses.ledger_id', 'ledgers.id')
        ->where('ledger_type_id', $request->ledger_type_id)
        ->where('expenses.is_paid', '!=', 1)
        ->where('expenses.is_cancelled', 0)
        // ->where('expenses.amount_paid', '!=', 'expenses.amount')
        ->groupBy('ledgers.ledger_name')
        ->distinct()
        ->get();
      $employeeExpenseData = $this->getUserRolesForDropDown();
      return response()->json([
        'generalExpenseData' => $generalExpenseData,
        'employeeExpenseData' => $employeeExpenseData
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function BalanceInfo(Request $request)
  {
    try {
      $companyLedgerBalanceInfo = Ledger::where('id', $request->ledger_id)->where('ledger_type_id', 1)->first();
      return response()->json([
        'companyLedgerBalanceInfo' => $companyLedgerBalanceInfo
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function getPendingBillsData(Request $request)
  {
    try {
      $vendorPendingBills = Expense::where('ledger_id', $request->vendor_id)->where('is_paid', 0)->whereColumn('amount', '>', 'amount_paid')->get();
      $employeePendingBills = Expense::where('ledger_id', $request->ledger_id)->where('is_paid', 0)->whereColumn('amount', '>', 'amount_paid')->get();
      return response()->json([
        'vendorPendingBills' => $vendorPendingBills,
        'employeePendingBills' => $employeePendingBills
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function createPayment(Request $request)
  {
    DB::beginTransaction();
    try {

      $lastInsertedPaymentId = Payment::insertGetId([
        'payment_date' => $request->ddlPaymentDate,
        'payment_code' => $request->txtPaymentCode,
        'ledger_id' => $request->ddlLedgerName,
        'company_ledger_id' => $request->ddlCompanyLedger,
        'employee_user_id' => $request->ddlEmployeeName,
        'payment_type_id' => $request->ddlPaymentFor,
        'payment_mode_id' => $request->ddlPaymentMode,
        'amount_paid' => $request->txtAmount,
        'notes' => $request->txtRemarks,
        'bank_id' => $request->ddlBankName,
        'branch_name' => $request->txtBranchName,
        'transaction_date' => $request->txtTransDate,
        'transaction_number' => $request->txtChequeNo,
        'is_cancelled' => 0,
        'created_by' => Auth::user()->id,
        'created_at' => Carbon::now()
      ]);

      $this->updateLiveCount(DocumentModulesType::Payment, 1);

      if ($request->ddlPaymentFor == 1) {
        $vendor = Ledger::where('id', $request->ddlLedgerName)->where('ledger_type_id', 2)->first();
        Ledger::findOrfail($vendor->id)->update([
          'closing_balance' => $vendor->closing_balance - $request->txtAmount
        ]);
      }

      if ($request->ddlPaymentFor == 2) {
        $employee = User::findOrfail($request->ddlEmployeeName);
        User::findOrfail($employee->id)->update([
          'closing_balance' => $employee->closing_balance - $request->txtAmount
        ]);
      }

      $ledger = Ledger::where('id', $request->ddlCompanyLedger)->where('ledger_type_id', 1)->first();
      Ledger::findOrfail($ledger->id)->update([
        'closing_balance' => $ledger->closing_balance - $request->txtAmount
      ]);

      $data = json_decode($request->hiddenPaymentDet, true);

      $expenseIds = array_column($data, 'expenseId');

      $expenses = Expense::whereIn('id', $expenseIds)->get();

      foreach ($data as $value) {
        foreach ($expenses as $exp) {
          if ($exp->id == $value['expenseId']) {
            $newAmountPaid = $exp->amount_paid + $value['amount'];
            Expense::findOrFail($value['expenseId'])->update([
              'amount_paid' => $newAmountPaid
            ]);
            PaymentDet::create([
              'payment_id' => $lastInsertedPaymentId,
              'expense_id' => $value['expenseId'],
              'amount'     => $value['amount']
            ]);
          }
        }
      }

      $notification = array(
        'message' => 'Payments Created Successfully',
        'alert-type' => 'success'
      );

      DB::commit();

      return redirect()->route('payments')->with($notification);
    } catch (\Exception $e) {
      DB::rollBack();
      $notification = array(
        'message' => 'Something went wrong!',
        'alert-type' => 'error'
      );
      return redirect()->route('payments')->with($notification);
      $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function paymentsList()
  {
    $generalExpenseData = Ledger::where('ledger_type_id', 2)->get();
    $employeeExpenseData = $this->getUserRolesForDropDown();
    return view('admin.accounts.payments.payments_list', compact('generalExpenseData', 'employeeExpenseData'));
  }

  public function generalPaymentData(Request $request)
  {
    try {
      $generalPaymentData = "";
      $query = Payment::select('payments.*', 'ledgers.ledger_name', 'payment_modes.payment_mode', 'payment_types.payment_type')
        ->join('ledgers', 'ledgers.id', 'payments.ledger_id')
        ->join('payment_types', 'payment_types.id', 'payments.payment_type_id')
        ->join('payment_modes', 'payment_modes.id', 'payments.payment_mode_id')
        ->whereBetween('payment_date', [$request->startdate, $request->enddate]);

      if ($request->ledger_id > 0) {
        $query = $query->where('payments.ledger_id', $request->ledger_id);
      }

      $generalPaymentData = $query->get();
      return datatables()->of($generalPaymentData)
        ->addColumn('action', function ($row) {
          $html = "";
          if ($row->is_cancelled == 1) {
            $html = '<span class="text-white badge bg-danger">Cancelled</span>';
          } else {
            if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
              $html = '<i class="text-danger ti ti-x me-1" title="cancel expense" 
          id="confrim-color(' . $row->id . ')" onclick="showCancel(' . $row->id . ');"></i>';
            }
          }

          return $html;
        })->toJson();
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function employeePaymentData(Request $request)
  {
    try {
      $employeePaymentData = "";
      $query = Payment::select('payments.*', 'users.display_name', 'payment_modes.payment_mode', 'payment_types.payment_type')
        ->join('users', 'users.id', 'payments.employee_user_id')
        ->join('payment_types', 'payment_types.id', 'payments.payment_type_id')
        ->join('payment_modes', 'payment_modes.id', 'payments.payment_mode_id')
        ->whereBetween('payment_date', [$request->startdate, $request->enddate]);

      if ($request->employee_id > 0) {
        $query = $query->where('payments.employee_user_id', $request->employee_id);
      }

      $employeePaymentData = $query->get();
      return datatables()->of($employeePaymentData)
        ->addColumn('action', function ($row) {
          if ($row->is_cancelled == 1) {
            $html = '<span class="text-white badge bg-danger">Cancelled</span>';
          } else {
            if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
              $html = '<i class="text-danger ti ti-x me-1" title="cancel expense" 
          id="confrim-color(' . $row->id . ')" onclick="showEmpCancel(' . $row->id . ');"></i>';
            }
          }

          return $html;
        })->toJson();
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function updateCancelStatus($id)
  {
    try {
      Payment::findorfail($id)->update([
        'is_cancelled' => 1,
        'updated_by' => Auth::user()->id,
        'updated_at' => Carbon::now()
      ]);

      $cancel = Payment::where('id', $id)->first();

      if ($cancel->is_cancelled == 1) {
        if ($cancel->payment_type_id == 1) {
          $vendor = Ledger::findOrfail($cancel->ledger_id)->where('ledger_type_id', 2)->first();
          Ledger::findOrfail($vendor->id)->update([
            'closing_balance' => $vendor->closing_balance + $cancel->amount_paid
          ]);
        }

        if ($cancel->payment_type_id == 2) {
          $employee = User::findOrfail($cancel->employee_user_id)->first();
          User::findOrfail($employee->id)->update([
            'closing_balance' => $employee->closing_balance + $cancel->amount_paid
          ]);
        }

        $companyLedger = Ledger::where('id', $cancel->company_ledger_id)->where('ledger_type_id', 1)->first();
        Ledger::findOrfail($companyLedger->id)->update([
          'closing_balance' => $companyLedger->closing_balance + $cancel->amount_paid
        ]);

        Payment::findorfail($id)->update([
          'amount_paid' => 0
        ]);

        $paymentDet = PaymentDet::where('payment_id', $id)->get();

        if ($paymentDet->isNotEmpty()) {
          foreach ($paymentDet as $value) {
            $expense = Expense::where('id', $value->expense_id)->first();

            if ($expense) {
              $expense->update([
                'amount_paid' => $expense->amount_paid - $value->amount
              ]);
            }
          }
        }
      }

      $notification = array(
        'message' => 'Expense Cancelled Successfully',
        'alert-type' => 'success'
      );

      return response()->json([
        'responseData' => $notification
      ]);
    } catch (\Exception $e) {
      $notification = array(
        'message' => 'Something Went Wrong!',
        'alert-type' => 'error'
      );

      return redirect()->route('paymentslist')->with($notification);
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }
}
