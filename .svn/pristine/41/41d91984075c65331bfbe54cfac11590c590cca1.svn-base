<?php

namespace App\Http\Controllers\Admin\Offer;

use App\Http\Controllers\Controller;
use App\Models\Hub;
use App\Models\HubManufactureConfig;
use App\Models\Offer;
use App\Models\OfferHubAllocation;
use App\Models\State;
use Illuminate\Http\Request;
use App\Traits\Common;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class OffersAllocateController extends Controller
{
    use common;
    public function offersAllocate()
    {
        try {
            $offernames = Offer::get();
            $states = $this->getStates();
            return view('admin.offer.offers_allocate',compact('offernames','states'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getHubs(Request $request)
   {
         $data = Hub::select('hubs.*')
            ->where('city_id',$request->city_id)
            ->orderBy('hub_name', 'asc')
            ->get(["hub_name", "id"]);
      return response()->json($data);
   }

   public function addOfferAllocation(Request $request)
   {
    try {
        $request->validate([
            'ddlOfferName' => 'required'
        ]);
       
        if ($request->hdOfferallocateId == null) {

            //hub id 
            $hubid = $request->hdSelHubIds;
            $array_hubid = json_decode($hubid, true);
           
            //points allocate
            $point_allocation = $request->hdSelHubPoints;
            $array_pointallocation = json_decode($point_allocation, true);
            
            foreach ($array_hubid as $key => $hubid_value) {
                $point_allocation_value = $array_pointallocation[$key];
                
                OfferHubAllocation::create([
                    'offer_id' => $request->ddlOfferName,
                    'hub_id' => $hubid_value,
                    'points_allocated' => $point_allocation_value,
                    'created_by' => Auth::user()->id
                ]);
            }
            $notification = array(
                'message' => 'Offer Allocation Created Successfully',
                'alert-type' => 'success'
            );
        } else {

             //hub id 
             $hubid = $request->hdSelHubIds;
             $array_hubid = json_decode($hubid, true);
 
             //points allocate
             $point_allocation = $request->hdSelHubPoints;
             $array_pointallocation = json_decode($point_allocation, true);
             
             foreach ($array_hubid as $key => $hubid_value) {
                $point_allocation_value = $array_pointallocation[$key];

                OfferHubAllocation::findorfail($request->hdOfferallocateId)->update([
                    'offer_id' => $request->ddlOfferName,
                    'hub_id' => $hubid_value,
                    'points_allocated' => $point_allocation_value,
                    'updated_by' => Auth::user()->id
                ]);
        }
            $notification = array(
                'message' => 'Offer Allocation Updated Successfully',
                'alert-type' => 'success'
            );
        }
        DB::commit();
        return redirect()->route('offers-allocate')->with($notification);
    } catch (\Exception $e) {dd($e);
        $notification = array(
            'message' => 'Offer Allocation Not Created!',
            'alert-type' => 'error'
        );
        $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
    }
    
   }

   public function getOfferAllocatedata()
    {
        try {
            $offerallocationData = OfferHubAllocation::select('offer_hub_allocations.*', 'offers.offer_name')
                ->join('offers', 'offers.id', 'offer_hub_allocations.offer_id')->groupBy('offer_hub_allocations.offer_id')
                ->get();

            return datatables()->of($offerallocationData)
                ->addColumn('action', function ($row) {
                    $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getOfferAllocationById($id)
    {
        try {
            $offerallocation = OfferHubAllocation::select('offer_hub_alloctions.*')->where('offer_hub_alloctions.id', $id)->first();dd($offerallocation);
            return response()->json([
                'offerallocation' => $offerallocation
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

}
