<?php

namespace App\Http\Controllers\Admin\DeliveryPersonManagement;

use App\Enums\DocumentModulesType;
use App\Http\Controllers\Controller;
use App\Models\Area;
use App\Models\BillNoSetting;
use App\Models\City;
use App\Models\DeliveryPeopleDocuments;
use App\Models\DeliveryPerson;
use App\Models\FuelType;
use App\Models\Hub;
use App\Models\State;
use App\Models\VehicleBrand;
use App\Models\VehicleType;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;

class DeliveryPersonController extends Controller
{
    use Common;
    public function deliveryPerson($id = NULL)
    {
        try {
            $states = State::orderBy('state_name', 'ASC')->get();
            $hubs = Hub::get();
            $documents = $this->getDocumentsByModule(DocumentModulesType::DeliveryPerson);
            $fueltypes = FuelType::all();
            $vehicletypes = VehicleType::all();
            $vehiclebrands = VehicleBrand::all();
            if ($id) {
                $deliveryPerson = DeliveryPerson::find($id);
                $cities = City::where('state_id', $deliveryPerson->state_id)->get();
                $areas = Area::where('city_id', $deliveryPerson->city_id)->first();
                $delExample = $deliveryPerson->delivery_person_code;
                $bindDocuments = $this->getDocumentConfigsByModule(DocumentModulesType::DeliveryPerson, $id);
                return view('admin.delivery_person_management.delivery_person', compact('bindDocuments', 'states', 'documents', 'deliveryPerson', 'hubs',   'delExample', 'cities', 'areas', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
            }
            $deliveryPerson = '';
            $bindDocuments = '';
            $delivery = DeliveryPerson::first();
            $data = BillNoSetting::first();
            $delPrefix = $data->deliveryperson_prefix ?? 0;
            $delLength = $data->deliveryperson_length ?? 0;
            $delLive = (int)($data->deliveryperson_live ?? 0) + 1;
            if ($delLive) {
                $delNumber = $delLive;
            }
            $del = sprintf("%0{$delLength}d", $delNumber);
            $delExample = $delPrefix . $del;
            return view('admin.delivery_person_management.delivery_person', compact('bindDocuments', 'delExample', 'documents', 'deliveryPerson', 'delivery', 'states', 'hubs', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deliveryPersonCreate(Request $request)
    {
        DB::beginTransaction();
        try {
            if ($request->hdDelPerId == null) {

                $request->validate([
                    'txtDeliveryPersonId' => 'required',
                    'txtDeliveryPersonName' => 'required',
                    'txtDeliveryPersonMobile' => 'required|numeric|digits:10|unique:delivery_people,mobile',
                    'deliveryPersonEmail' => 'required|email|unique:delivery_people,email',
                    'ddlState' => 'required',
                    'ddlCity' => 'required',
                    'ddlArea' => 'required',
                    'txtDoorNo' => 'required',
                    'txtPincode' => 'required',
                    'ddlHub' => 'required',
                    'fileDelPersonImage' => 'required',
                    'password' => 'required|min:6|confirmed'
                ]);

                //Validate the documents for hub
                $is_valid = $this->validateDocuments($request, DocumentModulesType::DeliveryPerson);

                if (isset($is_valid->documenttype_name)) {
                    $notification = array(
                        'message' => $is_valid->documenttype_name . ' Required',
                        'alert-type' => 'error'
                    );
                    return redirect()->route('deliveryperson')->with($notification);
                }

                // $image = $request->file('fileDelPersonImage');
                // $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
                // image::make($image)->save('upload/deliveryperson/' . $name_gen);
                // $save_url = 'upload/deliveryperson/' . $name_gen;

                $last_inserted_delivery_person_id = DeliveryPerson::insertGetId([
                    'delivery_person_code' => $request->txtDeliveryPersonId,
                    'delivery_person_name' => $request->txtDeliveryPersonName,
                    'mobile' => $request->txtDeliveryPersonMobile,
                    'email' => $request->deliveryPersonEmail,
                    'state_id' => $request->ddlState,
                    'city_id' => $request->ddlCity,
                    'area_id' => $request->ddlArea,
                    'address' => $request->txtDoorNo,
                    'pincode' => $request->txtPincode,
                    'hub_id' => $request->ddlHub,
                    'password' => Hash::make($request->password),
                    'is_active' => 1,
                    'created_by' => Auth::user()->id,
                ]);

                if ($request->hasFile('fileDelPersonImage')) {
                    $path = $request->file('fileDelPersonImage')->store('temp');
                    $file = $request->file('fileDelPersonImage');
                    $extension = $file->getClientOriginalExtension();
                    $fileName = $this->generateRandom(16) . '.' . $extension;

                    DeliveryPerson::findorfail($last_inserted_delivery_person_id)->update([
                        'delivery_person_image' => $this->fileUpload($file, 'upload/deliverypersons/' . $request->txtDeliveryPersonId, $fileName),
                    ]);
                }

                $documents = $this->getDocumentsByModule(DocumentModulesType::DeliveryPerson);

                //Create hub documents in create mode
                $this->createDeliveryPersonDocuments($request, $documents, $last_inserted_delivery_person_id);

                //Increase hublive count in settings table
                $this->updateLiveCount(DocumentModulesType::DeliveryPerson, 1);

                //Create hub user account for login
                $this->createUser(
                    $request->txtDeliveryPersonMobile,
                    $request->deliveryPersonEmail,
                    $request->password,
                    $last_inserted_delivery_person_id,
                    $request->txtDeliveryPersonName,
                    $request->txtDeliveryPersonMobile,
                    6,
                    1,
                    Auth::user()->id
                );
                $notification = array(
                    'message' => 'Delivery Person Created Successfully',
                    'alert-type' => 'success'
                );
            } else {

                $request->validate([
                    'txtDeliveryPersonId' => 'required',
                    'txtDeliveryPersonName' => 'required',
                    'txtDeliveryPersonMobile' => 'required|numeric|digits:10|unique:delivery_people,mobile,' . $request->hdDelPerId,
                    'deliveryPersonEmail' => 'required|email|unique:delivery_people,email,' . $request->hdDelPerId,
                    'ddlState' => 'required',
                    'ddlCity' => 'required',
                    'ddlArea' => 'required',
                    'txtDoorNo' => 'required',
                    'txtPincode' => 'required',
                    'ddlHub' => 'required',
                    'password' => 'required|min:6|confirmed'
                ]);

                //Validate the documents for hub
                $is_valid = $this->validateUpdateDocuments($request, DocumentModulesType::DeliveryPerson, $request->hdDelPerId);

                if (isset($is_valid->document_number) || isset($is_valid->document_path)) {
                    $notification = array(
                        'message' => $is_valid->documenttype_name . ' Required',
                        'alert-type' => 'error'
                    );
                    return redirect()->route('deliveryperson', $request->hdDelPerId)->with($notification);
                }

                $oldImage = $request->hdDeliveryPerImg;
                if ($request->hasFile('fileDelPersonImage')) {
                    @unlink($oldImage);
                    $path = $request->file('fileDelPersonImage')->store('temp');
                    $files = $request->file('fileDelPersonImage');
                    $extensions = $files->getClientOriginalExtension();
                    $fileNames = $this->generateRandom(16) . '.' . $extensions;
                }

                DeliveryPerson::findorfail($request->hdDelPerId)->update([
                    'delivery_person_code' => $request->txtDeliveryPersonId,
                    'delivery_person_name' => $request->txtDeliveryPersonName,
                    'mobile' => $request->txtDeliveryPersonMobile,
                    'email' => $request->deliveryPersonEmail,
                    'state_id' => $request->ddlState,
                    'city_id' => $request->ddlCity,
                    'area_id' => $request->ddlArea,
                    'address' => $request->txtDoorNo,
                    'pincode' => $request->txtPincode,
                    'hub_id' => $request->ddlHub,
                    'password' => Hash::make($request->password),
                    'delivery_person_image' => ($request->hasFile('fileDelPersonImage')) ? $this->fileUpload($request->file('fileDelPersonImage'), 'upload/deliverypersons/' . $request->txtDeliveryPersonId, $fileNames) : $oldImage,
                    'is_active' => 1,
                    'created_by' => Auth::user()->id,
                ]);

                $documents = $this->getDocumentConfigsByModule(DocumentModulesType::DeliveryPerson, $request->hdDelPerId);

                $nullDocuments = $this->getDocumentsByModule(DocumentModulesType::DeliveryPerson);

                foreach ($documents as $doc) {
                    if ($request->hasFile('file_' . $doc->id)) {
                        @unlink($doc->document_path);
                    }
                }

                DeliveryPeopleDocuments::where('delivery_people_id', $request->hdDelPerId)->delete();

                //Create hub documents in edit mode
                $this->createDeliveryPersonDocuments($request, $documents == null ? $documents : $nullDocuments, $request->hdDelPerId);

                $notification = array(
                    'message' => 'Delivery Person Updated Successfully',
                    'alert-type' => 'success'
                );
            }
            DB::commit();
            return redirect()->route('deliverypersonlist')->with($notification);
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Delivery Person Not Created!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }

    private function createDeliveryPersonDocuments(Request $request, $documents, $hub_id)
    {
        try {
            foreach ($documents as $doc) {
                if ($request->hasFile('file_' . $doc->id)) {
                    $path = $request->file('file_' . $doc->id)->store('temp');
                    $file = $request->file('file_' . $doc->id);
                    $extension = $file->getClientOriginalExtension();
                    $fileName = $this->generateRandom(16) . '.' . $extension;
                }
                $doc_no = 'doc_' . $doc->id;
                $existingfile_path = 'hdDocumentImg_' . $doc->id;
                DeliveryPeopleDocuments::create([
                    'delivery_people_id' => $hub_id,
                    'documentconfig_id' => $doc->id,
                    'document_path' => ($request->hasFile('file_' . $doc->id)) ? $this->fileUpload($file, 'upload/deliverypersons/' . $request->txtDeliveryPersonId, $fileName) : ($request->$existingfile_path == null ? '' : $request->$existingfile_path),
                    'document_number' => $request->$doc_no
                ]);
            }
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }

    public function getdeliveryPersonData(Request $request)
    {
        try {
            $deliverypersonData = "";
            $query = DB::table('delivery_people')
                ->join('hubs', 'hubs.id', '=', 'delivery_people.hub_id')
                ->select('delivery_people.*', 'hubs.hub_name')
                ->where('delivery_people.is_active', 1);

            if ($request->state_id > 0) {
                $query = $query->where('delivery_people.state_id', $request->state_id);
            }
            if ($request->city_id > 0) {
                $query = $query->where('delivery_people.city_id', $request->city_id);
            }
            if ($request->area_id > 0) {
                $query = $query->where('delivery_people.area_id', $request->area_id);
            }
            if ($request->hub_id > 0) {
                $query = $query->where('delivery_people.hub_id', $request->hub_id);
            }
            $deliverypersonData = $query->get();

            return datatables()->of($deliverypersonData)
                ->addColumn('action', function ($row) {
                    $html = '<a href="deliveryperson/' . $row->id . '"><i class="text-primary ti ti-pencil me-1"></i></a> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function activeStatus($id, $status)
    {
        DB::beginTransaction();
        try {
            DeliveryPerson::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getDeliveryPersonById($id)
    {
        try {
            $deliveryperson = DeliveryPerson::select('delivery_people.*')->where('delivery_people.id', $id)->first();
            return response()->json([
                'deliveryperson' => $deliveryperson
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function Deletedeliverypersonlist($id)
    {

        $deliveryPerson = DeliveryPerson::findorfail($id);
        $deliveryPerson->delete();

        $deliveryPerson->Update([
            'deleted_by' => Auth::user()->id
        ]);

        $notification = array(
            'message' => 'Delivery Person Deleted Successfully',
            'alert' => 'success'
        );
        return response()->json([
            'responseData' => $notification
        ]);
    }

    public function deliveryPersonList()
    {
        try {
            $states = State::orderBy('state_name', 'ASC')->get();
            $hubs = Hub::get();
            return view('admin.delivery_person_management.delivery_person_list', compact('states', 'hubs'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function DeliveryListFilter(Request $request)
    {
        try {
            $state_id = $request->state_id;
            $deliveryPerson = DeliveryPerson::where('state_id', $state_id)->get();
            return response()->json(array(
                'data' => $deliveryPerson
            ));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
