<?php

namespace App\Http\Controllers\API\Hub;

use App\Enums\StatusTypes;
use App\Http\Controllers\Controller;
use App\Http\Resources\HubOrderResource;
use App\Models\Order;
use App\Models\OrderDelivery;
use App\Models\UserOrderHistory;
use App\Traits\Common;
use App\Traits\ResponseAPI;
use Carbon\Carbon;
use DateTime;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class HubOrdersController extends Controller
{
    //
    use ResponseAPI;
    use Common;

    public function getHubOrders(Request $request)
    {
        try {

            $orders = $this->getOrders($request->status_id);
            // dd($orders->get());

            $delivered_count = 0;
            $cancelled_count = 0;
            if (!is_null($request->from_date) && !is_null($request->to_date)) {
                // dd($request->from_date);
                $fromDate = Carbon::createFromFormat('d-m-Y', $request->from_date)->startOfDay();
                $toDate = Carbon::createFromFormat('d-m-Y', $request->to_date)->endOfDay();
                if (!is_null($request->status_id)) {
                    $status_ids = explode(',', $request->status_id);
                    foreach ($status_ids as $key => $status) {
                        if ($status == StatusTypes::Cancelled) {
                            $cancelled_count = $this->getOrders(StatusTypes::Cancelled)
                                ->whereBetween('created_at', [$fromDate, $toDate])->count();
                        } else if ($status == StatusTypes::OrderDelivered) {
                            $delivered_count = $this->getOrders(StatusTypes::OrderDelivered)
                                ->whereBetween('created_at', [$fromDate, $toDate])->count();
                        }
                    }
                }
                $orders = $orders->whereBetween('created_at', [$fromDate, $toDate]);
            }



            $userOrders = $orders->paginate($this->recordsperpage);

            $response = array(
                'message' => "Success",
                'data' => HubOrderResource::collection($userOrders),
                'delivered_count' => $delivered_count,
                'cancelled_count' => $cancelled_count,
                'pagination' => [
                    'total' => $userOrders->total(),
                    'per_page' => $userOrders->perPage(),
                    'current_page' => $userOrders->currentPage(),
                    'last_page' => $userOrders->lastPage(),
                    'next_page_url' => $userOrders->nextPageUrl(),
                    'prev_page_url' => $userOrders->previousPageUrl(),
                ],
                'status' => true,
            );

            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function searchHubOrders($order_no)
    {
        try {

            $orders = $this->getOrders(
                implode(
                    ',',
                    [
                        StatusTypes::OrderPlaced,
                        StatusTypes::OrderShipped,
                        StatusTypes::AssignedToDelivery,
                        StatusTypes::OrderDelivered
                    ]
                )
            );

            $orders = $orders->where('order_no', 'LIKE', '%' . $order_no . '%');

            $userOrders = $orders->paginate($this->recordsperpage);

            $response = array(
                'message' => "Success",
                'data' => HubOrderResource::collection($userOrders),
                'pagination' => [
                    'total' => $userOrders->total(),
                    'per_page' => $userOrders->perPage(),
                    'current_page' => $userOrders->currentPage(),
                    'last_page' => $userOrders->lastPage(),
                    'next_page_url' => $userOrders->nextPageUrl(),
                    'prev_page_url' => $userOrders->previousPageUrl(),
                ],
                'status' => true,
            );

            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function assignOrder(Request $request)
    {

        $validator = $request->validate([
            'order_id' => 'required',
            'delivery_user_id' => 'required',

        ]);
        DB::beginTransaction();
        try {

            //TODO::Stock updation
            $cancel_order_count = Order::where('id', $request->order_id)
                ->where('status_id', StatusTypes::Cancelled)
                ->where('is_cancel', 1)
                ->count();
            if ($cancel_order_count == 0) {
                $order_delivery = OrderDelivery::where('order_id', $request->order_id)
                    ->where('is_notdelivered', 0)
                    ->whereNull('delivered_on')
                    ->first();
                if ($order_delivery) {
                    $order_delivery->delivery_user_id = $request->delivery_user_id;
                    $order_delivery->save();
                } else {
                    OrderDelivery::create([
                        'order_id' => $request->order_id,
                        'delivery_user_id' => $request->delivery_user_id,
                    ]);
                }

                //Update order status
                $this->saveOrderStatus($request->order_id, StatusTypes::AssignedToDelivery);

                //Add order status history to assigned to delivery
                $this->addOrderStatusHistory($request->order_id, StatusTypes::AssignedToDelivery);
            }
            $response = array(
                'message' => ($cancel_order_count == 0 ? "Success" : "This order is cancelled by customer"),
                'data' => [],
                'status' => ($cancel_order_count == 0 ? true : false),
            );
            DB::commit(); // Commit the transaction
            return response($response, 200);
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function unassignOrder(Request $request)
    {
        DB::beginTransaction();
        try {
            //TODO::Stock updation
            $unassignOrder = $unassignOrder = OrderDelivery::where('order_id', $request->order_id)
                ->where('delivery_user_id', $request->delivery_user_id)
                ->where('is_notdelivered', 0)
                ->whereNull('delivered_on')
                ->first();
            if ($unassignOrder) {
                $this->unassignOrderDelivery($unassignOrder->id);
            }

            $response = array(
                'message' => "Success",
                'data' => [],
                'status' => true,
            );
            DB::commit(); // Commit the transaction
            return response($response, 200);
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function unassignAllOrders($delivery_user_id)
    {

        DB::beginTransaction();
        try {
            $unassignOrder = OrderDelivery::where('delivery_user_id', $delivery_user_id)
                ->where('is_notdelivered', 0)
                ->whereNull('delivered_on')
                ->get();
            foreach ($unassignOrder as $key => $value) {
                $this->unassignOrderDelivery($value->id);
            }
            $response = array(
                'message' => "Success",
                'data' => [],
                'status' => true,
            );
            DB::commit(); // Commit the transaction
            return response($response, 200);
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }

    public function unassignOrderDelivery($order_delivered_id)
    {
        $unassignOrder = OrderDelivery::where('id', $order_delivered_id)->first();
        if ($unassignOrder) {
            $this->addOrderStatusHistory($unassignOrder->order_id, StatusTypes::OrderPlaced);
            $unassignOrder->delete();
        }
        //Update order status
        $this->saveOrderStatus($unassignOrder->order_id, StatusTypes::OrderPlaced);
    }
    public function getHubOrderDetails($order_id)
    {
        try {
            $orderdetails = $this->getOrderDetail($order_id);

            $response = array(
                'message' => "Success",
                'data' => $orderdetails,
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }

    public function getOrderStatusHistory($order_id)
    {
        try {
            $status_history = UserOrderHistory::where('order_id', $order_id)->get();
            $order_history = [];
            foreach ($status_history as $key => $status) {
                $order_history[] = [
                    'status_id' => $status->status_id,
                    'status_name' => $status->status->status,
                    'status_msg' => $status->status->status_msg,
                    'date' => DateTime::createFromFormat('Y-m-d H:i:s', $status->updated_at)->format('d M,y, h:i A'),
                ];
            }
            $response = array(
                'message' => "Success",
                'data' => $order_history,
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
}
