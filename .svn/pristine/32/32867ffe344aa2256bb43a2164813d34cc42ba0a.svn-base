<?php

namespace App\Http\Controllers\Admin\ManufacturerManagement;

use App\Http\Controllers\Controller;
use App\Models\Area;
use App\Models\BillNoSetting;
use App\Models\City;
use App\Models\Country;
use App\Models\Department;
use App\Models\Designation;
use App\Models\Manufacturer;
use App\Models\State;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ManufacturerController extends Controller
{
    public function manufacturer($id = NULL)
    {
        if ($id) {
            $man = Manufacturer::find($id);
            // dd($man);
            $states = State::all();
            $citys = City::where('state_id', $man->state_id)->get();
            $areas = Area::where('city_id', $man->city_id)->get();
            $manExample = $man->manufacturer_id;
            return view('admin.manufacturer_management.manufacturer', compact('states', 'man', 'manExample', 'citys', 'areas'));
        }
        $data = BillNoSetting::first();
        $manPrefix = $data->manufacture_prefix ?? 0;
        $ManLength = $data->manufacture_length ?? 0;
        $manLive = (int)($data->manufacture_live ?? 0) + 1;
        if ($manLive) {
            $manNumber = $manLive;
        }
        $man = sprintf("%0{$ManLength}d", $manNumber);
        $manExample = $manPrefix . $man;
        $states = State::all();
        return view('admin.manufacturer_management.manufacturer', compact('states', 'manExample'));
    }
    public function manufactureCreate(Request $request)
    {

        // dd($request->all(),$request->is_thirdparty_tieup);
        $request->validate([
            "manufacturer_id" => 'required',
            "manufacturer_name" => "required",
            "mobile" => "required",
            "official_email" => "required",
            "latitude" => "required",
            "longtitude" => "required",
            "geo_location" => "required",
            "credit_period" => "required",
            "settlement_period" => "required",
            "no_of_brands" => "required",
            "annual_turn_over" => "required",
            "security_deposit" => "required",
            // "is_thirdparty_tieup" => "required",
            // "no_of_thirdparty_brands" => "required",
            // "thirdparty_brand_name" => "required",
            // "thirdparty_turnover" => "required",
            // "total_turnover" => "required",
            "state_id" => "required",
            "city_id" => "required",
            "area_id" => "required",
            "address" => "required",
            "pincode" => "required",
            "proprietor_name" => "required",
            "proprietor_mobile" => "required",
            "proprietor_email" => "required",
            "contact_person_name" => "required",
            "contact_person_mobile" => "required",
            "contact_person_email" => "required",
        ]);

        $fillable = $request->all();

        unset($fillable['_token']);
        $fillable['created_by'] = Auth::user()->id;
        $manufacture = Manufacturer::create($fillable);
        $data = BillNoSetting::first();
        $data->manufacture_live = $data->manufacture_live + 1;
        $data->save();
        return redirect()->route('manufacturer-list')->with('success', 'Manufacture Created successfully!');
    }
    public function manufactureUpdate(Request $request)
    {
        # code...
        $request->validate([
            "manufacturer_id" => 'required',
            "manufacturer_name" => "required",
            "mobile" => "required",
            "official_email" => "required",
            "latitude" => "required",
            "longtitude" => "required",
            "geo_location" => "required",
            "credit_period" => "required",
            "settlement_period" => "required",
            "no_of_brands" => "required",
            "annual_turn_over" => "required",
            "security_deposit" => "required",
            // "is_thirdparty_tieup" => "required",
            // "no_of_thirdparty_brands" => "required",
            // "thirdparty_brand_name" => "required",
            // "thirdparty_turnover" => "required",
            // "total_turnover" => "required",
            "state_id" => "required",
            "city_id" => "required",
            "area_id" => "required",
            "address" => "required",
            "pincode" => "required",
            "proprietor_name" => "required",
            "proprietor_mobile" => "required",
            "proprietor_email" => "required",
            "contact_person_name" => "required",
            "contact_person_mobile" => "required",
            "contact_person_email" => "required",
        ]);
        $fillable = $request->all();
        $fillable['updated_by'] = Auth::user()->id;

        unset($fillable['_token']);

        $affectedRows = Manufacturer::where("id", $request->id)->update($fillable);
        return redirect()->route('manufacturer-list')->with('success', 'Manufacture Updated successfully!');
    }
    public function manufacturerList()
    {
        $states = State::all();
        $manufacture = Manufacturer::all();
        return view('admin.manufacturer_management.manufacturerlist', compact('states', 'manufacture'));
    }
    public function manufacturerData()
    {
        $manufacturerData = Manufacturer::get();

        return datatables()->of($manufacturerData)
            ->addColumn('action', function ($row) {
                $html = '<a href="manufacturer/' . $row->id . '"><i class="text-primary ti ti-pencil me-1"></i></a> ';
                $html .= '<i class="text-danger ti ti-trash me-1" id="confirm-color' . $row->id . '" onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    public function activeStatus($id, $status)
    {
        Manufacturer::findorfail($id)->update([
            'is_active' => $status,
            'updated_by' => Auth::user()->id
        ]);
    }

    public function deleteManufacturer($id)
    {
        $manufacturer = Manufacturer::findorfail($id);
        $manufacturer->delete();

        $manufacturer->Update([
            'deleted_by' => Auth::user()->id
        ]);

        return response()->json([
            'success' => 'Manufacturer Deleted Successfully'
        ]);
    }

    public function manufacturerDocumentView()
    {
        return view('admin.manufacturer_management.manufacture_document');
    }

    public function view()
    {
        return view('admin.manufacturer_management.manufacture_view');
    }
    public function get_manufacturerlist(Request $request)
    {
        dd($request->all());
        # code...
    }
}
