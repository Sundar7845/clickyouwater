<?php

namespace App\Http\Controllers\Admin\DeliveryPersonManagement;

use App\Enums\DocumentModulesType;
use App\Enums\MenuPermissionType;
use App\Enums\RoleTypes;
use App\Http\Controllers\Controller;
use App\Models\DeliveryPeopleDocuments;
use App\Models\DeliveryPerson;
use App\Models\DeliveryVehicleInfo;
use App\Models\FuelType;
use App\Models\Hub;
use App\Models\HubVehicleInfo;
use App\Models\User;
use App\Models\VehicleBrand;
use App\Models\VehicleType;
use Illuminate\Validation\Rule;
use App\Traits\Common;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;

class DeliveryPersonController extends Controller
{
    use Common;
    public function deliveryPerson($id = NULL)
    {
        try {
            //Get states
            $states = $this->getStates();
            $hubs = Hub::get();
            $bindDocuments = $this->getDocumentConfigsByModule(DocumentModulesType::DeliveryPerson, $id);
            if ($bindDocuments->isEmpty()) {
                $bindDocuments = $this->getDocumentsByModule(DocumentModulesType::DeliveryPerson);
            }
            $fueltypes = FuelType::all();
            $vehicletypes = VehicleType::all();
            $vehiclebrands = VehicleBrand::all();
            if ($id) {
                $deliveryPerson = DeliveryPerson::find($id);
                //Get Cities against state
                $cities = $this->getCities($deliveryPerson->state_id);
                //Get Areas against city
                $areas = $this->getAreas($deliveryPerson->city_id);
                $delExample = $deliveryPerson->delivery_person_code;
                $deliveryVehicleInfo = DeliveryVehicleInfo::select('delivery_vehicle_infos.*', 'hub_vehicle_infos.reg_no')
                    ->join('hub_vehicle_infos', 'hub_vehicle_infos.id', 'delivery_vehicle_infos.hub_vehicle_info_id')
                    ->get();
                $deliveryVehicleConfiq = DeliveryVehicleInfo::where('delivery_people_id', $id)->pluck('hub_vehicle_info_id')
                    ->toArray();
                return view('admin.delivery_person_management.edit_delivery_person', compact('deliveryVehicleConfiq', 'deliveryVehicleInfo', 'bindDocuments', 'states', 'deliveryPerson', 'hubs', 'delExample', 'cities', 'areas', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
            }
            $deliveryPerson = null;
            $delivery = DeliveryPerson::first();
            $delExample = $this->getAutoGeneratedCode(DocumentModulesType::DeliveryPerson);
            return view('admin.delivery_person_management.delivery_person', compact('bindDocuments', 'delExample', 'deliveryPerson', 'delivery', 'states', 'hubs', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deliveryPersonCreate(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'txtDeliveryPersonId' => 'required',
            'txtDeliveryPersonName' => 'required',
            'txtDeliveryPersonMobile' => [
                'required', 'numeric', 'digits:10',
                Rule::unique('delivery_people', 'mobile')->ignore($request->hdDelPerId),
            ],
            'deliveryPersonEmail' => [
                'required', 'email',
                Rule::unique('delivery_people', 'email')->ignore($request->hdDelPerId),
            ],
            'ddlVehicle' => [
                'required',
                Rule::unique('delivery_vehicle_infos', 'hub_vehicle_info_id')->ignore($request->hdDelPerId),
            ],
            'ddlState' => 'required',
            'ddlCity' => 'required',
            'ddlArea' => 'required',
            'txtDoorNo' => 'required',
            'txtPincode' => 'required',
            'ddlHub' => 'required',
            // 'fileDelPersonImage' => 'required',
            // 'password' => 'min:6|confirmed',
        ], [
            'txtDeliveryPersonMobile.unique' => 'Mobile number already exists.',
        ], [
            'deliveryPersonEmail.unique' => 'Email Id already exists.',
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withInput()->withErrors($validator);
        }

        DB::beginTransaction();
        try {
            $data = $request->all();
            if ($request->hdDelPerId == null) {

                //Create New Area Or Get Area ID
                $area_id = $this->getOrCreateAreaId($request->ddlArea, $request->ddlState, $request->ddlCity);

                //Validate the documents for hub
                $is_valid = $this->validateDocuments($request, DocumentModulesType::DeliveryPerson);

                if (isset($is_valid->documentType->documenttype_name)) {
                    $notification = array(
                        'message' => $is_valid->documentType->documenttype_name . ' Required',
                        'alert-type' => 'error'
                    );
                    return redirect()->route('deliveryperson')->with($notification)->withInput();
                }

                $last_inserted_delivery_person_id = DeliveryPerson::insertGetId([
                    'delivery_person_code' => $request->txtDeliveryPersonId,
                    'delivery_person_name' => $request->txtDeliveryPersonName,
                    'mobile' => $request->txtDeliveryPersonMobile,
                    'email' => $request->deliveryPersonEmail,
                    'state_id' => $request->ddlState,
                    'city_id' => $request->ddlCity,
                    'area_id' => $area_id,
                    'address' => $request->txtDoorNo,
                    'pincode' => $request->txtPincode,
                    'hub_id' => $request->ddlHub,
                    // 'password' => Hash::make($request->password),
                    'is_active' => 1,
                    'created_by' => Auth::user()->id,
                    'created_at' => Carbon::now()
                ]);

                // if ($request->filled('password')) {
                //     $password = Hash::make($request->password);
                //     DeliveryPerson::findorFail($last_inserted_delivery_person_id)->update([
                //         'password' => $password
                //     ]);
                // }

                if ($request->hasFile('fileDelPersonImage')) {
                    $path = $request->file('fileDelPersonImage')->store('temp');
                    $file = $request->file('fileDelPersonImage');
                    $extension = $file->getClientOriginalExtension();
                    $fileName = $this->generateRandom(16) . '.' . $extension;

                    DeliveryPerson::findorfail($last_inserted_delivery_person_id)->update([
                        'delivery_person_image' => $this->fileUpload($file, 'upload/deliverypersons/' . $request->txtDeliveryPersonId, $fileName),
                    ]);
                }

                DB::statement('SET FOREIGN_KEY_CHECKS=0;');
                foreach ($data['ddlVehicle'] as $value) {
                    DeliveryVehicleInfo::create([
                        'hub_id' => $request->ddlHub,
                        'delivery_people_id' => $last_inserted_delivery_person_id,
                        'hub_vehicle_info_id' => $value
                    ]);
                }
                DB::statement('SET FOREIGN_KEY_CHECKS=1;');

                $documents = $this->getDocumentsByModule(DocumentModulesType::DeliveryPerson);

                //Create hub documents in create mode
                $this->createDeliveryPersonDocuments($request, $documents, $last_inserted_delivery_person_id);

                //Increase hublive count in settings table
                $this->updateLiveCount(DocumentModulesType::DeliveryPerson, 1);

                //Create hub user account for login
                $this->createUser(
                    $request->txtDeliveryPersonMobile,
                    $request->deliveryPersonEmail,
                    $request->txtDeliveryPersonMobile,
                    $last_inserted_delivery_person_id,
                    $request->txtDeliveryPersonName,
                    $request->txtDeliveryPersonMobile,
                    RoleTypes::DeliveryPerson,
                    1,
                    Auth::user()->id
                );

                //Hub Activation
                $hub_id = DeliveryPerson::where('id', $last_inserted_delivery_person_id)->value('hub_id');
                $this->hubActivation($hub_id);

                $notification = array(
                    'message' => 'Delivery Person Created Successfully',
                    'alert-type' => 'success'
                );
                DB::commit();
                return redirect()->route('deliverypersonlist')->with($notification);
            } else {
                //Create New Area Or Get Area ID
                $area_id = $this->getOrCreateAreaId($request->ddlArea, $request->ddlState, $request->ddlCity);

                //Validate the documents for hub
                $is_valid = $this->validateUpdateDocuments($request, DocumentModulesType::DeliveryPerson, $request->hdDelPerId);

                if ($is_valid !== true) {
                    if ($is_valid->document_number == null || $is_valid->document_path == null) {
                        $notification = array(
                            'message' => $is_valid->documentType->documenttype_name . ' Required',
                            'alert-type' => 'error'
                        );
                        return redirect()->route('deliveryperson', $request->hdDelPerId)->with($notification);
                    }
                }

                //Hub Activation
                $old_hub_id = DeliveryPerson::where('id', $request->hdDelPerId)->value('hub_id');
                // $this->hubActivation($hub_id);

                $oldImage = $request->hdDeliveryPerImg;
                if ($request->hasFile('fileDelPersonImage')) {
                    @unlink($oldImage);
                    $path = $request->file('fileDelPersonImage')->store('temp');
                    $files = $request->file('fileDelPersonImage');
                    $extensions = $files->getClientOriginalExtension();
                    $fileNames = $this->generateRandom(16) . '.' . $extensions;
                }

                DeliveryPerson::findorfail($request->hdDelPerId)->update([
                    'delivery_person_code' => $request->txtDeliveryPersonId,
                    'delivery_person_name' => $request->txtDeliveryPersonName,
                    'mobile' => $request->txtDeliveryPersonMobile,
                    'email' => $request->deliveryPersonEmail,
                    'state_id' => $request->ddlState,
                    'city_id' => $request->ddlCity,
                    'area_id' => $area_id,
                    'address' => $request->txtDoorNo,
                    'pincode' => $request->txtPincode,
                    'hub_id' => $request->ddlHub,
                    // 'password' => Hash::make($request->password),
                    'delivery_person_image' => ($request->hasFile('fileDelPersonImage')) ? $this->fileUpload($request->file('fileDelPersonImage'), 'upload/deliverypersons/' . $request->txtDeliveryPersonId, $fileNames) : $oldImage,
                    'is_active' => 1,
                    'created_by' => Auth::user()->id,
                    'created_at' => Carbon::now()
                ]);

                // if ($request->filled('password')) {
                //     $password = Hash::make($request->password);
                //     DeliveryPerson::findorFail($request->hdDelPerId)->update([
                //         'password' => $password
                //     ]);
                // }

                DB::statement('SET FOREIGN_KEY_CHECKS=0;');
                // run your delete query here
                DeliveryVehicleInfo::where('delivery_people_id', $request->hdDelPerId)->delete();
                foreach ($data['ddlVehicle'] as $value) {
                    DeliveryVehicleInfo::create([
                        'hub_id' => $request->ddlHub,
                        'delivery_people_id' => $request->hdDelPerId,
                        'hub_vehicle_info_id' => $value
                    ]);
                }
                DB::statement('SET FOREIGN_KEY_CHECKS=1;');

                $documents = $this->getDocumentConfigsByModule(DocumentModulesType::DeliveryPerson, $request->hdDelPerId);

                $nullDocuments = $this->getDocumentsByModule(DocumentModulesType::DeliveryPerson);

                foreach ($documents as $doc) {
                    if ($request->hasFile('file_' . $doc->id)) {
                        @unlink($doc->document_path);
                    }
                }

                DeliveryPeopleDocuments::where('delivery_people_id', $request->hdDelPerId)->delete();

                //Create hub documents in edit mode
                $this->createDeliveryPersonDocuments($request, $documents == null ? $documents : $nullDocuments, $request->hdDelPerId);

                //Hub Activation
                $hub_id = DeliveryPerson::where('id',  $request->hdDelPerId)->value('hub_id');
                //Check current hub_id
                $this->hubActivation($hub_id);
                //Check previous hub_id
                $this->hubActivation($old_hub_id);

                //Update DeliveryPerson user account for login
                $this->updateUser(
                    $request->txtDeliveryPersonMobile,
                    $request->deliveryPersonEmail,
                    $request->txtDeliveryPersonMobile,
                    $request->hdDelPerId,
                    $request->txtDeliveryPersonName,
                    $request->txtDeliveryPersonMobile,
                    RoleTypes::DeliveryPerson,
                    1,
                    Auth::user()->id
                );

                $notification = array(
                    'message' => 'Delivery Person Updated Successfully',
                    'alert-type' => 'success'
                );
                DB::commit();
                return redirect()->route('deliverypersonlist')->with($notification);
            }
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Delivery Person Not Created!',
                'alert-type' => 'error'
            );
            $redirectUrl = $request->hdDelPerId ? 'deliveryperson/' . $request->hdDelPerId : 'deliveryperson';
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
            return redirect($redirectUrl)->with($notification);
        }
    }

    private function createDeliveryPersonDocuments(Request $request, $documents, $hub_id)
    {
        try {
            foreach ($documents as $doc) {
                if ($request->hasFile('file_' . $doc->id)) {
                    $path = $request->file('file_' . $doc->id)->store('temp');
                    $file = $request->file('file_' . $doc->id);
                    $extension = $file->getClientOriginalExtension();
                    $fileName = $this->generateRandom(16) . '.' . $extension;
                }
                $doc_no = 'doc_' . $doc->id;
                $existingfile_path = 'hdDocumentImg_' . $doc->id;

                $documentPath = null;
                if ($request->hasFile('file_' . $doc->id)) {
                    $documentPath = $this->fileUpload($file, 'upload/deliverypersons/' . $request->txtDeliveryPersonId, $fileName);
                } elseif ($request->$existingfile_path != null) {
                    $documentPath = $request->$existingfile_path;
                }

                if ($documentPath !== null) {
                    DeliveryPeopleDocuments::create([
                        'delivery_people_id' => $hub_id,
                        'documenttype_id' => $doc->documenttype_id,
                        'documentmodule_id' => $doc->documentmodule_id,
                        'document_path' => $documentPath,
                        'document_number' => $request->$doc_no
                    ]);
                }
            }
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }

    public function getdeliveryPersonData(Request $request)
    {
        try {
            $deliverypersonData = "";
            if (Auth::user()->role_id == RoleTypes::Hub) {
                $hub_id = $this->getRefId(Auth::user()->id, RoleTypes::Hub);
                $query = DeliveryPerson::select('delivery_people.*', 'hubs.hub_name', 'delivery_people_documents.document_path')
                    ->join('hubs', 'hubs.id', '=', 'delivery_people.hub_id')
                    ->leftJoin('delivery_people_documents', 'delivery_people_documents.delivery_people_id', '=', 'delivery_people.id')
                    ->where('delivery_people.hub_id', $hub_id);
            } else {
                $query = DeliveryPerson::select('delivery_people.*', 'hubs.hub_name', 'delivery_people_documents.document_path')
                    ->join('hubs', 'hubs.id', '=', 'delivery_people.hub_id')
                    ->leftJoin('delivery_people_documents', 'delivery_people_documents.delivery_people_id', '=', 'delivery_people.id');
            }

            if ($request->state_id > 0) {
                $query->where('delivery_people.state_id', $request->state_id);
            }
            if ($request->city_id > 0) {
                $query->where('delivery_people.city_id', $request->city_id);
            }
            if ($request->area_id > 0) {
                $query->where('delivery_people.area_id', $request->area_id);
            }
            if ($request->hub_id > 0) {
                $query->where('delivery_people.hub_id', $request->hub_id);
            }

            // Apply type filters based on the 'type' parameter
            if ($request->type === 'today') {
                $query = $query->whereDate('delivery_people.created_at', today());
            } elseif ($request->type === 'thismonth') {
                $query = $query->whereMonth('delivery_people.created_at', now()->month);
            }

            $deliverypersonData = $query->get();

            return datatables()->of($deliverypersonData)
                ->addColumn('action', function ($row) {
                    $html = "";
                    if ($this->isUserHavePermission(MenuPermissionType::Edit)) {
                        $html = '<a href="deliveryperson/' . $row->id . '"><i class="text-primary ti ti-pencil me-1"></i></a> ';
                    }
                    if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
                        $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    }
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
            // Add a return statement here to handle the exception
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }


    public function activeStatus($id, $status)
    {
        try {
            DeliveryPerson::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);

            //Hub Activation
            $hub_id = DeliveryPerson::where('id',  $id)->value('hub_id');
            //Check current hub_id
            $this->hubActivation($hub_id);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getDeliveryPersonById($id)
    {
        try {
            $deliveryperson = DeliveryPerson::select('delivery_people.*')->where('delivery_people.id', $id)->first();
            return response()->json([
                'deliveryperson' => $deliveryperson
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function Deletedeliveryperson($id)
    {
        $deliveryPerson = DeliveryPerson::findorfail($id);
        $hub_id = DeliveryPerson::where('id',  $id)->value('hub_id');
        $deliveryPerson->delete();

        $deliveryPerson->Update([
            'deleted_by' => Auth::user()->id
        ]);

        //Hub Activation
        $this->hubActivation($hub_id);

        $notification = array(
            'message' => 'Delivery Person Deleted Successfully',
            'alert' => 'success'
        );
        return response()->json([
            'responseData' => $notification
        ]);
    }

    public function deliveryPersonList(Request $request)
    {
        try {
            //Get states
            $states = $this->getStates();
            $hubs = Hub::where('is_active', 1)->get();
            //To load list based type(All,Today,ThisMonth)
            $type = $request->input('type');
            return view('admin.delivery_person_management.delivery_person_list', compact('type', 'states', 'hubs'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deliveryListFilter(Request $request)
    {
        try {
            $state_id = $request->state_id;
            $deliveryPerson = DeliveryPerson::where('state_id', $state_id)->get();
            return response()->json(array(
                'data' => $deliveryPerson
            ));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function vehicleInfo(Request $request)
    {
        $hubVehicleInfo = HubVehicleInfo::where('hub_id', $request->hub_id)->get();
        return response()->json([
            'responseData' => $hubVehicleInfo
        ]);
    }

    public function deliveryPeopleDocument($id)
    {
        try {
            $documentTitle = $this->documentTitle(DocumentModulesType::DeliveryPerson);
            $documents = $this->documentByUsers(DocumentModulesType::DeliveryPerson, $id);
            $documentmodule_id = DocumentModulesType::DeliveryPerson;
            $DeliveryPersonDetails = DeliveryPerson::with('area', 'city', 'state')
                ->where('id', $id)
                ->first();
            $userCode = $DeliveryPersonDetails->delivery_person_code;
            $userName = $DeliveryPersonDetails->delivery_person_name;
            $userMobile = $DeliveryPersonDetails->mobile;
            $userActiveStatus = $DeliveryPersonDetails->is_active;
            $userAddress = $DeliveryPersonDetails->address . ','
                . $DeliveryPersonDetails->area->area_name . ','
                . $DeliveryPersonDetails->city->city_name . ','
                . $DeliveryPersonDetails->state->state_name . '-'
                . $DeliveryPersonDetails->pincode;
            return view('admin.documents.documents', compact(
                'documents',
                'documentTitle',
                'documentmodule_id',
                'userCode',
                'userName',
                'userMobile',
                'userAddress',
                'userActiveStatus'
            ));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function verifyDocument($id, $status)
    {
        try {
            $this->updateDocumentVerification(DocumentModulesType::DeliveryPerson, $id, $status);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
