<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Http\Controllers\Controller;
use App\Models\DocumentConfig;
use App\Models\DocumentModules;
use App\Models\DocumentType;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class DocumentConfigController extends Controller
{
    public function documentConfig()
    {
        $document = DocumentConfig::get();
        $documenttype = DocumentType::get();
        $documentModule = DocumentModules::get();
        return view('admin.masters.document_configuration.document_config', compact('document', 'documenttype', 'documentModule'));
    }

    public function addDocumentConfig(Request $request)
    {
        $request->validate([
            'ddlDocumentType' => 'required'
        ]);

        $data = $request->all();
        if ($request->hdDocumentConfigId == null) {
            foreach ($data['chkModuleName'] as $value) {
                DocumentConfig::create([
                    'documenttype_id' => $request->ddlDocumentType,
                    'documentmodule_id' => $value,
                    'is_mandatory' => $request->chkMandatory
                ]);
            }

            $notification = array(
                'message' => 'Documentconfig Created Successfully',
                'alert-type' => 'success'
            );
        } else {
            foreach ($data['chkModuleName'] as $value) {
                DocumentConfig::updateOrCreate([
                    'documenttype_id' => $request->ddlDocumentType,
                    'documentmodule_id' => $value,
                    'is_mandatory' => $request->chkMandatory
                ], [
                    'documenttype_id' => $request->ddlDocumentType,
                    'documentmodule_id' => $value,
                    'is_mandatory' => $request->chkMandatory
                ]);
            }

            DocumentConfig::whereNotIn('id', $request->chkModuleName)->where('documenttype_id', $request->ddlDocumentType)->delete();

            $notification = array(
                'message' => 'Documentconfig Updated Successfully',
                'alert-type' => 'success'
            );
        }
        return redirect()->route('documentconfig')->with($notification);
    }

    public function deleteDocumentConfig($id)
    {
        $area = DocumentConfig::findorfail($id);
        $area->delete();

        $notification = array(
            'message' => 'Documentconfig Deleted Successfully',
            'alert-type' => 'success'
        );

        return redirect()->route('documentconfig')->with($notification);
    }

    public function getDocumentConfigById($id)
    {
        $document = DocumentConfig::select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name')
            ->join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
            ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')->where('document_configs.id', $id)->first();
        return response()->json([
            'document' => $document
        ]);
    }

    public function getDocumentConfigData()
    {
        $document = DocumentConfig::select('document_configs.*', 'document_types.documenttype_name')
            ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')->get();

        return datatables()->of($document)
            ->addColumn('action', function ($row) {
                $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" 
                onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    public function activeStatus($id, $status)
    {
        DocumentConfig::findorfail($id)->update([
            'is_active' => $status
        ]);
    }
}
