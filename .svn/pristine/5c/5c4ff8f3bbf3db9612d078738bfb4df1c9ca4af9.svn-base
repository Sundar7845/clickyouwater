<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Enums\MenuPermissionType;
use App\Http\Controllers\Controller;
use App\Models\Designation;
use App\Traits\Common;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class DesignationController extends Controller
{
    use Common;
    public function designation()
    {
        try {
            $designation = Designation::whereNull('deleted_at')->get();
            return view('admin.masters.designation.designation', compact('designation'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function addDesignation(Request $request)
    {
        $request->validate([
            'txtDesignationName' => [
                'required',
                Rule::unique('designations', 'designation_name')->ignore($request->hdDesignationId),
            ],
        ], [
            'txtDesignationName.unique' => 'Designation name already exists.'
        ]);

        DB::beginTransaction();
        try {

            if ($request->hdDesignationId == null) {
                Designation::create([
                    'designation_name' => $request->txtDesignationName,
                    'created_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Designation Created Successfully',
                    'alert-type' => 'success'
                );
            } else {
                Designation::findorfail($request->hdDesignationId)->update([
                    'designation_name' => $request->txtDesignationName
                ]);

                $notification = array(
                    'message' => 'Designation Updated Successfully',
                    'alert-type' => 'success'
                );
            }

            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Designation Not Created!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
        return redirect()->route('designation')->with($notification);
    }

    public function deleteDesignation($id)
    {
        DB::beginTransaction();
        try {
            $designation = Designation::findorfail($id);
            $designation->delete();

            $designation->Update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Designation Deleted Successfully',
                'alert' => 'success'
            );
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Designation Could Not Be Deleted!',
                'alert' => 'error'
            );
        }
        return response()->json([
            'responseData' => $notification
        ]);
    }

    public function getDesignationById($id)
    {
        try {
            $designation = Designation::where('id', $id)->first();
            return response()->json([
                'designation' => $designation
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getDesignationData()
    {
        try {
            $designationData = Designation::get();

            return datatables()->of($designationData)
                ->addColumn('action', function ($row) {
                    $html = "";
                    if ($this->isUserHavePermission(MenuPermissionType::Edit)) {
                        $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    }
                    if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
                        $html .= '<i class="text-danger ti ti-trash me-1" id="confirm-color' . $row->id . '" onclick="showDelete(' . $row->id . ');"></i>';
                    }
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function activeStatus($id, $status)
    {
        DB::beginTransaction();
        try {
            Designation::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
