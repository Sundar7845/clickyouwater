<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Enums\DocumentModulesType;
use App\Http\Controllers\Controller;
use App\Models\BillNoSetting;
use App\Models\Ledger;
use App\Models\LedgerType;
use App\Models\State;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class LedgerController extends Controller
{
  use Common;
  public function ledger()
  {
    $states = State::all();
    $ledgertypes = LedgerType::all();
    $data = BillNoSetting::first();
    $ledPrefix = $data->ledger_prefix ?? 0;
    $ledLength = $data->ledger_length ?? 0;
    $ledLive = (int)($data->ledger_live ?? 0) + 1;
    if ($ledLive) {
      $ledNumber = $ledLive;
    }
    $leds = sprintf("%0{$ledLength}d", $ledNumber);
    $ledExample = $ledPrefix . $leds;
    return view('admin.masters.ledger.ledger', compact('states', 'ledgertypes', 'ledExample'));
  }

  public function addLedger(Request $request)
  {

    if ($request->hdLedgerId == null) {
      $request->validate([
        'ddlLedgertype' => 'required',
        'txtLedgername' => 'required',
        'txtmobile' => 'required|numeric|digits:10|unique:ledgers,mobile',
        'ddlState' => 'required',
        'ddlCity' => 'required',
        'ddlArea' => 'required',
        'txtAddress' => 'required',
        'txtPincode' => 'required',
        'txtCreditPeriod' => 'required',
        'txtopeningBalance' => 'required',
        'ddlCreditDebit' => 'required',
        'txtSettlemnt' => 'required'
      ]);
      Ledger::create([
        'ledger_code' => $request->txtLedgerCode,
        'ledger_type_id' => $request->ddlLedgertype,
        'ledger_name' => $request->txtLedgername,
        'mobile' => $request->txtmobile,
        'state_id' => $request->ddlState,
        'city_id' => $request->ddlCity,
        'area_id' => $request->ddlArea,
        'street' => $request->txtAddress,
        'pincode' => $request->txtPincode,
        'credit_period' => $request->txtCreditPeriod,
        'opening_balance' => $request->txtopeningBalance,
        'credit_debit' => $request->ddlCreditDebit,
        'settlement_period' => $request->txtSettlemnt,
        'is_active' => 1,
        'created_by' => Auth::user()->id
      ]);

      //Increase hublive count in settings table
      $this->updateLiveCount(DocumentModulesType::Ledger, 1);

      $notification = array(
        'message' => 'Ledger Created Successfully',
        'alert-type' => 'success'
      );
    } else {
      Ledger::findorfail($request->hdLedgerId)->update([
        'ledger_code' => $request->txtLedgerCode,
        'ledger_type_id' => $request->ddlLedgertype,
        'ledger_name' => $request->txtLedgername,
        'mobile' => $request->txtmobile,
        'state_id' => $request->ddlState,
        'city_id' => $request->ddlCity,
        'area_id' => $request->ddlArea,
        'street' => $request->txtAddress,
        'pincode' => $request->txtPincode,
        'credit_period' => $request->txtCreditPeriod,
        'opening_balance' => $request->txtopeningBalance,
        'credit_debit' => $request->ddlCreditDebit,
        'settlement_period' => $request->txtSettlemnt,
        'updated_by' => Auth::user()->id
      ]);

      $notification = array(
        'message' => 'Ledger Updated Successfully',
        'alert-type' => 'success'
      );
    }
    return redirect()->route('ledger')->with($notification);
  }

  public function getLedgerdata(){

    $ledgerData = Ledger::select('ledgers.*','ledger_types.ledger_type')
    ->join('ledger_types','ledger_types.id','ledgers.ledger_type_id')
    ->get();
            return datatables()->of($ledgerData)
                ->addColumn('action', function ($row) {
                    $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
  }

  public function activeStatus($id, $status)
  {
      DB::beginTransaction();
      try {
        Ledger::findorfail($id)->update([
              'is_active' => $status,
              'updated_by' => Auth::user()->id
          ]);
          DB::commit();
      } catch (\Exception $e) {
          DB::rollback();
          $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
  }

  public function getLedgerById($id)
    {
        try {
            $ledger = Ledger::select('ledgers.*')->where('ledgers.id', $id)->first();
            return response()->json([
                'ledger' => $ledger
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteLedger($id)
    {
        try {
            $ledger = Ledger::findorfail($id);
            $ledger->delete();
            $ledger->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Ledger Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (\Exception $e) {

            $notification = array(
                'message' => 'Ledger Could Not Be Deleted!',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }
}
