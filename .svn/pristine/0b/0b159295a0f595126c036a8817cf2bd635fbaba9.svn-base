<?php

// app/Http/Controllers/API/OrdersController.php

namespace App\Http\Controllers\API;

use App\Enums\DocumentModulesType;
use App\Enums\NotificationTypes;
use App\Enums\NotificationStrReplace;
use App\Enums\StatusTypes;
use App\Enums\WalletTransactionTypes;
use App\Http\Controllers\Controller;
use App\Http\Controllers\Notification\PushNotificationController;
use App\Http\Resources\OrderDetailsResource;
use App\Http\Resources\OrderResource;
use App\Http\Resources\ProductResource;
use App\Jobs\PlaceOrderJob;
use App\Models\Cart;
use App\Models\CustomerAddress;
use App\Models\NotificationConfig;
use App\Models\Offer;
use App\Models\OfferHubAllocation;
use App\Models\Order;
use App\Models\OrderDelivery;
use App\Models\OrderDet;
use App\Models\OrderTracking;
use App\Models\Products;
use App\Models\StateBrandAllocation;
use App\Models\Surrender;
use App\Models\SurrenderDet;
use App\Models\User;
use App\Models\UserNotifications;
use App\Models\UserOrderHistory;
use App\Models\UserReferralHistory;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Traits\ResponseAPI;
use Carbon\Carbon;
use DateTime;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Dompdf\Dompdf;

class OrdersController extends Controller
{
    use ResponseAPI;
    use Common;

    public function placeOrder(Request $request)
    {
        //TODO:Job Queue for All request job(one by one)
        //TODO:Stored procedure

        $validator = $request->validate([

            'hub_id' => 'required',
            'delivery_address_id' => 'required',
            'delivery_address' => 'required',
            'delivery_charge' => 'required',
            'additional_delivery_charge' => 'nullable',
            'coupon_id' => 'nullable',
            'coupon_code' => 'nullable',
            'total_discount_amount' => 'required',
            'total_igst_amount' => 'required',
            'total_sgst_amount' => 'required',
            'total_cgst_amount' => 'required',
            'total_qty' => 'required',
            'wallet_points_used' => 'required',
            'deposit_amount' => 'required',
            'total_tax_amount' => 'required',
            'sub_total' => 'required',
            'taxable_amount' => 'required',
            'roundoff' => 'required',
            'coupon_code_type' => 'nullable',
            'offer_points' => 'nullable',
            'offer_points_used' => 'nullable',
            'grand_total' => 'required',
            'desc' => 'nullable',
            'status_id' => 'required',
            'payment_method' => 'required',
            'payment_through' => 'required',
            'product_details' => 'required|array',
            'product_details.*.product_id' => 'required',
            'product_details.*.qty' => 'required',
            'product_details.*.price' => 'required'
        ]);

        DB::beginTransaction();

        try {
            $referral_points = 0;
            $currentDate = now();

            $transaction_date = $currentDate;

            //Calculate expected delivery date. 
            //Based on client requirement we have calculated the expected delivery duarion which is lowest from product type
            $delivery_duration = [];
            foreach ($request->product_details as $value) {
                $product = Products::where('id', $value['product_id'])->first();
                $delivery_duration[] = $product->productType->delivery_duration;
            }
            $min_delivery_duration = collect($delivery_duration)->min();
            $exp_delivery_date = $currentDate->addHours($min_delivery_duration);

            $order_no = $this->getAutoGeneratedCode(DocumentModulesType::Order);
            // dd($order_no);
            $this->updateLiveCount(DocumentModulesType::Order, 1);

            if (strtolower($request->payment_through) == 'wallet') {
                $status = StatusTypes::OrderPlaced;
                $message = "Order Placed";
                //Reduce wallet points 
                $this->updateWallet(Auth::user()->id, $request->wallet_points_used);
            } else {
                $status = $request->status_id;
                $message = "Payment Initiated";
            }
            if ($request->coupon_id && strtolower($request->coupon_code_type) == "coupon") {

                $hub_allocation_point = OfferHubAllocation::where('offer_id', $request->coupon_id)->where('hub_id', $request->hub_id)->first();
                // dd()
                $total_point = (int)$hub_allocation_point->points_used + (int)$request->offer_points_used;
                if ($hub_allocation_point->points_allocated >= $total_point) {
                    if (strtolower($request->payment_through) == 'wallet') {
                        $hub_allocation_point->points_used = $total_point;
                        $hub_allocation_point->save();
                        // if ($request->transaction_amount < $request->offer_points)
                        $this->addWallet(Auth::user()->id, $request->offer_points, WalletTransactionTypes::Offers);
                        $this->updateWallet(Auth::user()->id, $request->offer_points_used);
                    }
                } else {
                    $response = [
                        'status' => true,
                        'data' => [],
                        'message' => "Offer Not  Available!"
                    ];
                    return response($response, 200);
                }
            } elseif (strtolower($request->coupon_code_type) == "referral") {
                if (strtolower($request->payment_through) == 'wallet') {
                    $referred_by = User::where('referral_code', $request->coupon_code)->first();

                    $this->addReferralWallet(Auth::user()->id, $referred_by);
                    $this->updateWallet(Auth::user()->id, $request->offer_points_used);
                }
            }

            $orders = Order::create([
                'order_no' => $order_no,
                'user_id' => Auth::user()->id,
                'hub_id' => $request->hub_id,
                'delivery_address_id' => $request->delivery_address_id,
                'delivery_address' => $request->delivery_address,
                'delivery_charge' => $request->delivery_charge,
                'additional_delivery_charge' => $request->additional_delivery_charge,
                'exp_delivery_date' => $exp_delivery_date,
                'coupon_id' => $request->coupon_id,
                'coupon_code' => $request->coupon_code,
                'total_discount_amount' => $request->offer_points_used,
                'total_igst_amount' => $request->total_igst_amount,
                'total_sgst_amount' => $request->total_sgst_amount,
                'total_cgst_amount' => $request->total_cgst_amount,
                'total_qty' => $request->total_qty,
                'coupon_code_type' => $request->coupon_code_type,
                'wallet_points_used' => $request->wallet_points_used,
                'deposit_amount' => $request->deposit_amount,
                'total_tax_amount' => $request->total_tax_amount,
                'sub_total' => $request->sub_total,
                'taxable_amount' => $request->taxable_amount,
                'roundoff' => $request->roundoff,
                'grand_total' => $request->grand_total,
                'desc' => $request->desc,
                'status_id' => $status,
                'transaction_amount' => $request->transaction_amount,
                'transaction_date' => $transaction_date,
                'payment_method' => $request->payment_method,
                'payment_through' => $request->payment_through,
            ]);
            $product_details = $request->product_details;
            foreach ($product_details as $value) {
                # code...
                OrderDet::create([
                    'order_id' => $orders->id,
                    'product_id' => $value['product_id'],
                    'qty' => $value['qty'],
                    'price' => $value['price'],
                    'deposit_amount' => $value['deposit_amount'],
                    'igst_amount' => $value['igst_amount'],
                    'sgst_amount' => $value['sgst_amount'],
                    'cgst_amount' => $value['cgst_amount'],
                    'return_empty_cans_qty' => $value['return_empty_cans_qty'],
                ]);
            }

            //Add order status history
            $this->addOrderStatusHistory($orders->id, $request->status_id);

            //Clear cart after order placed successfully
            Cart::where('user_id', Auth::user()->id)->delete();

            $response = [
                'status' => true,
                'data' => [
                    'order_id' => $orders->id,
                    'order_no' => $order_no
                ],
                'message' => $message
            ];
            DB::commit(); // Commit the transaction

            if ($status == StatusTypes::OrderPlaced) {
                //Send notification
                $this->sendOrderNotification($orders->id, $request->status_id);
            }

            return response($response, 200);
        } catch (\Exception $e) {
            DB::rollback(); // Roll back the transaction if an error occurs

            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function cancelOrder(Request $request)
    {
        $validator = $request->validate([
            'order_id' => 'required',
        ]);
        DB::beginTransaction();

        try {
            $cancel_order_count = Order::where('id', $request->order_id)->where('status_id', StatusTypes::OrderPlaced)->count();
            if ($cancel_order_count > 0) {
                //Update order status
                $order = Order::find($request->order_id);
                $order->status_id = StatusTypes::Cancelled;
                $order->is_cancel = 1;
                $order->save();

                //Add order status history
                $this->addOrderStatusHistory($request->order_id, StatusTypes::Cancelled);

                $refund_points = $order->wallet_points_used + $order->transaction_amount;

                $this->addWallet(Auth::user()->id, $refund_points, WalletTransactionTypes::OrderRefund);

                DB::commit();

                //Send notification
                $this->sendOrderNotification($request->order_id, StatusTypes::Cancelled);
            }
            $response = array(
                'message' => ($cancel_order_count > 0 ? "Updated Successfully" : "This order is moved to delivery."),
                'data' => [],
                'status' => ($cancel_order_count > 0 ? true : false),
            );
            return response($response, 200);
        } catch (\Exception $e) {

            DB::rollback(); // Roll back the transaction if an error occurs
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function updateOrderStatus(Request $request)
    {
        $validator = $request->validate([
            'order_id' => 'required',
            'status_id' => 'required',

        ]);
        DB::beginTransaction();

        try {
            //Update order status
            $this->saveOrderStatus($request->order_id, $request->status_id);

            //Add order status history
            $this->addOrderStatusHistory($request->order_id, $request->status_id);
            DB::commit();
            //Send notification
            $this->sendOrderNotification($request->order_id, $request->status_id);
            $response = array(
                'message' => "Updated Successfully",
                'data' => [],
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {

            DB::rollback(); // Roll back the transaction if an error occurs
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function updatePaymentStatus(Request $request)
    {
        $validator = $request->validate([
            'order_id' => 'required',
            'status_id' => 'required',
            'transaction_response' => 'required',
            'transaction_status' => 'required',
            'transaction_id' => 'required',
        ]);
        DB::beginTransaction();

        try {
            //pdf create
            $order = Order::find($request->order_id);

            // dd($order);
            $order->status_id = $request->status_id;
            $order->transaction_response = $request->transaction_response;
            $order->transaction_id = $request->transaction_id;
            $order->transaction_status = $request->transaction_status;
            $order->save();

            if (strtolower($request->transaction_status) == 'success') {
                if ($order->wallet_points_used > 0) {
                    $this->updateWallet(Auth::user()->id, $order->wallet_points_used);
                }
                if ($order->coupon_id && strtolower($order->coupon_code_type) == "coupon") {

                    $offer_points = Offer::where('offer_id', $order->coupon_id)->pluck('offer_claim_points')->first();
                    $hub_allocation_point = OfferHubAllocation::where('offer_id', $order->coupon_id)->where('hub_id', $order->hub_id)->first();
                    // dd()
                    $total_point = (int)$hub_allocation_point->points_used + (int)$order->offer_points_used;
                    if ($hub_allocation_point->points_allocated >= $total_point) {
                        $hub_allocation_point->points_used = $total_point;
                        $hub_allocation_point->save();
                        // if ($request->transaction_amount < $request->offer_points)
                        $this->addWallet(Auth::user()->id, $offer_points, WalletTransactionTypes::Offers);
                        $this->updateWallet(Auth::user()->id, $order->offer_points_used);
                    }
                } elseif (strtolower($order->coupon_code_type) == "referral") {
                    # code...
                    $referred_by = User::where('referral_code', $order->coupon_code)->first();

                    $this->addReferralWallet(Auth::user()->id, $referred_by);
                    $this->updateWallet(Auth::user()->id, $order->offer_points_used);
                }
            }
            //Add order status history
            $this->addOrderStatusHistory($request->order_id, $request->status_id);
            DB::commit();


            //*******************************No need this notification now */
            // if (strtolower($order->payment_through) == 'wallet') {
            //     $this->sendWalletNotification($order->wallet_points_used, WalletTransactionTypes::Used);
            // }
            // if ($order->coupon_id && strtolower($order->coupon_code_type) == "coupon") {
            //     $this->sendWalletNotification($order->wallet_points_used, WalletTransactionTypes::Offers);
            // } elseif (strtolower($order->coupon_code_type) == "referral") {
            //     $this->sendWalletNotification($order->wallet_points_used, WalletTransactionTypes::Referral);
            // }


            //Send notification
            $this->sendOrderNotification($request->order_id, $request->status_id);
            $response = array(
                'message' => "Updated Successfully",
                'data' => [],
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {

            DB::rollback(); // Roll back the transaction if an error occurs
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function getOrderHistory(Request $request)
    {
        try {

            $orders = $this->getOrders($request->status_id);
            // dd($orders->get());
            if ($request->status_id) {
                $userOrders = $orders->get();
                $response = array(
                    'message' => "Success",
                    'data' => OrderResource::collection($userOrders),
                    'status' => true,
                );
            } else {
                $userOrders = $orders->paginate($this->recordsperpage);

                $response = array(
                    'message' => "Success",
                    'data' => OrderResource::collection($userOrders),
                    'pagination' => [
                        'total' => $userOrders->total(),
                        'per_page' => $userOrders->perPage(),
                        'current_page' => $userOrders->currentPage(),
                        'last_page' => $userOrders->lastPage(),
                        'next_page_url' => $userOrders->nextPageUrl(),
                        'prev_page_url' => $userOrders->previousPageUrl(),
                    ],
                    'status' => true,
                );
            }
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function getOrderDetails($id)
    {
        try {
            $orderdetails = $this->getOrderDetail($id);

            $response = array(
                'message' => "Success",
                'data' => $orderdetails,
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }

    public function downloadInvoice(Request $request)
    {
        $validator = $request->validate([
            'order_id' => 'required',
        ]);
        DB::beginTransaction();

        try {

            $invoice = $this->getAutoGeneratedCode(DocumentModulesType::Invoice);
            $invoice_path = $this->generateInvoicePDF($request->order_id, $invoice);
            $this->updateLiveCount(DocumentModulesType::Invoice, 1);

            //Update invoice path
            $order = Order::find($request->order_id);
            $order->invoice_no = $invoice;
            $order->invoice_path = $invoice_path;
            $order->save();

            DB::commit();
            $response = array(
                'message' => "Updated Successfully",
                'data' => $invoice_path,
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {

            DB::rollback(); // Roll back the transaction if an error occurs
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }

    public function updateInvoiceDownloaded(Request $request)
    {
        $validator = $request->validate([
            'order_id' => 'required',
        ]);
        DB::beginTransaction();

        try {

            //Update invoice path
            $order = Order::find($request->order_id);
            $order->is_invoice_downloaded = 1;
            $order->save();

            //Add order status history
            $this->addOrderStatusHistory($request->order_id, StatusTypes::InvoiceDownloaded);
            DB::commit();
            //Send notification
            $this->sendOrderNotification($request->order_id, StatusTypes::InvoiceDownloaded);
            $response = array(
                'message' => "Updated Successfully",
                'data' => [],
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {

            DB::rollback(); // Roll back the transaction if an error occurs
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }

    public function updateOrderDeliveryRating(Request $request)
    {
        $validator = $request->validate([
            'order_id' => 'required',
            'delivery_id' => 'required',
            'customer_rating' => 'required',
        ]);
        DB::beginTransaction();

        try {
            //pdf create
            $order = OrderDelivery::find($request->delivery_id);
            $order->customer_rating = $request->customer_rating;
            $order->save();

            DB::commit();
            $response = array(
                'message' => "Updated Successfully",
                'data' => [],
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {

            DB::rollback(); // Roll back the transaction if an error occurs
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function generateInvoicePDF($orderId, $invoice_no)
    {
        $order = Order::findOrFail($orderId);

        // dd($order);
        // Create new Dompdf instance
        $dompdf = new Dompdf();
        $orderDet = OrderDet::select('order_dets.*', 'products.product_name')
            ->join('products', 'products.id', 'order_dets.product_id')
            ->where('order_id', $order->id)
            ->get();
        $companyDetails = $this->getAdminSetting();
        // dd($order);

        $address = json_encode($order->delivery_address);
        $deliveryAddress = json_decode($address, true);

        // Generate the HTML content for the invoice
        $html = view('invoice.invoice', compact('order', 'orderDet', 'companyDetails', 'deliveryAddress', 'invoice_no'))->render();
        // $html = view('invoices.invoice', compact('order'))->render();

        // Load HTML content into Dompdf
        $dompdf->loadHtml($html);

        // Set paper size and orientation
        $dompdf->setPaper('A4', 'portrait');

        // Render the PDF
        $dompdf->render();

        // Save the PDF to a file
        $pdfOutput = $dompdf->output();
        $fileName = $invoice_no . '.pdf';

        $pdfPath = public_path('upload/invoice/' . $fileName);
        file_put_contents($pdfPath, $pdfOutput);

        // Return a download link to the PDF
        $url = asset('upload/invoice/' . $fileName);
        return $url;
    }

    public function getBuyAgainProduct(Request $request)
    {
        try {
            $address_id = $request->address_id;
            $products = [];
            $last_order = Order::where('user_id', Auth::user()->id)
                ->with('products.orderDets')
                ->where('delivery_address_id', $address_id)
                ->orderBy('id', 'desc')
                ->first();

            // dd($last_order);

            if ($last_order) {
                $productIds = $last_order->orderDets->pluck('products.id')->implode(',');

                $customer_address = CustomerAddress::where('id', $address_id)
                    ->select('state_id', 'city_id')
                    ->first();
                $brands = StateBrandAllocation::where('state_id', $customer_address->state_id)
                    ->where('city_id', $customer_address->city_id)
                    ->value('brand_id');

                $products = Products::with('brand', 'category', 'productType')
                    ->whereIn('brand_id', explode(",", $brands))
                    ->whereIn('id', explode(",", $productIds))
                    ->where('is_active', 1)
                    ->whereHas('brand', function ($query) {
                        $query->where('is_active', 1);
                    })
                    ->whereHas('category', function ($query) {
                        $query->where('is_active', 1);
                    })
                    ->whereHas('productType', function ($query) {
                        $query->where('is_active', 1);
                    })
                    ->get();

                $products = ProductResource::collection($products);

                // Append base URL to product_image field
                foreach ($products as $product) {
                    $cart = Cart::where('product_id', $product->id)->where('user_id', Auth::user()->id)->first();
                    $product->product_image = $this->getBaseUrl() . '/' . $product->product_image;
                    $product->is_cart = ($cart != null ? true : false);
                    $product->cart_id = ($cart != null ? $cart->id : 0);
                    // dd($cart);
                    $product->cart_qty = ($cart != null ? $cart->qty : $product->productType->min_order_qty);
                }
            }
            $response = array(
                'message' => "Success",
                'data' => $products,
                'status' => true,
            );
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
}
