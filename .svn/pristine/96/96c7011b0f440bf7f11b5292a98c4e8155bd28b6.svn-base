<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Http\Controllers\Controller;
use App\Models\Designation;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class DesignationController extends Controller
{
    public function designation()
    {
        $designation = Designation::get();
        return view('admin.masters.designation.designation', compact('designation'));
    }

    public function addDesignation(Request $request)
    {
        $request->validate([
            'txtDesignationName' => 'required'
        ]);

        DB::beginTransaction();
        try{

        if ($request->hdDesignationId == null) {
            Designation::create([
                'designation_name' => $request->txtDesignationName,
                'created_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Designation Created Successfully',
                'alert-type' => 'success'
            );
        } else {
            Designation::findorfail($request->hdDesignationId)->update([
                'designation_name' => $request->txtDesignationName
            ]);

            $notification = array(
                'message' => 'Designation Updated Successfully',
                'alert-type' => 'success'
            );
        }

            DB::commit();
            }catch (\Exception $e) {
            DB::rollback();
            dd($e);
            $notification = array(
           'message' => 'Designation Not Created!',
           'alert-type' => 'error'
            );
            }

        return redirect()->route('designation')->with($notification);
    }

    public function deleteDesignation($id)
    {
        try {
            $designation = Designation::findorfail($id);
            $designation->delete();

            $designation->Update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Designation Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (\Exception $e) {
            dd($e);
            $notification = array(
                'message' => 'Designation Could Not Be Deleted!',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function getDesignationById($id)
    {
        $designation = Designation::where('id', $id)->first();
        return response()->json([
            'designation' => $designation
        ]);
    }

    public function getDesignationData(Request $request)
    {

        $designationData = Designation::get();

        return datatables()->of($designationData)
            ->addColumn('action', function ($row) {
                $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                $html .= '<i class="text-danger ti ti-trash me-1" id="confirm-color' . $row->id . '" onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    public function activeStatus($id, $status)
    {
        DB::beginTransaction();
        try{
        Designation::findorfail($id)->update([
            'is_active' => $status,
            'updated_by' => Auth::user()->id

        ]);
        DB::commit();
        }catch (\Exception $e) {
        DB::rollback();
        dd($e);
    }
    }
}
