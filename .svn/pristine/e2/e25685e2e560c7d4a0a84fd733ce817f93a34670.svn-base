<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Http\Controllers\Controller;
use App\Models\Area;
use App\Models\State;
use App\Traits\Common;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class AreaController extends Controller
{
    use Common;
    public function area(Request $request)
    {
        $area = Area::with('state', 'city')->get();
        $states = State::get();
        return view('admin.masters.area.area', compact('states', 'area'));
    }

    public function getCity(Request $request)
    {
        $data = $this->getCities($request->state_id);
        return response()->json($data);
    }

    public function addArea(Request $request)
    {
        $request->validate([
            'ddlState' => 'required',
            'ddlCity' => 'required',
            'txtAreaName' => 'required'
        ]);

        DB::beginTransaction();
        try{

        if ($request->hdAreaId == null) {

            Area::create([
                'state_id' => $request->ddlState,
                'city_id' => $request->ddlCity,
                'area_name' => $request->txtAreaName,
                'created_by' => Auth::user()->id
            ]);
            $notification = array(
                'message' => 'Area Created Successfully',
                'alert-type' => 'success'
            );

        } else {
           
            Area::findorfail($request->hdAreaId)->update([
                'state_id' => $request->ddlState,
                'city_id' => $request->ddlCity,
                'area_name' => $request->txtAreaName,
                'updated_by' => Auth::user()->id
            ]);
            $notification = array(
                'message' => 'Area Updated Successfully',
                'alert-type' => 'success'
            );

        }
        DB::commit();
        }catch (\Exception $e) {
        DB::rollback();
        $notification = array(
           'message' => 'Area Not Created!',
           'alert-type' => 'error'
        );
        }
        
    return redirect()->route('area')->with($notification);

    }

    public function deleteArea($id)
    {
        try {
            $area = Area::findorfail($id);
            $area->delete();
            $area->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Area Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (QueryException $e) {

            $notification = array(
                'message' => 'Document type could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function getAreaById($id)
    {
        $area = Area::select('areas.*', 'states.state_name', 'cities.city_name')
            ->join('states', 'states.id', 'areas.state_id')
            ->join('cities', 'cities.id', 'areas.city_id')->where('areas.id', $id)->first();
        return response()->json([
            'area' => $area
        ]);
    }

    public function getAreaData()
    {
        $areas = Area::select('areas.*', 'states.state_name', 'cities.city_name')->join('states', 'states.id', 'areas.state_id')
            ->join('cities', 'cities.id', 'areas.city_id')->get();

        return datatables()->of($areas)
            ->addColumn('action', function ($row) {
                $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" 
                onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    public function activeStatus($id, $status)
    {
        Area::findorfail($id)->update([
            'is_active' => $status,
            'updated_by' => Auth::user()->id
        ]);
    }

    public function getAreaByStates(Request $request)
    {
        return  Area::select('area_name', 'id')->where('city_id', $request->id)->get()->toArray();
    }

    public function getAreaByCity(Request $request)
    {
        return  Area::select('area_name', 'id')->where('city_id', $request->city_id)->get()->toArray();
    }
}
