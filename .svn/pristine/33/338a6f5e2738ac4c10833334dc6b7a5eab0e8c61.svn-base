<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Enums\DocumentModulesType;
use App\Enums\MenuPermissionType;
use App\Http\Controllers\Controller;
use App\Models\BillNoSetting;
use App\Models\Ledger;
use App\Models\LedgerType;
use Illuminate\Validation\Rule;
use App\Models\State;
use App\Traits\Common;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class LedgerController extends Controller
{
  use Common;
  public function ledger()
  {
    try {
      $states = $this->getStates();
      $ledgertypes = LedgerType::all();
      $ledExample = $this->getAutoGeneratedCode(DocumentModulesType::Ledger);
      return view('admin.masters.ledger.ledger', compact('states', 'ledgertypes', 'ledExample'));
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function addLedger(Request $request)
  {
    $request->validate([
      'ddlLedgertype' => 'required',
      'txtLedgername' => [
        'required',
        Rule::unique('ledgers', 'ledger_name')->WhereNull('deleted_at')->ignore($request->hdLedgerId),
      ],
      'txtmobile' => [
        'required', 'numeric', 'digits:10',
        Rule::unique('ledgers', 'mobile')->WhereNull('deleted_at')->ignore($request->hdLedgerId),
      ],
      'ddlState' => 'required',
      'ddlCity' => 'required',
      'ddlArea' => 'required',
      'txtAddress' => 'required',
      'txtPincode' => 'required',
      'txtCreditPeriod' => 'required',
      'txtopeningBalance' => 'required',
      'ddlCreditDebit' => 'required',
      'txtSettlemnt' => 'required',
    ], [
      'txtLedgername.unique' => 'Ledger Name Already exists.',
      'txtmobile.unique' => 'Mobile Number Already exists'
    ]);

    try {
      if ($request->hdLedgerId == null) {
        //Create New Area Or Get Area ID
        $area_id = $this->getOrCreateAreaId($request->ddlArea, $request->ddlState, $request->ddlCity);

        Ledger::create([
          'ledger_code' => $request->txtLedgerCode,
          'ledger_type_id' => $request->ddlLedgertype,
          'ledger_name' => $request->txtLedgername,
          'mobile' => $request->txtmobile,
          'state_id' => $request->ddlState,
          'city_id' => $request->ddlCity,
          'area_id' => $area_id,
          'street' => $request->txtAddress,
          'pincode' => $request->txtPincode,
          'credit_period' => $request->txtCreditPeriod,
          'opening_balance' => $request->txtopeningBalance,
          'closing_balance' => $request->txtopeningBalance,
          'credit_debit' => $request->ddlCreditDebit,
          'settlement_period' => $request->txtSettlemnt,
          'is_active' => 1,
          'created_by' => Auth::user()->id,
          'created_at' => Carbon::now()
        ]);

        //Increase hublive count in settings table
        $this->updateLiveCount(DocumentModulesType::Ledger, 1);

        $notification = array(
          'message' => 'Ledger Created Successfully',
          'alert-type' => 'success'
        );
      } else {

        //Create New Area Or Get Area ID
        $area_id = $this->getOrCreateAreaId($request->ddlArea, $request->ddlState, $request->ddlCity);

        Ledger::findorfail($request->hdLedgerId)->update([
          'ledger_code' => $request->txtLedgerCode,
          'ledger_type_id' => $request->ddlLedgertype,
          'ledger_name' => $request->txtLedgername,
          'mobile' => $request->txtmobile,
          'state_id' => $request->ddlState,
          'city_id' => $request->ddlCity,
          'area_id' => $area_id,
          'street' => $request->txtAddress,
          'pincode' => $request->txtPincode,
          'credit_period' => $request->txtCreditPeriod,
          'opening_balance' => $request->txtopeningBalance,
          'closing_balance' => $request->txtopeningBalance,
          'credit_debit' => $request->ddlCreditDebit,
          'settlement_period' => $request->txtSettlemnt,
          'updated_by' => Auth::user()->id
        ]);

        $notification = array(
          'message' => 'Ledger Updated Successfully',
          'alert-type' => 'success'
        );
      }
    } catch (\Exception $e) {
      $notification = array(
        'message' => 'Ledger Not Created!',
        'alert-type' => 'error'
      );
      $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
    }
    return redirect()->route('ledger')->with($notification);
  }

  public function getLedgerdata()
  {
    try {
      $ledgerData = Ledger::select('ledgers.*', 'ledger_types.ledger_type')
        ->join('ledger_types', 'ledger_types.id', 'ledgers.ledger_type_id')
        ->get();
      return datatables()->of($ledgerData)
        ->addColumn('action', function ($row) {
          $html = "";
          if ($this->isUserHavePermission(MenuPermissionType::Edit)) {
            $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
          }
          if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
            $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
          }
          return $html;
        })->toJson();
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function activeStatus($id, $status)
  {
    try {
      Ledger::findorfail($id)->update([
        'is_active' => $status,
        'updated_by' => Auth::user()->id
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function getLedgerById($id)
  {
    try {
      $ledger = Ledger::select('ledgers.*')->where('ledgers.id', $id)->first();
      return response()->json([
        'ledger' => $ledger
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function deleteLedger($id)
  {
    try {
      $ledger = Ledger::findorfail($id);
      $ledger->delete();
      $ledger->update([
        'deleted_by' => Auth::user()->id
      ]);

      $notification = array(
        'message' => 'Ledger Deleted Successfully',
        'alert' => 'success'
      );
      return response()->json([
        'responseData' => $notification
      ]);
    } catch (\Exception $e) {

      $notification = array(
        'message' => 'Ledger Could Not Be Deleted!',
        'alert' => 'error'
      );
      return response()->json([
        'responseData' => $notification
      ]);
    }
  }
}
