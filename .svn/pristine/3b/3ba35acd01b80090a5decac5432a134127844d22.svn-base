<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Http\Controllers\Controller;
use App\Models\WalletTransactionThrough;
use App\Models\WalletTransactionType;
use Illuminate\Http\Request;
use App\Traits\Common;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class WalletTransactionThroughController extends Controller
{
    use Common;
    public function WalletTransactionThrough(){

        try {
        $walletTransactionType = WalletTransactionType::get();
        return view('admin.masters.wallet_transaction_through.wallet_transaction_through',compact('walletTransactionType'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
}

    public function addWalletTransactionThrough(Request $request){

        try {
       
        if ($request->hdWalletTransactionTypeId == null) {
            $request->validate([
                'ddlwalletTransactionType' => 'required|unique:wallet_transaction_throughs,wallet_transaction_type_id,NULL,id,deleted_by,NULL',
                'txtMessageFormat' => 'required|unique:wallet_transaction_throughs,msg_format,NULL,id,deleted_by,NULL'
            ]);            
           
            WalletTransactionThrough::create([
                'wallet_transaction_type_id' => $request->ddlwalletTransactionType,
                'msg_format' => $request->txtMessageFormat,
                'created_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Wallet Transaction Created Successfully',
                'alert-type' => 'success'
            );
        } else {
            $request->validate([
                'ddlwalletTransactionType' => 'required|unique:wallet_transaction_throughs,wallet_transaction_type_id,'. $request->hdWalletTransactionTypeId . 'NULL,id,deleted_by,NULL',
                'txtMessageFormat' => 'required|unique:wallet_transaction_throughs,msg_format,'. $request->hdWalletTransactionTypeId .'NULL,id,deleted_by,NULL'
    
            ]);
            WalletTransactionThrough::findorfail($request->hdWalletTransactionTypeId)->update([
                'wallet_transaction_type_id' => $request->ddlwalletTransactionType,
                'msg_format' => $request->txtMessageFormat,
                'updated_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Wallet Transaction Updated Successfully',
                'alert-type' => 'success'
            );
        }
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Wallet Transaction Type Already Exists!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }

        return redirect()->route('wallettransactionthrough')->with($notification);
    }

    public function getWalletTransactionThroughData(){

        try {
        $wallettransactionthrough = WalletTransactionThrough::select('wallet_transaction_throughs.*', 'wallet_transaction_types.wallet_transaction_type')
                ->join('wallet_transaction_types', 'wallet_transaction_types.id', 'wallet_transaction_throughs.wallet_transaction_type_id')->get();
            return datatables()->of($wallettransactionthrough)
                ->addColumn('action', function ($row) {
                    $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
            } catch (\Exception $e) {
                $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
            }
    }

    public function getWalletTransactionThroughById($id)
    {
        try {
            $wallettransactionthrough = WalletTransactionThrough::select('wallet_transaction_throughs.*', 'wallet_transaction_types.wallet_transaction_type')
                ->join('wallet_transaction_types', 'wallet_transaction_types.id', 'wallet_transaction_throughs.wallet_transaction_type_id')->where('wallet_transaction_throughs.id', $id)->first();
            return response()->json([
                'wallettransactionthrough' => $wallettransactionthrough
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteWalletTransactionThroughById($id)
    {
        try {
            $wallettransactionthrough = WalletTransactionThrough::findorfail($id);
            $wallettransactionthrough->delete();
            $wallettransactionthrough->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Wallet Transaction Through Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (\Exception $e) {

            $notification = array(
                'message' => 'Wallet Transaction Through Could Not Be Deleted!',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

}
