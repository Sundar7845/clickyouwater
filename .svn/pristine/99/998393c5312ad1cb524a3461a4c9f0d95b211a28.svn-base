<?php

namespace App\Http\Controllers\Admin\Offer;

use App\Http\Controllers\Controller;
use App\Models\Offer;
use App\Models\OfferAllocation;
use App\Models\OfferType;
use App\Models\State;
use App\Traits\Common;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Intervention\Image\Facades\Image;

class OffersController extends Controller
{
   use common;
   public function offers($id = NULL)
   {
        try {
            $states = State::orderBy('state_name', 'ASC')->get();
            $offerTypes = OfferType::get();
            return view('admin.offer.offers',compact('states','offerTypes'));
            } catch (\Exception $e) {
                $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
            }
   }

   public function offersAllocate()
   {
      return view('admin.offer.offers_allocate');
   }

   public function offersCreate(Request $request)
   { 
      DB::beginTransaction();
      try {
        
        $request->validate([
            'ddlOffer' => 'required',
            'txtOfferName' => 'required',
            'txtStartDate' => 'required',
            'txtEndDate' => 'required',
            'txtOffertotalPoints' => 'required',
            'txtOfferclaimPoints' => 'required',
            // 'OfferImage' => 'required'
        ]);

      if($request->hdOfferId == null)
      {
         $data = $request->all();

         $startDate = Carbon::create($request->txtStartDate); // set the start date
         $endDate = Carbon::create($request->txtEndDate); // set the end date
         $daysBetween = $endDate->diffInDays($startDate);

         $image = $request->file('OfferImage');
         $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
         image::make($image)->save('upload/offers/' . $name_gen);
         $save_url = 'upload/offers/' . $name_gen;
         
            Offer::create([
            'offer_type_id' => $request->ddlOffer,
            'offer_name' => $request->txtOfferName,
            'validity' => $daysBetween,
            'offer_total_points' => $request->txtOffertotalPoints,
            'offer_claim_points' => $request->txtOfferclaimPoints,
            'start_date' => $request->txtStartDate,
            'end_date' => $request->txtEndDate,
            'offer_image_path' => $save_url,
            'created_by' => Auth::user()->id
            ]);
    
         if($request->ddlState != null)
         {
            $multistates = $data['ddlState'];
                  $multistateArray = [];
                  foreach ($multistates as $method) {
                     $multistateArray[] = $method;
                  }
                  $multistateString = implode(",",$multistateArray);
                  OfferAllocation::create([
                     'offer_id' => $request->ddlOffer,
                     'state_id' => $multistateString,
                     'created_by' => Auth::user()->id
               ]);
         }
         $notification = array(
            'message' => 'Offer Created Successfully',
            'alert-type' => 'success'
        );

      }else{

        $data = $request->all();
         $oldImage = $request->hdOfferImg;

         $startDate = Carbon::create($request->txtStartDate); // set the start date
         $endDate = Carbon::create($request->txtEndDate); // set the end date
         $daysBetween = $endDate->diffInDays($startDate);
        
         if ($request->file('OfferImage')) {
            @unlink($oldImage);
            $image = $request->file('OfferImage');
            $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
            Image::make($image)->save('upload/offers/' . $name_gen);
            $save_url = 'upload/offers/' . $name_gen;
            Offer::findorfail($request->hdOfferId)->update([
               'offer_image_path' => $save_url,
               'updated_by' => Auth::user()->id
           ]);
           
            Offer::findorfail($request->hdOfferId)->update([
               'offer_type_id' => $request->ddlOffer,
               'offer_name' => $request->txtOfferName,
               'validity' => $daysBetween,
               'offer_total_points' => $request->txtOffertotalPoints,
               'offer_claim_points' => $request->txtOfferclaimPoints,
               'start_date' => $request->txtStartDate,
               'end_date' => $request->txtEndDate,
                'updated_by' => Auth::user()->id
            ]);

            if($request->ddlState != null)
            {
            $multistates = $data['ddlState'];
                  $multistateArray = [];
                  foreach ($multistates as $method) {
                     $multistateArray[] = $method;
                  }
                  $multistateString = implode(",",$multistateArray);
                  OfferAllocation::findorfail($request->hdOfferId)->update([
                     'offer_id' => $request->ddlOffer,
                     'state_id' => $multistateString,
                     'created_by' => Auth::user()->id
               ]);
         }
        }
            $notification = array(
            'message' => 'Offer Updated Successfully',
            'alert-type' => 'success'
            );
      }
        DB::commit(); // Commit the transaction
        return redirect()->route('offers')->with($notification);
        } catch (\Exception $e) {dd($e);
                DB::rollback(); // Roll back the transaction if an error occurs
                $notification = array(
                'message' => 'Something Went Wrong!',
                'alert-type' => 'success'
                );
                $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
                return redirect()->route('offers')->with($notification);
        }
    }

   public function getOffersData()
    {
        try {
            $offerData = Offer::select('offers.*','offer_types.offer_type_name')
            ->join('offer_types', 'offer_types.id','offers.offer_type_id')
            ->get();

            return datatables()->of($offerData)
                ->addColumn('action', function ($row) {
                    $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
            } catch (\Exception $e) {
                $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
            }
    }

    public function activeStatus($id, $status)
    {
        DB::beginTransaction();
        try {
            Offer::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getOfferById($id)
    {
        try {
            $offer = Offer::select('offers.*','offer_allocations.state_id')
            ->join('offer_allocations','offers.offer_type_id','offer_allocations.offer_id')
            ->where('offers.id', $id)->first();
            return response()->json([
                'offer' => $offer
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteOffers($id)
    {
        try {
            $Offers = Offer::findorfail($id);
            $Offers->delete();
            $Offers->update([
                'deleted_by' => Auth::user()->id
            ]);
            $notification = array(
                'message' => 'Brands Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (\Exception $e) {

            $notification = array(
                'message' => 'Brands could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }
}
