<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Http\Requests\RegisterRequests;
use App\Http\Resources\UserProfileResource;
use App\Models\Customer;
use App\Models\CustomerType;
use App\Models\User;
use App\Traits\Common;
use App\Traits\ResponseAPI;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Intervention\Image\Facades\Image;

class CustomerProfile extends Controller
{
    use Common;
    use ResponseAPI;

    public function getCustomerType()
    {
        try {
            $cust_type = CustomerType::all();
            $response = [
                'status' => true,
                'data' => $cust_type,
            ];
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), 1, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }


    public function getUserInfo()
    {
        try {
            $users = User::with('customer')->where('id', Auth::user()->id)->get();
            $res = UserProfileResource::collection($users);
            $response = [
                'status' => true,
                'data' => $res,
            ];
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), 1, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }

    public function updateUserInfo(Request $request)
    {

        // Validate the input data.
        $validated_data = $request->validate([
            'user_name' => 'required',
            'email' => 'required',
            'customertype_id' => 'required'
        ]);

        DB::beginTransaction();
        try {

            $user = User::where('id', Auth::user()->id)->select('ref_id', 'user_img_path')->first();

            // Check the file exists at a given path
            if (File::exists(public_path($user->user_img_path))) {
                // Delete the file at a given path
                File::delete(public_path($user->user_img_path));
            }
            $file_path = null;
            if ($request->hasFile('image')) {
                $image = $request->file('image');
                // Generate a unique file name for the image
                $fileName = $user->ref_id . '_' . $this->generateRandom(16) . '.' . $image->getClientOriginalExtension();

                // Resize and save the image using the intervention/image package
                $image = Image::make($image->getRealPath());
                $image->resize(400, 400, function ($constraint) {
                    $constraint->aspectRatio();
                });
                $file_path = 'upload/customers/' . $fileName;
                $image->save(public_path($file_path));
            }

            Customer::findOrfail($user->ref_id)->update([
                'customer_name' => $validated_data['user_name'],
                'email' => $validated_data['email'],
                'customertype_id' => $validated_data['customertype_id']
            ]);

            User::findOrfail(Auth::user()->id)->update([
                'user_name' => $validated_data['user_name'],
                'display_name' => $validated_data['user_name'],
                'email' => $validated_data['email'],
                'user_img_path' => $file_path,
                'is_approved' => ($validated_data['customertype_id'] == 1 ? 1 : 0)
            ]);

            $response = [
                'status' => true,
                'data' => [],
                'message' => 'Updated Successfully'
            ];
            DB::commit();
            return response($response, 200);
        } catch (\Exception $e) {
            DB::rollBack();
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), 1, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
}
