<?php

namespace App\Http\Controllers\Admin\Accounts;

use App\Enums\DocumentModulesType;
use App\Http\Controllers\Controller;
use App\Models\Bank;
use App\Models\Expense;
use App\Models\Ledger;
use App\Models\PaymentMode;
use App\Models\PaymentType;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class PaymentsController extends Controller
{
  use Common;
  public function payments()
  {
    try {
      $paymentType = PaymentType::get();
      $ledgerName = Ledger::select('ledgers.*', 'expenses.amount_paid')
        ->join('expenses', 'expenses.ledger_id', 'ledgers.id')
        ->where('ledger_type_id', 2)
        ->where('expenses.amount_paid', 0)
        ->groupBy('ledgers.ledger_name')
        ->distinct()
        ->get();
      $employeeName = $this->getUserRolesForDropDown();
      $companyLedger = Ledger::where('ledger_type_id', 1)->get();
      $paymentMode = PaymentMode::get();
      $bankName = Bank::get();
      $payment_auto_code = $this->getAutoGeneratedCode(DocumentModulesType::Payment);
      return view('admin.accounts.payments.payments', compact('bankName', 'paymentType', 'ledgerName', 'employeeName', 'companyLedger', 'paymentMode', 'payment_auto_code'));
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function BalanceInfo(Request $request)
  {
    try {
      $companyLedgerBalanceInfo = Ledger::where('id', $request->ledger_id)->where('ledger_type_id', 1)->first();
      $vendorLedgerBalanceInfo = Ledger::where('id', $request->vendor_id)->where('ledger_type_id', 2)->first();
      $employeeLeger = $this->getUserRolesForDropDown()->where('id', $request->employee_id)->first();
      return response()->json([
        'companyLedgerBalanceInfo' => $companyLedgerBalanceInfo,
        'employeeLeger' => $employeeLeger,
        'vendorLedgerBalanceInfo' => $vendorLedgerBalanceInfo
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function getPendingBillsData(Request $request)
  {
    try {
      $vendorPendingBills = Expense::where('ledger_id', $request->vendor_id)->where('is_paid', 0)->get();
      $companyPendingBills = Expense::where('ledger_id', $request->ledger_id)->where('is_paid', 0)->get();
      $employeePendingBills = Expense::where('ledger_id', $request->ledger_id)->where('is_paid', 0)->get();
      return response()->json([
        'vendorPendingBills' => $vendorPendingBills,
        'companyPendingBills' => $companyPendingBills,
        'employeePendingBills' => $employeePendingBills
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function paymentsList()
  {
    return view('admin.accounts.payments.payments_list');
  }
}
