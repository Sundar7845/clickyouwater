<?php

namespace App\Traits;

use App\Enums\DocumentModulesType;
use App\Models\Area;
use App\Models\BillNoSetting;
use App\Models\City;
use App\Models\DocumentConfig;
use App\Models\Log;
use App\Models\Menu;
use App\Models\Role;
use App\Models\State;
use App\Models\User;
use App\Models\UserRolePermission;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

trait Common
{

    public function createUser($user_name, $email, $password, $ref_id, $display_name, $mobile, $role_id, $is_active, $created_by)
    {
        User::create([
            'user_name' => $user_name,
            'email' => $email,
            'password' => Hash::make($password),
            'ref_id' => $ref_id,
            'display_name' => $display_name,
            'mobile' =>  $mobile,
            'role_id' => $role_id,
            'is_active' => $is_active,
            'created_by' => $created_by
        ]);
    }
    public function UpdateLiveCount($documentsmodule_id, $plusorminus)
    {
        switch ($documentsmodule_id) {
            case DocumentModulesType::Hub:
                $data = BillNoSetting::first();
                $data->hub_live = ($plusorminus == 1 ? $data->hub_live + 1 : $data->hub_live - 1);
                $data->save();
        }
    }
    public function getStates($country_id)
    {
        return State::where("country_id", $country_id)->get(["country_name", "id"]);
    }

    public function getCities($state_id)
    {
        return City::where("state_id", $state_id)->get(["city_name", "id"]);
    }

    public function getAreas($city_id)
    {
        return Area::where("city_id", $city_id)->get()->toArray();
    }

    public function checkUserPermission($user_id)
    {
        $userPermission = UserRolePermission::select('menu_id')->where('user_id', $user_id)->get()->toArray();
        $getMenuId = explode(',', $userPermission['menu_id'] ?? 0);
        $checkpermission = Menu::whereIn('id', [$getMenuId])->first();
        if ($checkpermission) {
            return true;
        } else {
            return false;
        }
    }

    public function fileUpload($fileinput, $filepath, $fileName)
    {
        $fileinput->move(public_path($filepath), $fileName);
        return $filepath . '/' . $fileName;
    }

    public function generateRandom($digit)
    {
        switch ($digit) {
            case 8:
                return mt_rand(10000000, 99999999);
            case 16:
                return mt_rand(1000000000000000, 9999999999999999);
            default:
                return mt_rand(100000, 999999);
        }
    }

    public function getRolesForDropDown()
    {
        $role_id = [1, 3, 4, 5, 6, 17];
        $roles = Role::whereNotIn('id', $role_id)->get();

        return $roles;
    }

    public function getUserRolesForDropDown()
    {
        $role_id = [1, 3, 4, 5, 6, 17];
        $users = User::where('is_active',1)->whereNotIn('role_id', $role_id)->get();

        return $users;
    }

    public function validateDocuments(Request $request, $documentsmodule_id, $redirect_route)
    {
        $documents = $this->getDocumentsByModule($documentsmodule_id);

        foreach ($documents as $item) {
            if ($item->is_mandatory == 1) {
                $document = 'doc_' . $item->id;
                $image = 'file_' . $item->id;
                // $doc = $request->$document;
                // $file = $request->$image;
                if (!isset($request->$document) || !isset($request->$image)) {
                    $notification = array(
                        'message' => $item->documenttype_name . 'Required',
                        'alert-type' => 'error'
                    );
                    return redirect()->route($redirect_route)->with($notification);
                }
            }
        }
    }

    public function getDocumentsByModule($documentsmodule_id)
    {
        $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
            ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
            ->where('documentmodule_id', $documentsmodule_id)->where('document_configs.is_active', 1)
            ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name')
            ->get();

        return $documents;
    }
    public function getDocumentConfigsByModule($documentsmodule_id, $id)
    {
        $documents = [];
        switch ($documentsmodule_id) {
            case DocumentModulesType::Hub:
                $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
                    ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
                    ->join('hub_documents', 'hub_documents.documentconfig_id', 'document_configs.id')
                    ->where('document_configs.documentmodule_id', 2)->where('hub_documents.hub_id', $id)
                    ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name', 'hub_documents.document_number', 'hub_documents.document_path')
                    ->get();
            default:
                $documents = [];
        }

        return $documents;
    }

    public function Log($transaction_name, $mode, $log_message, $user_id, $ip_address, $system_name, $is_app = 0)
    {
        Log::create([
            'transaction_name' => $transaction_name,
            'mode' => $mode,
            'log_message' => $log_message,
            'user_id' => $user_id,
            'ip_address' => $ip_address,
            'system_name' =>  $system_name,
            'is_app' =>  $is_app,
            'log_date' => Carbon::now()
        ]);
    }
}
