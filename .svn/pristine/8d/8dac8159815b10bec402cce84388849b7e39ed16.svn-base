<?php

namespace App\Traits;

use App\Enums\DocumentModulesType;
use App\Models\AdminSettings;
use App\Models\Area;
use App\Models\BillNoSetting;
use App\Models\City;
use App\Models\CustomerAddress;
use App\Models\DocumentConfig;
use App\Models\GeoApiSettings;
use App\Models\Log;
use App\Models\Menu;
use App\Models\Role;
use App\Models\SmsSettings;
use App\Models\State;
use App\Models\User;
use App\Models\UserRolePermission;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Route;

trait Common
{
    public function getBaseUrl()
    {
        return url('/');
    }
    public function getAdminSetting()
    {
        return AdminSettings::all();
    }
    public function generateOtp($length)
    {
        $min = pow(10, $length - 1);
        $max = pow(10, $length) - 1;
        return rand($min, $max);
    }
    public function generateReferralCode()
    {
        $otpdetails = $this->getOtpDetails();

        $code = substr(md5(uniqid(mt_rand(), true)), 0, $otpdetails->referral_code_length); // generate a random string
        return strtoupper($code);
    }

    public function getSmsDetails()
    {
        return SmsSettings::first();
    }
    public function getOtpDetails()
    {
        return AdminSettings::first();
    }
    public function getMapDetails()
    {
        return GeoApiSettings::first();
    }
    public function createUser($user_name, $email, $password, $ref_id, $display_name, $mobile, $role_id, $is_active, $created_by)
    {
        User::create([
            'user_name' => $user_name,
            'email' => $email,
            'password' => Hash::make($password),
            'ref_id' => $ref_id,
            'display_name' => $display_name,
            'mobile' =>  $mobile,
            'role_id' => $role_id,
            'is_active' => $is_active,
            'created_by' => $created_by
        ]);
    }
    public function updateLiveCount($documentsmodule_id, $plusorminus)
    {
        switch ($documentsmodule_id) {
            case DocumentModulesType::Hub:
                $data = BillNoSetting::first();
                $data->hub_live = ($plusorminus == 1 ? $data->hub_live + 1 : $data->hub_live - 1);
                $data->save();
                break;
            case DocumentModulesType::Employee:
                $data = BillNoSetting::first();
                $data->employee_live  = ($plusorminus == 1 ? $data->employee_live  + 1 : $data->employee_live  - 1);
                $data->save();
                break;
            case DocumentModulesType::Manufacturer:
                $data = BillNoSetting::first();
                $data->manufacture_live  = ($plusorminus == 1 ? $data->manufacture_live  + 1 : $data->manufacture_live  - 1);
                $data->save();
                break;
            case DocumentModulesType::Logistic:
                $data = BillNoSetting::first();
                $data->logistics_live  = ($plusorminus == 1 ? $data->logistics_live  + 1 : $data->logistics_live  - 1);
                $data->save();
                break;
            case DocumentModulesType::DeliveryPerson:
                $data = BillNoSetting::first();
                $data->deliveryperson_live  = ($plusorminus == 1 ? $data->deliveryperson_live  + 1 : $data->deliveryperson_live  - 1);
                $data->save();
                break;
            case DocumentModulesType::Ledger:
                $data = BillNoSetting::first();
                $data->ledger_live = ($plusorminus == 1 ? $data->ledger_live  + 1 : $data->ledger_live  - 1);
                $data->save();
                break;
            default:
                $data = [];
        }
        return $data;
    }

    public function getAutoGeneratedCode($documentsmodule_id)
    {
        switch ($documentsmodule_id) {
            case DocumentModulesType::Hub:
                $data = BillNoSetting::first();
                $hubPrefix = $data->hub_prefix ?? 0;
                $hubLength = $data->hub_length ?? 0;
                $hubLive = (int)($data->hub_live ?? 0) + 1;
                if ($hubLive) {
                    $hubNumber = $hubLive;
                }
                $hubs = sprintf("%0{$hubLength}d", $hubNumber);
                $hubExample = $hubPrefix . $hubs;
                return $hubExample;

            case DocumentModulesType::Logistic:
                $data = BillNoSetting::first();
                $logPrefix = $data->logistics_prefix ?? 0;
                $logLength = $data->logistics_length ?? 0;
                $logLive = (int)($data->logistics_live ?? 0) + 1;
                if ($logLive) {
                    $logNumber = $logLive;
                }
                $logs = sprintf("%0{$logLength}d", $logNumber);
                $logExample = $logPrefix . $logs;
                return $logExample;

            case DocumentModulesType::Manufacturer:
                $data = BillNoSetting::first();
                $manPrefix = $data->manufacture_prefix ?? 0;
                $ManLength = $data->manufacture_length ?? 0;
                $manLive = (int)($data->manufacture_live ?? 0) + 1;
                if ($manLive) {
                    $manNumber = $manLive;
                }
                $mans = sprintf("%0{$ManLength}d", $manNumber);
                $manExample = $manPrefix . $mans;
                return $manExample;

            case DocumentModulesType::DeliveryPerson:
                $data = BillNoSetting::first();
                $delPrefix = $data->deliveryperson_prefix ?? 0;
                $delLength = $data->deliveryperson_length ?? 0;
                $delLive = (int)($data->deliveryperson_live ?? 0) + 1;
                if ($delLive) {
                    $delNumber = $delLive;
                }
                $del = sprintf("%0{$delLength}d", $delNumber);
                $delExample = $delPrefix . $del;
                return $delExample;

            case DocumentModulesType::Employee:
                $data = BillNoSetting::first();
                $manPrefix = $data->employee_prefix ?? 0;
                $ManLength = $data->employee_length ?? 0;
                $manLive = (int)($data->employee_live ?? 0) + 1;
                if ($manLive) {
                    $manNumber = $manLive;
                }
                $man = sprintf("%0{$ManLength}d", $manNumber);
                $manExample = $manPrefix . $man;
                return $manExample;
        }
    }

    public function getStates($country_id)
    {
        return State::where("country_id", $country_id)->orderBy('state_name', 'asc')->get(["state_name", "id"]);
    }

    public function getCities($state_id)
    {
        return City::where("state_id", $state_id)->orderBy('city_name', 'asc')->get(["city_name", "id"]);
    }
    public function getCustomerAddress_details()
    {
        // $qry = CustomerAddress::with('getAddressType')->where("customer_id", Auth::user()->customer->id)->get();
        // dd($qry);
        return CustomerAddress::with('getAddressType')->where("customer_id", Auth::user()->customer->id)->get();
    }

    public function getAreas($city_id)
    {
        return Area::where("city_id", $city_id)->orderBy('area_name', 'asc')->get(['area_name', 'id'])->toArray();
    }

    public function checkUserPermission($user_id)
    {
        $userPermission = UserRolePermission::select('menu_id')->where('user_id', $user_id)->get()->toArray();
        $getMenuId = explode(',', $userPermission['menu_id'] ?? 0);
        $checkpermission = Menu::whereIn('id', [$getMenuId])->first();
        if ($checkpermission) {
            return true;
        } else {
            return false;
        }
    }

    public function fileUpload($fileinput, $filepath, $fileName)
    {
        $fileinput->move(public_path($filepath), $fileName);
        return $filepath . '/' . $fileName;
    }

    public function generateRandom($digit)
    {
        // switch ($digit) {
        //     case 8:
        //         return mt_rand(10000000, 99999999);
        //     case 4:
        //         return mt_rand(1000, 9999);
        //     case 16:
        //         return mt_rand(1000000000000000, 9999999999999999);
        //     default:
        //         return mt_rand(100000, 999999);
        // }
        $digit = $digit + 1;
        $min = pow(10, $digit - 1);
        $max = pow(10, $digit) - 1;
        return rand($min, $max);
    }

    public function getRolesForDropDown()
    {
        $role_id = [1, 3, 4, 5, 6, 17];
        $roles = Role::whereNotIn('id', $role_id)->whereNull('deleted_at')->get();

        return $roles;
    }

    public function getUserRolesForDropDown()
    {
        $role_id = [1, 3, 4, 5, 6, 17];
        $users = User::where('is_active', 1)->whereNotIn('role_id', $role_id)->get();

        return $users;
    }

    public function validateDocuments($request, $documentsmodule_id)
    {
        $documents = $this->getDocumentsByModule($documentsmodule_id);
        foreach ($documents as $item) {
            if ($item->is_mandatory == 1) {
                $document = 'doc_' . $item->id;
                $image = 'file_' . $item->id;
                if ($request->$document == null || $request->$image == null) {
                    return $item;
                }
            }
        }
        return true;
    }

    public function validateUpdateDocuments($request, $documentsmodule_id, $id)
    {
        $documents = $this->getDocumentConfigsByModule($documentsmodule_id, $id);
        foreach ($documents as $item) {
            if ($item->is_mandatory == 1) {
                $existingimage = 'hdDocumentImg_' . $item->id;
                $document = 'doc_' . $item->id;
                $image = 'file_' . $item->id;
                if ($request->$document == null || ($request->$existingimage == null ? $request->$image : $request->$existingimage) == null) {
                    return $item;
                }
            }
        }
        return true;
    }

    public function getDocumentsByModule($documentsmodule_id)
    {
        $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
            ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
            ->where('documentmodule_id', $documentsmodule_id)->where('document_configs.is_active', 1)
            ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name')
            ->get();

        return $documents;
    }
    public function getDocumentConfigsByModule($documentsmodule_id, $id)
    {
        $documents = [];
        switch ($documentsmodule_id) {
            case DocumentModulesType::Hub:
                $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
                    ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
                    ->join('hub_documents', 'hub_documents.documentconfig_id', 'document_configs.id')
                    ->where('document_configs.documentmodule_id', $documentsmodule_id)->where('hub_documents.hub_id', $id)
                    ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name', 'hub_documents.document_number', 'hub_documents.document_path')
                    ->get();
                break;
            case DocumentModulesType::Employee:
                $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
                    ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
                    ->join('employee_documents', 'employee_documents.documentconfig_id', 'document_configs.id')
                    ->where('document_configs.documentmodule_id', $documentsmodule_id)->where('employee_documents.employee_id', $id)
                    ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name', 'employee_documents.document_number', 'employee_documents.document_path')
                    ->get();
                break;
            case DocumentModulesType::Manufacturer:
                $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
                    ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
                    ->join('manufacturer_documents', 'manufacturer_documents.documentconfig_id', 'document_configs.id')
                    ->where('document_configs.documentmodule_id', $documentsmodule_id)->where('manufacturer_documents.manufacture_id', $id)
                    ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name', 'manufacturer_documents.document_number', 'manufacturer_documents.document_path')
                    ->get();
                break;
            case DocumentModulesType::Logistic:
                $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
                    ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
                    ->join('logistic_partner_documents', 'logistic_partner_documents.documentconfig_id', 'document_configs.id')
                    ->where('document_configs.documentmodule_id', $documentsmodule_id)->where('logistic_partner_documents.logistic_partner_id', $id)
                    ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name', 'logistic_partner_documents.document_number', 'logistic_partner_documents.document_path')
                    ->get();
                break;
            case DocumentModulesType::DeliveryPerson:
                $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
                    ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
                    ->join('delivery_people_documents', 'delivery_people_documents.documentconfig_id', 'document_configs.id')
                    ->where('document_configs.documentmodule_id', $documentsmodule_id)->where('delivery_people_documents.delivery_people_id', $id)
                    ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name', 'delivery_people_documents.document_number', 'delivery_people_documents.document_path')
                    ->get();
                break;
            default:
                $documents = [];
        }
        return $documents;
    }

    public function Log($transaction_name, $mode, $log_message, $user_id, $ip_address, $system_name, $is_app = 0)
    {
        Log::create([
            'transaction_name' => $transaction_name,
            'mode' => $mode,
            'log_message' => $log_message,
            'user_id' => $user_id,
            'ip_address' => $ip_address,
            'system_name' =>  $system_name,
            'is_app' =>  $is_app,
            'log_date' => Carbon::now()
        ]);
    }

    public function chkUserFilePermission()
    {
        $currentRouteName = Route::currentRouteName();
        $menu = Menu::where('menu_url', '/' . $currentRouteName)->first();
        if ($menu) {
            $chkUserFilePermission = UserRolePermission::select('is_edit', 'is_delete', 'is_view', 'is_print', 'is_approval')->where('user_id', Auth::user()->id)
                ->where('menu_id', $menu->id)
                ->first();
            return $chkUserFilePermission;
        }
    }
}
