<?php

namespace App\Http\Controllers\Admin\HubManagement;

use App\Enums\DocumentModulesType;
use App\Http\Controllers\Controller;
use App\Models\Area;
use App\Models\BillNoSetting;
use App\Models\City;
use App\Models\Hub;
use App\Models\HubDocuments;
use App\Models\HubManufactureConfig;
use App\Models\Manufacturer;
use App\Models\State;
use App\Traits\Common;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use App\Models\FuelType;
use App\Models\HubVehicleInfo;
use App\Models\VehicleBrand;
use App\Models\VehicleType;

class HubController extends Controller
{
    use Common;
    public function hub($id = NULL)
    {
        try {
            $manufacture = Manufacturer::all();
            $documents = $this->getDocumentsByModule(DocumentModulesType::Hub);
            $states = State::orderBy('state_name', 'ASC')->get();
            if ($id) {
                $hub = Hub::find($id);
                $cities = City::where('state_id', $hub->state_id)->get();
                $areas = Area::where('city_id', $hub->city_id)->get();
                $hubconfiq = HubManufactureConfig::where('hub_id', $id)->pluck('manufacturer_id')->toArray();
                $hubExample = $hub->hub_code;
                $bindDocuments = $this->getDocumentConfigsByModule(DocumentModulesType::Hub, $id);
                return view('admin.hub_management.hub', compact('states', 'bindDocuments', 'documents', 'hub', 'hubExample', 'hubconfiq', 'cities', 'areas', 'manufacture'));
            }

            $hub =  null;
            $bindDocuments = "";
            $data = BillNoSetting::first();
            $fueltypes = FuelType::all();
            $vehicletypes = VehicleType::all();
            $vehiclebrands = VehicleBrand::all();
            $hubPrefix = $data->hub_prefix ?? 0;
            $hubLength = $data->hub_length ?? 0;
            $hubLive = (int)($data->hub_live ?? 0) + 1;
            if ($hubLive) {
                $hubNumber = $hubLive;
            }
            $hubs = sprintf("%0{$hubLength}d", $hubNumber);
            $hubExample = $hubPrefix . $hubs;
            $states = State::orderBy('state_name', 'ASC')->get();
            $hubconfiq = HubManufactureConfig::where('hub_id', $id)->pluck('manufacturer_id')->toArray();
            return view('admin.hub_management.hub', compact('states', 'hub', 'bindDocuments', 'documents', 'hubconfiq', 'hubExample', 'manufacture', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function hubCreate(Request $request)
    {
        DB::beginTransaction();
        try {
            $request->validate([
                "txthubId" => 'required',
                "txthubName" => 'required',
                "ddlManufacturerName" => 'required',
                "txtYrsofExp" => 'required',
                "txtMobile" => 'required|numeric|digits:10|unique:hubs,mobile',
                "txtofficialEmail" => 'required|email|unique:hubs,official_email',
                "txtlatitude" => 'required',
                "txtlangtitute" => 'required',
                "txtgeolocation" => 'required',
                "txtRadius" => 'required',
                "txtcreditPeriod" => 'required',
                "txtsettlementPeriod" => 'required',
                "txtsecurityDeposit" => 'required',
                'password' => 'required|min:6|confirmed',
                "ddlState" => 'required',
                "ddlCity" => 'required',
                "ddlArea" => 'required',
                "txtLandmark" => 'required',
                "txtpinCode" => 'required',
                "txtProprietorName" => 'required',
                "txtProprietorMobile" => 'required|numeric|digits:10|unique:hubs,proprietor_mobile',
                "txtProprietorEmail" => 'required|email|unique:hubs,proprietor_email',
                "txtContactPersonName" => 'required',
                "txtContactPersonMobile" => 'required|numeric|digits:10|unique:hubs,contact_person_mobile',
                "txtContactPersonEmail" => 'required|email|unique:hubs,contact_person_email'
            ]);
            //Validate the documents for hub
            $is_valid = $this->validateDocuments($request, DocumentModulesType::Hub);

            if (isset($is_valid->documenttype_name)) {
                $notification = array(
                    'message' => $is_valid->documenttype_name . ' Required',
                    'alert-type' => 'error'
                );
                return redirect()->route('hub')->with($notification);
            }
            $data = $request->all();
            $last_inserted_hub_id = Hub::insertGetId([
                "hub_code" => $request->txthubId,
                "hub_name" => $request->txthubName,
                "years_of_experience" => $request->txtYrsofExp,
                "mobile" => $request->txtMobile,
                "official_email" => $request->txtofficialEmail,
                "latitude" => $request->txtlatitude,
                "longtitude" => $request->txtlangtitute,
                "geo_location" => $request->txtgeolocation,
                "radius" => $request->txtRadius,
                "credit_period" => $request->txtcreditPeriod,
                "settlement_period" => $request->txtsettlementPeriod,
                "security_deposit" => $request->txtsecurityDeposit,
                'password' => Hash::make($request->password),
                "state_id" => $request->ddlState,
                "city_id" => $request->ddlCity,
                "area_id" => $request->ddlArea,
                "address" => $request->txtLandmark,
                "pincode" => $request->txtpinCode,
                "is_active" => 1,
                "proprietor_name" => $request->txtProprietorName,
                "proprietor_mobile" => $request->txtProprietorMobile,
                "proprietor_email" => $request->txtProprietorEmail,
                "contact_person_name" => $request->txtContactPersonName,
                "contact_person_mobile" => $request->txtContactPersonMobile,
                "contact_person_email" => $request->txtContactPersonEmail,
                'created_by' => Auth::user()->id
            ]);

            foreach ($data['ddlManufacturerName'] as $value) {
                HubManufactureConfig::create([
                    'hub_id' => $last_inserted_hub_id,
                    'manufacturer_id' => $value
                ]);
            }

            $documents = $this->getDocumentsByModule(DocumentModulesType::Hub);

            //Create hub documents in create mode
            $this->createHubDocuments($request, $documents, $last_inserted_hub_id);

            //Increase hublive count in settings table
            $this->UpdateLiveCount(DocumentModulesType::Hub, 1);

            //Create hub user account for login
            $this->createUser(
                $request->txtMobile,
                $request->txtofficialEmail,
                $request->password,
                $last_inserted_hub_id,
                $request->txthubName,
                $request->txtMobile,
                4,
                1,
                Auth::user()->id
            );

            DB::commit(); // Commit the transaction
            $notification = array(
                'message' => 'Hub Created Successfully',
                'alert-type' => 'success'
            );
            return redirect()->route('hub-list')->with($notification);
        } catch (\Exception $e) {
            DB::rollback(); // Roll back the transaction if an error occurs
            $notification = array(
                'message' => 'Something Went Wrong!',
                'alert-type' => 'success'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
            return redirect()->route('hub')->with($notification);
        }
    }

    public function hubUpdate(Request $request)
    {
        DB::beginTransaction();
        try {
            $request->validate([
                "txthubId" => 'required',
                "txthubName" => 'required',
                "ddlManufacturerName" => 'required',
                "txtYrsofExp" => 'required',
                "txtMobile" => 'required|numeric|digits:10|unique:hubs,mobile,' . $request->id,
                "txtofficialEmail" => 'required|email|unique:hubs,official_email,' . $request->id,
                "txtlatitude" => 'required',
                "txtlangtitute" => 'required',
                "txtgeolocation" => 'required',
                "txtRadius" => 'required',
                "txtcreditPeriod" => 'required',
                "txtsettlementPeriod" => 'required',
                "txtsecurityDeposit" => 'required',
                'password' => 'required|min:6|confirmed',
                "ddlState" => 'required',
                "ddlCity" => 'required',
                "ddlArea" => 'required',
                "txtLandmark" => 'required',
                "txtpinCode" => 'required',
                "txtProprietorName" => 'required',
                "txtProprietorMobile" => 'required|numeric|digits:10|unique:hubs,proprietor_mobile,' . $request->id,
                "txtProprietorEmail" => 'required|email|unique:hubs,proprietor_email,' . $request->id,
                "txtContactPersonName" => 'required',
                "txtContactPersonMobile" => 'required|numeric|digits:10|unique:hubs,contact_person_mobile,' . $request->id,
                "txtContactPersonEmail" => 'required|email|unique:hubs,contact_person_email,' . $request->id
            ]);

            //Validate the documents for hub
            $is_valid = $this->validateUpdateDocuments($request, DocumentModulesType::Hub, $request->id);

            if (isset($is_valid->documenttype_name)) {
                $notification = array(
                    'message' => $is_valid->documenttype_name . ' Required',
                    'alert-type' => 'error'
                );
                return redirect()->route('hub', $request->id)->with($notification);
            }

            $data = $request->all();
            Hub::findorfail($request->id)->update([
                "hub_code" => $request->txthubId,
                "hub_name" => $request->txthubName,
                "years_of_experience" => $request->txtYrsofExp,
                "mobile" => $request->txtMobile,
                "official_email" => $request->txtofficialEmail,
                "latitude" => $request->txtlatitude,
                "longtitude" => $request->txtlangtitute,
                "geo_location" => $request->txtgeolocation,
                "radius" => $request->txtRadius,
                "credit_period" => $request->txtcreditPeriod,
                "settlement_period" => $request->txtsettlementPeriod,
                "security_deposit" => $request->txtsecurityDeposit,
                'password' => Hash::make($request->password),
                "state_id" => $request->ddlState,
                "city_id" => $request->ddlCity,
                "area_id" => $request->ddlArea,
                "address" => $request->txtLandmark,
                "pincode" => $request->txtpinCode,
                "proprietor_name" => $request->txtProprietorName,
                "proprietor_mobile" => $request->txtProprietorMobile,
                "proprietor_email" => $request->txtProprietorEmail,
                "contact_person_name" => $request->txtContactPersonName,
                "contact_person_mobile" => $request->txtContactPersonMobile,
                "contact_person_email" => $request->txtContactPersonEmail,
                'updated_by' => Auth::user()->id
            ]);

            HubManufactureConfig::where('hub_id', $request->id)->delete();
            foreach ($data['ddlManufacturerName'] as $value) {
                HubManufactureConfig::Create([
                    'hub_id' => $request->id,
                    'manufacturer_id' => $value
                ]);
            }

            $documents = $this->getDocumentConfigsByModule(DocumentModulesType::Hub, $request->id);

            $nullDocuments = $this->getDocumentsByModule(DocumentModulesType::Hub);

            foreach ($documents as $doc) {
                if ($request->hasFile('file_' . $doc->id)) {
                    @unlink($doc->document_path);
                }
            }

            HubDocuments::where('hub_id', $request->id)->delete();

            //Create hub documents in edit mode
            $this->createHubDocuments($request, $documents == null ? $documents : $nullDocuments, $request->id);


            DB::commit(); // Commit the transaction
            $notification = array(
                'message' => 'Hub Updated Successfully',
                'alert-type' => 'success'
            );
        } catch (\Exception $e) {
            DB::rollback(); // Roll back the transaction if an error occurs
            $notification = array(
                'message' => 'Something Went Wrong!',
                'alert-type' => 'success'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
            return redirect()->route('hub')->with($notification);
        }

        return redirect()->route('hub-list')->with($notification);
    }

    private function createHubDocuments(Request $request, $documents, $hub_id)
    {
        try {
            foreach ($documents as $doc) {
                if ($request->hasFile('file_' . $doc->id)) {
                    $path = $request->file('file_' . $doc->id)->store('temp');
                    $file = $request->file('file_' . $doc->id);
                    $extension = $file->getClientOriginalExtension();
                    $fileName = $this->generateRandom(16) . '.' . $extension;
                }
                $doc_no = 'doc_' . $doc->id;
                $existingfile_path = 'hdDocumentImg_' . $doc->id;
                HubDocuments::create([
                    'hub_id' => $hub_id,
                    'documentconfig_id' => $doc->id,
                    'document_path' => ($request->hasFile('file_' . $doc->id)) ? $this->fileUpload($file, 'upload/hubs/' . $request->txthubId, $fileName) : ($request->$existingfile_path == null ? '' : $request->$existingfile_path),
                    'document_number' => $request->$doc_no
                ]);
            }
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }

    public function deleteHub($id)
    {
        try {
            $hub = Hub::findorfail($id);
            $hub->delete();

            $hub->Update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Hub Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (QueryException $e) {

            $notification = array(
                'message' => 'Hub could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function activeHubStatus($id, $status)
    {
        DB::beginTransaction();
        try {
            Hub::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function hubList()
    {
        try {
            $states = State::orderBy('state_name', 'ASC')->get();
            return view('admin.hub_management.hublist', compact('states'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function hubData(Request $request)
    {
        try {
            $hubData = "";
            $query = Hub::join('hub_manufacture_configs', 'hub_manufacture_configs.hub_id', 'hubs.id')
                ->join('manufacturers', 'manufacturers.id', 'hub_manufacture_configs.manufacturer_id')
                ->select('hubs.*', 'manufacturers.manufacturer_name')
                ->groupby('hub_manufacture_configs.hub_id')
                ->distinct();

            if ($request->state_id > 0) {
                $query = $query->where('hubs.state_id', $request->state_id);
            }
            if ($request->city_id > 0) {
                $query = $query->where('hubs.city_id', $request->city_id);
            }
            if ($request->area_id > 0) {
                $query = $query->where('hubs.area_id', $request->area_id);
            }

            $hubData = $query->get();

            return datatables()->of($hubData)
                ->addColumn('action', function ($row) {
                    $html = '<a href="hub/' . $row->id . '"><i class="text-primary ti ti-pencil me-1"></i></a> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confirm-color' . $row->id . '" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function hubDocument()
    {
        try {
            return view('admin.hub_management.hub_document');
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function addVehicleInfo(Request $request)
    {

        for ($i = 0; $i < count($request->fuel); $i++) {
            $fueltype = $request->fuel[$i];
            $vehicletype = $request->vehicleType[$i];
            $vehiclebrand = $request->vehicleBrand[$i];
            $regNo = $request->regNo[$i];

            HubVehicleInfo::create([
                'fuel_type_id' => $fueltype,
                'vehicle_type_id' => $vehicletype,
                'vehicle_brand_id' => $vehiclebrand,
                'reg_no' => $regNo,
            ]);
        }
    }
}
