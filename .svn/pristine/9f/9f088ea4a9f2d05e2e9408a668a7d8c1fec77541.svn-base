<?php

namespace App\Http\Controllers\Admin\Settings;

use App\Enums\MenuPermissionType;
use App\Http\Controllers\Controller;
use App\Models\NotificationConfig;
use App\Models\NotificationType;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class NotificationConfigController extends Controller
{
    use Common;
    public function notificationConfig()
    {
        try {
            $notificationType = NotificationType::get();
            return view('admin.settings.notification_config', compact('notificationType'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function addNotificationConfig(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'ddlNotificationType' => [
                'required',
                Rule::unique('notification_configs', 'notification_type_id')
                    ->whereNull('deleted_by')
                    ->ignore($request->hdNotificationConfigId),
            ],
            'txtMessageFormat' => [
                'required',
                Rule::unique('notification_configs', 'msg_format')
                    ->whereNull('deleted_by')
                    ->ignore($request->hdNotificationConfigId),
            ],
        ], [
            'ddlNotificationType.unique' => 'Notification Type already exists.',
            'txtMessageFormat.unique' => 'Message Format already exists.',
        ]);

        if ($validator->fails()) {
            return redirect()->back()->withInput()->withErrors($validator);
        }

        try {
            if ($request->hdNotificationConfigId == null) {

                NotificationConfig::create([
                    'notification_type_id' => $request->ddlNotificationType,
                    'msg_format' => $request->txtMessageFormat,
                    'created_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Notification Type Created Successfully',
                    'alert-type' => 'success'
                );
            } else {

                NotificationConfig::findorfail($request->hdNotificationConfigId)->update([
                    'notification_type_id' => $request->ddlNotificationType,
                    'msg_format' => $request->txtMessageFormat,
                    'updated_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Notification Type Updated Successfully',
                    'alert-type' => 'success'
                );
            }
        } catch (\Exception $e) {
            $notification = array(
                'message' => 'Notification Type Already Exists!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
        return redirect()->back()->with($notification);
    }

    public function getNotificationConfigData()
    {

        try {
            $notificationConfigData = NotificationConfig::select('notification_configs.*', 'notification_types.`notification_type`')
                ->join('notification_types', 'notification_types.id', 'notification_configs.notification_type_id')->get();
            return datatables()->of($notificationConfigData)
                ->addColumn('action', function ($row) {
                    $html = "";
                    if ($this->isUserHavePermission(MenuPermissionType::Edit)) {
                        $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    }
                    if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
                        $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    }
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getNotificationConfigById($id)
    {
        try {
            $notificationConfig = NotificationConfig::select('notification_configs.*', 'notification_types.`notification_type`')
                ->join('notification_types', 'notification_types.id', 'notification_configs.notification_type_id')->where('notification_configs.id', $id)->first();
            return response()->json([
                'notificationConfig' => $notificationConfig
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deletegetNotificationConfig($id)
    {
        try {
            $notificationConfig = NotificationConfig::findorfail($id);
            $notificationConfig->delete();
            $notificationConfig->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Notification Config Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (\Exception $e) {

            $notification = array(
                'message' => 'Notification Config Could Not Be Deleted!',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }
}
