<?php

namespace App\Http\Controllers\Admin\Dashboard;

use App\Enums\RoleTypes;
use App\Enums\StatusTypes;
use App\Http\Controllers\Controller;
use App\Models\CustomerType;
use App\Models\DeliveryPerson;
use App\Models\Hub;
use App\Models\LogisticDriverInfo;
use App\Models\LogisticPartner;
use App\Models\Manufacturer;
use App\Models\Menu;
use App\Models\Offer;
use App\Models\Order;
use App\Models\User;
use App\Models\UserReferralHistory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\Traits\Common;
use Carbon\Carbon;
use Intervention\Image\Facades\Image;

class DashboardController extends Controller
{
  use Common;
  public function dashboard()
  {
    $now = \Carbon\Carbon::now();
    //total user count
    $totalUserCount = User::where('role_id', RoleTypes::Customer)->count();

    //total user this month count
    $thisMonthCount = User::where('role_id', RoleTypes::Customer)->whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->count();

    //total user today count
    $todayCount = User::where('role_id', RoleTypes::Customer)->whereDate('created_at', '=', $now->toDateString())
      ->count();

    //total referral user count
    $refferalUserCount = UserReferralHistory::count();

    //total referral user this month count
    $refferalthisMonthCount = UserReferralHistory::whereYear('referred_on', '=', $now->year)
      ->whereMonth('referred_on', '=', $now->month)
      ->count();

    //total referral user today count
    $refferalTodayCount = UserReferralHistory::whereDate('referred_on', '=', $now->toDateString())
      ->count();

    //total offer count
    $totaloffercount = Offer::count();

    //total today offer count
    $todayoffercount = Offer::whereDate('created_at', '=', $now->toDateString())
      ->count();

    //offer this month total count
    $offerThisMonthCount = Offer::whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->count();

    //manufacturer total count
    $manutotalcount = Manufacturer::count();

    //man today total count
    $mantodaycount = Manufacturer::whereDate('created_at', '=', $now->toDateString())
      ->count();

    //man this month total count
    $manThisMonthCount = Manufacturer::whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->count();

    //total hub count
    $totalhubcount = Hub::count();

    //today hub count
    $hubtodaycount = Hub::whereDate('created_at', '=', $now->toDateString())
      ->count();

    //this month hub count
    $hubThisMonthCount = Hub::whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->count();

    //delivery person total count
    $totaldeliverypersoncount = DeliveryPerson::count();

    //today delivery person count
    $deliverypersontodaycount = DeliveryPerson::whereDate('created_at', '=', $now->toDateString())
      ->count();

    //this month delivery person count
    $deliverypersonThisMonthCount = DeliveryPerson::whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->count();

    //logistic partner total count
    $totallogisticpartnercount = LogisticPartner::count();

    //today logistic partner count
    $logisticpartnertodaycount = LogisticPartner::whereDate('created_at', '=', $now->toDateString())
      ->count();

    //this month logistic partner count
    $logisticpartnerThisMonthCount = LogisticPartner::whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->count();

    //Driver total count
    $totallogisticdrivercount = LogisticDriverInfo::count();

    //today Driver count
    $logisticdrivertodaycount = LogisticDriverInfo::whereDate('created_at', '=', $now->toDateString())
      ->count();

    //this month Driver count
    $logisticdriverThisMonthCount = LogisticDriverInfo::whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->count();

    //Total Order Count
    $totalOrdersCount = Order::count();

    //Today Order Count
    $todayOrdersCount = Order::whereDate('created_at', '=', $now->toDateString())
      ->count();

    //This Month Order Count
    $thisMonthOrdersCount = Order::whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->count();

    //Total Earnings
    $totalEarnings = Order::whereIn('status_id', [StatusTypes::OrderPlaced, StatusTypes::OrderShipped, StatusTypes::OrderDelivered])
      ->sum('grand_total');

    //Today Earnings
    $todayEarnings = Order::whereIn('status_id', [StatusTypes::OrderPlaced, StatusTypes::OrderShipped, StatusTypes::OrderDelivered])
      ->whereDate('created_at', '=', $now->toDateString())
      ->sum('grand_total');

    //This Month Earnings
    $thisMonthEarnings = Order::whereIn('status_id', [StatusTypes::OrderPlaced, StatusTypes::OrderShipped, StatusTypes::OrderDelivered])
      ->whereYear('created_at', '=', $now->year)
      ->whereMonth('created_at', '=', $now->month)
      ->sum('grand_total');

    return view('admin.dashboard.dashboard', compact(
      'totalUserCount',
      'thisMonthCount',
      'todayCount',
      'refferalUserCount',
      'refferalthisMonthCount',
      'refferalTodayCount',
      'totaloffercount',
      'todayoffercount',
      'offerThisMonthCount',
      'manutotalcount',
      'mantodaycount',
      'manThisMonthCount',
      'totalhubcount',
      'hubtodaycount',
      'hubThisMonthCount',
      'totaldeliverypersoncount',
      'deliverypersontodaycount',
      'deliverypersonThisMonthCount',
      'totallogisticpartnercount',
      'logisticpartnertodaycount',
      'logisticpartnerThisMonthCount',
      'totallogisticdrivercount',
      'logisticdrivertodaycount',
      'logisticdriverThisMonthCount',
      'totalOrdersCount',
      'todayOrdersCount',
      'thisMonthOrdersCount',
      'totalEarnings',
      'todayEarnings',
      'thisMonthEarnings'
    ));
  }

  //common function need
  public function getAdminRecentOrdersdata(Request $request)
  {
    try {

      $totalorders = $this->getAllOrders()->latest()->take(10)->get();
      return datatables()->of($totalorders)->toJson();
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function getRegisteredUsers($criteria)
  {
    $users = [];

    switch ($criteria) {
      case 'total':
        $users = User::all();
        break;

      case 'today':
        $users = User::whereDate('created_at', Carbon::today())->get();
        break;

      case 'thismonth':
        $users = User::whereYear('created_at', Carbon::now()->year)
          ->whereMonth('created_at', Carbon::now()->month)
          ->get();
        break;

      default:
        break;
    }

    $customer_types = CustomerType::get();
    $states = $this->getStates();
    $hubs = Hub::get();

    return view('admin.dashboard.registered-users', ['users' => $users], compact('customer_types', 'states', 'hubs'));
  }

  public function profile()
  {
    $profiledetails = Auth::user();
    return view('admin.dashboard.profile', compact('profiledetails'));
  }

  public function unauthorized()
  {
    return view('unauthorized');
  }

  public function pageNotFound()
  {
    return view('404');
  }

  public function ProfileUpdate(Request $request)
  {

    $request->validate([
      'txtUserName' => 'required',
      'txtMobile' => 'required|numeric|digits:10|unique:users,mobile,' . $request->hdProfileId,
    ]);

    if ($request->file('ProfileImage')) {
      $path = $request->file('ProfileImage')->store('temp');
      $file = $request->file('ProfileImage');
      $extension = $file->getClientOriginalExtension();
      $fileName = $this->generateRandom(16) . '.' . $extension;
    }

    User::findorFail($request->hdProfileId)->update([
      'user_name' => $request->txtUserName,
      'mobile' => $request->txtMobile,
      'user_img_path' => ($request->hasFile('ProfileImage')) ? $this->fileUpload($file, 'upload/users/' . $request->hdProfileId, $fileName) : $request->hdProfileImg,
      'updated_by' => Auth::user()->id
    ]);

    if ($request->filled('txtPassword')) {
      $password = Hash::make($request->txtPassword);
      User::findorFail($request->hdProfileId)->update([
        'password' => $password
      ]);
    }


    $notification = array(
      'message' => 'Profile Updated Successfully',
      'alert-type' => 'success'
    );
    return redirect()->route('profile')->with($notification);
  }
}
