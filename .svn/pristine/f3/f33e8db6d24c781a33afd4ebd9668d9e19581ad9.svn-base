<?php

namespace App\Http\Controllers\Admin\ProductsManagement;

use App\Http\Controllers\Controller;
use App\Models\Brands;
use App\Models\Category;
use App\Models\Products;
use App\Models\ProductType;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Intervention\Image\Facades\Image;

class ProductsController extends Controller
{
    public function products(Request $request)
    {
        $categories = Category::get();
        $product_types = ProductType::get();
        $brands = Brands::get();
        return view('admin.product_management.products.products', compact('categories', 'product_types', 'brands'));
    }

    public function addProducts(Request $request)
    {
        $request->validate([
            'ddlCategory' => 'required',
            'ddlProducttype' => 'required',
            'ddlBrand' => 'required',
            'txtProductName' => 'required',
            'txtCustomerPrice' => 'required',
            'txtWholesalePrice' => 'required',
            'canreturn' => 'required',
            'txtCapacity' => 'required',
            'txtDescription' => 'required',
            'txtCgst' => 'required',
            'txtSgst' => 'required',
            'productImage' => 'required'

        ]);

        if ($request->hdProductId == null) {
            $user = Auth::user()->id;
            $image = $request->file('productImage');
            $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
            image::make($image)->save('upload/products/' . $name_gen);
            $save_url = 'upload/products/' . $name_gen;

            Products::create([
                'category_id' => $request->ddlCategory,
                'product_type_id' => $request->ddlProducttype,
                'brand_id' => $request->ddlBrand,
                'product_name' => $request->txtProductName,
                'customer_price' => $request->txtCustomerPrice,
                'wholesale_price' => $request->txtWholesalePrice,
                'is_emptycan_return' => ($request->canreturn == null ? 0 : 1),
                'capacity' => $request->txtCapacity,
                'desc' => $request->txtDescription,
                'CGST' => $request->txtCgst,
                'SGST' => $request->txtSgst,
                'product_image' => $save_url,
                'created_by' => $user
            ]);
        } else {
            $images = $request->file('productImage');
            $name_gen = hexdec(uniqid()) . '.' . $images->getClientOriginalExtension();
            image::make($images)->save('upload/products/' . $name_gen);
            $save_url = 'upload/products/' . $name_gen;
            Products::findorfail($request->hdProductId)->update([
                'category_id' => $request->ddlCategory,
                'product_type_id' => $request->ddlProducttype,
                'brand_id' => $request->ddlBrand,
                'product_name' => $request->txtProductName,
                'customer_price' => $request->txtCustomerPrice,
                'wholesale_price' => $request->txtWholesalePrice,
                'is_emptycan_return' => ($request->canreturn == null ? 0 : 1),
                'capacity' => $request->txtCapacity,
                'desc' => $request->txtDescription,
                'CGST' => $request->txtCgst,
                'SGST' => $request->txtSgst,
                'product_image' => $save_url
            ]);
        }

        $notification = array(
            'message' => 'Product Created Successfully',
            'alert-type' => 'success'
        );
        return redirect()->route('products')->with($notification);
    }

    public function getProductsData(Request $request)
    {
        $productsData = Products::select('products.*', 'categories.category_name', 'product_types.product_type_name', 'brands.brand_name')
            ->join('categories', 'categories.id', 'products.category_id')
            ->join('product_types', 'product_types.id', 'products.product_type_id')
            ->join('brands', 'brands.id', 'products.brand_id')->get();

        return datatables()->of($productsData)
            ->addColumn('action', function ($row) {
                $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                $html .= '<a href="delete/products/' . $row->id . '">
                <i class="text-danger ti ti-trash me-1" id="confrim-text"></i>
            </a>';
                return $html;
            })->toJson();
    }

    public function getProductsById($id)
    {
        $products = Products::select('products.*')->where('products.id', $id)->first();
        return response()->json([
            'products' => $products
        ]);
    }

    public function deleteProducts($id)
    {
        $products = Products::findorfail($id);
        $products->delete();
        $notification = array(
            'message' => 'Products Deleted Successfully',
            'alert-type' => 'success'
        );
        return redirect()->route('products')->with($notification);
    }

}
