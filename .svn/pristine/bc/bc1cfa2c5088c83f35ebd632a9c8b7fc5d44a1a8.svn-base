<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Http\Controllers\Controller;
use App\Models\Brands;
use App\Models\City;
use App\Models\State;
use App\Models\StateBrandAllocation;
use App\Traits\Common;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class AllocationController extends Controller
{
    use Common;
    public function allocation()
    {
        try {
            $states = State::get();
            $cities = City::get();
            $brands = Brands::whereNull('deleted_at')->get();
            return view('admin.masters.allocation.allocation', compact('states', 'cities', 'brands'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function addBrandallocate(Request $request)
    {
        if ($request->chkBrandName == null) {
            $notification = array(
                'message' => 'Please Choose Brand Name!',
                'alert-type' => 'error'
            );
            return redirect()->route('allocations')->with($notification);
        }
        $request->validate([
            'ddlState' => 'required',
            'ddlCity' => 'required',
            'chkBrandName' => 'required'
        ]);

        DB::beginTransaction();
        try {

            if ($request->hdBrandAllocateId == null) {
                $array = $request->chkBrandName;
                $string = implode(',', $array);
                StateBrandAllocation::create([
                    'state_id' => $request->ddlState,
                    'city_id' => $request->ddlCity ?? 0,
                    'brand_id' => $string,
                    'created_by' => Auth::user()->id
                ]);
                $notification = array(
                    'message' => 'Brands Allocated Successfully',
                    'alert-type' => 'success'
                );
            } else {
                $array = $request->chkBrandName;
                $string = implode(',', $array);
                StateBrandAllocation::findorfail($request->hdBrandAllocateId)->update([
                    'state_id' => $request->ddlState,
                    'city_id' => ($request->ddlCity == null ? 0 : $request->ddlCity),
                    'brand_id' => $string,
                    'updated_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Brands Allocation Updated Successfully',
                    'alert-type' => 'success'
                );
            }

            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Area Not Created!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
        return redirect()->route('allocations')->with($notification);
    }

    public function getBrandallocateById($id)
    {
        try {
            $brandallocation = StateBrandAllocation::select('state_brand_allocations.*', 'states.state_name', 'cities.city_name', 'brands.brand_name')
                ->join('states', 'states.id', 'state_brand_allocations.state_id')
                ->join('cities', 'cities.id', 'state_brand_allocations.city_id')
                ->join('brands', 'brands.id', 'state_brand_allocations.brand_id')->where('state_brand_allocations.id', $id)->first();
            return response()->json([
                'brandallocation' => $brandallocation
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteBrandallocate($id)
    {
        try {
            $area = StateBrandAllocation::findorfail($id);
            $area->delete();
            $area->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Brands Allocation Deleted Successfully!',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (QueryException $e) {

            $notification = array(
                'message' => 'Brands Allocation Could Not Be Deleted!',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function getBrandallocateData()
    {
        try {
            $brandallocation = StateBrandAllocation::select('state_brand_allocations.*', 'states.state_name', 'cities.city_name', 'brands.brand_name')
                ->join('states', 'states.id', 'state_brand_allocations.state_id')
                ->join('cities', 'cities.id', 'state_brand_allocations.city_id')
                ->join('brands', 'brands.id', 'state_brand_allocations.brand_id')->get();

            return datatables()->of($brandallocation)
                ->addColumn('action', function ($row) {
                    $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" 
                onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
