<?php

namespace App\Http\Controllers\Admin\ProductsManagement;

use App\Http\Controllers\Controller;
use App\Models\Brands;
use App\Models\ProductType;
use App\Traits\Common;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Intervention\Image\Facades\Image;

class BrandsController extends Controller
{
    use Common;
    public function brands()
    {
        try {
            $producttype = ProductType::where('is_active', 1)->get();
            return view('admin.product_management.brands.brands',compact('producttype'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function addBrands(Request $request)
    {
        DB::beginTransaction();
        try {
            if ($request->hdBrandId == null) {

                $request->validate([
                    'ddlproductType' => 'required',
                    'txtBrantsName' => 'required',
                    'BrandsImage' => 'required'
                ]);
                
                $image = $request->file('BrandsImage');
                $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
                image::make($image)->save('upload/brands/' . $name_gen);
                $save_url = 'upload/brands/' . $name_gen;

                Brands::create([
                    'producttype_id' => $request->ddlproductType,
                    'brand_name' => $request->txtBrantsName,
                    'brand_image' => $save_url,
                    'created_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Brands Created Successfully',
                    'alert-type' => 'success'
                );
            } else {

                $oldImage = $request->hdBrandImg;

                if ($request->file('BrandsImage')) {
                    @unlink($oldImage);
                    $image = $request->file('BrandsImage');
                    $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
                    Image::make($image)->save('upload/brands/' . $name_gen);
                    $save_url = 'upload/brands/' . $name_gen;

                    Brands::findorfail($request->hdBrandId)->update([
                        'brand_image' => $save_url,
                        'updated_by' => Auth::user()->id
                    ]);
                }

                Brands::findorfail($request->hdBrandId)->update([
                    'producttype_id' => $request->ddlproductType,
                    'brand_name' => $request->txtBrantsName,
                    'updated_by' => Auth::user()->id
                ]);

                $notification = array(
                    'message' => 'Brands Updated Successfully',
                    'alert-type' => 'success'
                );
            }

            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Brand Not Created!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
        return redirect()->route('brands')->with($notification);
    }

    public function getBrandsData(Request $request)
    {
        try {
            $departmentData = Brands::select('brands.*', 'product_types.product_type_name')
            ->join('product_types', 'product_types.id','brands.producttype_id')->whereNull('brands.deleted_at')
            ->get();

            return datatables()->of($departmentData)
                ->addColumn('action', function ($row) {
                    $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getBrandsById($id)
    {
        try {
            $brand = Brands::select('brands.*')->where('brands.id', $id)->whereNull('brands.deleted_at')->first();
            return response()->json([
                'brand' => $brand
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteBrands($id)
    {
        try {
            $brands = Brands::findorfail($id);
            $brands->delete();
            $brands->update([
                'deleted_by' => Auth::user()->id
            ]);
            $notification = array(
                'message' => 'Brands Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (QueryException $e) {

            $notification = array(
                'message' => 'Brands could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function activeStatus($id, $status)
    {
        DB::beginTransaction();
        try {
            Brands::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
