<?php

namespace App\Http\Controllers;

use App\Enums\NotificationTypes;
use App\Models\CustomerAddress;
use App\Models\NotificationConfig;
use App\Models\NotificationType;
use App\Models\NotificationTypeVariables;
use App\Models\Order;
use App\Models\OrderDet;
use App\Traits\Common;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use NumberFormatter;

class invoicecontroller extends Controller
{
    use Common;
    //for invoice testing pdf
    public function invoice()
    {
        $order = Order::find(47);

        $data_msg = NotificationConfig::where('notification_type_id', NotificationTypes::OrderPlaced)->first();
        $notificationVariable = NotificationTypeVariables::where('notification_type_id', NotificationTypes::OrderPlaced)->pluck('variables')->toArray();
        $updatedMessage = str_replace($notificationVariable, [$order->order_no], $data_msg->notification_msg_format);
        $notification = [
            'title' => 'Order Placed',
            'body' => $updatedMessage,
        ];
        $data = [
            'order_id' => $order->order_no,
            'type' => 'order'
        ];

        dd($updatedMessage);

        $invoice_no = "12345";
        $order = Order::find(47);
        $orderDet = OrderDet::select('order_dets.*', 'products.product_name', 'products.CGST', 'products.SGST', 'products.hsn_sac_code')
            ->join('products', 'products.id', 'order_dets.product_id')
            ->where('order_id', $order->id)
            ->get();
        $companyDetails = $this->getAdminSetting();
        // dd($order);

        $address = json_encode($order->delivery_address);
        $deliveryAddress = json_decode($address, true);
        $amount_in_words = $this->numberToWord($order->grand_total) . 'Rupees Only';
        // dd($deliveryAddress);

        // Generate the HTML content for the invoice
        return view('invoice.invoice', compact('order', 'orderDet', 'companyDetails', 'deliveryAddress', 'invoice_no', 'amount_in_words'))->render();
    }

    /**
     * Write code on Method
     *
     * @return response()
     */
    public function numberToWord($num = '')
    {
        $num    = (string) ((int) $num);

        if ((int) ($num) && ctype_digit($num)) {
            $words  = array();

            $num    = str_replace(array(',', ' '), '', trim($num));

            $list1  = array(
                '', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',
                'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen',
                'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'
            );

            $list2  = array(
                '', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty',
                'seventy', 'eighty', 'ninety', 'hundred'
            );

            $list3  = array(
                '', 'thousand', 'million', 'billion', 'trillion',
                'quadrillion', 'quintillion', 'sextillion', 'septillion',
                'octillion', 'nonillion', 'decillion', 'undecillion',
                'duodecillion', 'tredecillion', 'quattuordecillion',
                'quindecillion', 'sexdecillion', 'septendecillion',
                'octodecillion', 'novemdecillion', 'vigintillion'
            );

            $num_length = strlen($num);
            $levels = (int) (($num_length + 2) / 3);
            $max_length = $levels * 3;
            $num    = substr('00' . $num, -$max_length);
            $num_levels = str_split($num, 3);

            foreach ($num_levels as $num_part) {
                $levels--;
                $hundreds   = (int) ($num_part / 100);
                $hundreds   = ($hundreds ? ' ' . $list1[$hundreds] . ' Hundred' . ($hundreds == 1 ? '' : 's') . ' ' : '');
                $tens       = (int) ($num_part % 100);
                $singles    = '';

                if ($tens < 20) {
                    $tens = ($tens ? ' ' . $list1[$tens] . ' ' : '');
                } else {
                    $tens = (int) ($tens / 10);
                    $tens = ' ' . $list2[$tens] . ' ';
                    $singles = (int) ($num_part % 10);
                    $singles = ' ' . $list1[$singles] . ' ';
                }
                $words[] = $hundreds . $tens . $singles . (($levels && (int) ($num_part)) ? ' ' . $list3[$levels] . ' ' : '');
            }
            $commas = count($words);
            if ($commas > 1) {
                $commas = $commas - 1;
            }

            $words  = implode(', ', $words);

            $words  = trim(str_replace(' ,', ',', ucwords($words)), ', ');
            if ($commas) {
                $words  = str_replace(',', ' and', $words);
            }

            return $words;
        } else if (!((int) $num)) {
            return 'Zero';
        }
        return '';
    }
}
