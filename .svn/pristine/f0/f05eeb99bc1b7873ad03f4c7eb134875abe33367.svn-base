<?php

namespace App\Http\Controllers\Admin\HubManagement;

use App\Http\Controllers\Controller;
use App\Models\Area;
use App\Models\BillNoSetting;
use App\Models\City;
use App\Models\DocumentConfig;
use App\Models\Hub;
use App\Models\HubDocuments;
use App\Models\HubManufactureConfig;
use App\Models\Manufacturer;
use App\Models\State;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class HubController extends Controller
{
    public function hub($id = NULL)
    {
        if ($id) {
            $hub = Hub::find($id);
            $states = State::all();
            $citys = City::where('state_id', $hub->state_id)->get();
            $areas = Area::where('city_id', $hub->city_id)->get();
            $hubconfiq = HubManufactureConfig::where('hub_id', $id)->pluck('manufacturer_id')->toArray();
            $hubExample = $hub->hub_id;
            $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
                ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
                ->where('documentmodule_id', 2)->where('is_active', 1)
                ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name')
                ->get();
            return view('admin.hub_management.hub', compact('states', 'documents', 'hub', 'manExample', 'hubconfiq', 'citys', 'areas', 'manufacture'));
        }

        $manufacture = Manufacturer::all();
        $data = BillNoSetting::first();
        $hubPrefix = $data->hub_prefix ?? 0;
        $hubLength = $data->hub_length ?? 0;
        $hubLive = (int)($data->hub_live ?? 0) + 1;
        if ($hubLive) {
            $hubNumber = $hubLive;
        }
        $hub = sprintf("%0{$hubLength}d", $hubNumber);
        $hubExample = $hubPrefix . $hub;
        $states = State::all();
        $hubconfiq = HubManufactureConfig::where('hub_id', $id)->pluck('manufacturer_id')->toArray();
        $documents = DocumentConfig::join('document_modules', 'document_modules.id', 'document_configs.documentmodule_id')
            ->join('document_types', 'document_types.id', 'document_configs.documenttype_id')
            ->where('documentmodule_id', 2)->where('is_active', 1)
            ->select('document_configs.*', 'document_modules.module_name', 'document_types.documenttype_name')
            ->get();
        return view('admin.hub_management.hub', compact('states', 'documents', 'hubconfiq', 'hubExample', 'manufacture'));
    }

    public function hubCreate(Request $request)
    {
        $request->validate([
            "txthubId" => 'required',
            "txthubName" => "required",
            "ddlManufacturerName" => "required",
            "txtYrsofExp" => "required",
            "txtMobile" => "required",
            "txtofficialEmail" => "required",
            "txtlatitude" => "required",
            "txtlangtitute" => "required",
            "txtgeolocation" => "required",
            "txtRadius" => "required",
            "txtcreditPeriod" => "required",
            "txtsettlementPeriod" => "required",
            "txtsecurityDeposit" => "required",
            "ddlState" => "required",
            "ddlCity" => "required",
            "ddlArea" => "required",
            "txtLandmark" => "required",
            "txtpinCode" => "required",
            "txtProprietorName" => "required",
            "txtProprietorMobile" => "required",
            "txtProprietorEmail" => "required",
            "txtContactPersonName" => "required",
            "txtContactPersonMobile" => "required",
            "txtContactPersonEmail" => "required"
        ]);
        DB::beginTransaction();
        try {
            $data = $request->all();
            $hub_data = Hub::insertGetId([
                "hub_id" => $request->txthubId,
                "hub_name" => $request->txthubName,
                "years_of_experience" => $request->txtYrsofExp,
                "mobile" => $request->txtMobile,
                "official_email" => $request->txtofficialEmail,
                "latitude" => $request->txtlatitude,
                "longtitude" => $request->txtlangtitute,
                "geo_location" => $request->txtgeolocation,
                "radius" => $request->txtRadius,
                "credit_period" => $request->txtcreditPeriod,
                "settlement_period" => $request->txtsettlementPeriod,
                "security_deposit" => $request->txtsecurityDeposit,
                "state_id" => $request->ddlState,
                "city_id" => $request->ddlCity,
                "area_id" => $request->ddlArea,
                "address" => $request->txtLandmark,
                "pincode" => $request->txtpinCode,
                "is_active" => 1,
                "proprietor_name" => $request->txtProprietorName,
                "proprietor_mobile" => $request->txtProprietorMobile,
                "proprietor_email" => $request->txtProprietorEmail,
                "contact_person_name" => $request->txtContactPersonName,
                "contact_person_mobile" => $request->txtContactPersonMobile,
                "contact_person_email" => $request->txtContactPersonEmail,
                'created_by' => Auth::user()->id
            ]);

            foreach ($data['ddlManufacturerName'] as $value) {
                HubManufactureConfig::create([
                    'hub_id' => $hub_data,
                    'manufacturer_id' => $value
                ]);
            }
           
            
            if ($request->hasFile('SGST')) {
                $path = $request->file('SGST')->store('temp');
                $file = $request->file('SGST');
                $fileName = $file->getClientOriginalName();
                $file->move(public_path('upload'), $fileName);
                $fileName = 'upload/' . $fileName;
            }
            

            $documentconfig_id = DocumentConfig::join('document_types', 'document_types.id', 'document_configs.documenttype_id')
                ->where('document_types.documenttype_name', $request->hdDocumentTypeName)->where('document_configs.documentmodule_id', 2)
                ->pluck('document_configs.id')->first();

            HubDocuments::create([
                'hub_id' => $hub_data,
                'documentconfig_id' => $documentconfig_id,
                'document_path' => $fileName,
                'document_number' => rand(0000, 9999)
            ]);

            $data = BillNoSetting::first();
            $data->hub_live = $data->hub_live + 1;
            $data->save();
            DB::commit(); // Commit the transaction
            $notification = array(
                'message' => 'Hub Created Successfully',
                'alert-type' => 'success'
            );
        } catch (\Exception $e) {
            DB::rollback(); // Roll back the transaction if an error occurs
            dd($e);
            $notification = array(
                'message' => 'Something Went Wrong!',
                'alert-type' => 'success'
            );
        }
        return redirect()->route('hub-list')->with($notification);
    }

    public function hubUpdate(Request $request)
    {
        $request->validate([
            "txthubId" => 'required',
            "txthubName" => "required",
            "ddlManufacturerName" => "required",
            "txtYrsofExp" => "required",
            "txtMobile" => "required",
            "txtofficialEmail" => "required",
            "txtlatitude" => "required",
            "txtlangtitute" => "required",
            "txtgeolocation" => "required",
            "txtRadius" => "required",
            "txtcreditPeriod" => "required",
            "txtsettlementPeriod" => "required",
            "txtsecurityDeposit" => "required",
            "ddlState" => "required",
            "ddlCity" => "required",
            "ddlArea" => "required",
            "txtLandmark" => "required",
            "txtpinCode" => "required",
            "txtProprietorName" => "required",
            "txtProprietorMobile" => "required",
            "txtProprietorEmail" => "required",
            "txtContactPersonName" => "required",
            "txtContactPersonMobile" => "required",
            "txtContactPersonEmail" => "required"
        ]);

        $data = $request->all();
        Hub::findorfail($request->id)->update([
            "hub_id" => $request->txthubId,
            "hub_name" => $request->txthubName,
            "years_of_experience" => $request->txtYrsofExp,
            "mobile" => $request->txtMobile,
            "official_email" => $request->txtofficialEmail,
            "latitude" => $request->txtlatitude,
            "longtitude" => $request->txtlangtitute,
            "geo_location" => $request->txtgeolocation,
            "radius" => $request->txtRadius,
            "credit_period" => $request->txtcreditPeriod,
            "settlement_period" => $request->txtsettlementPeriod,
            "security_deposit" => $request->txtsecurityDeposit,
            "state_id" => $request->ddlState,
            "city_id" => $request->ddlCity,
            "area_id" => $request->ddlArea,
            "address" => $request->txtLandmark,
            "pincode" => $request->txtpinCode,
            "proprietor_name" => $request->txtProprietorName,
            "proprietor_mobile" => $request->txtProprietorMobile,
            "proprietor_email" => $request->txtProprietorEmail,
            "contact_person_name" => $request->txtContactPersonName,
            "contact_person_mobile" => $request->txtContactPersonMobile,
            "contact_person_email" => $request->txtContactPersonEmail,
            'updated_by' => Auth::user()->id
        ]);

        HubManufactureConfig::where('hub_id', $request->id)->delete();
        foreach ($data['ddlManufacturerName'] as $value) {
            HubManufactureConfig::where('hub_id', $request->id)->updateorCreate([
                'hub_id' => $request->id,
                'manufacturer_id' => $value
            ]);
        }

        $notification = array(
            'message' => 'Hub Updated Successfully',
            'alert-type' => 'success'
        );
        return redirect()->route('hub-list')->with($notification);
    }

    public function deleteHub($id)
    {
        try {
            $hub = Hub::findorfail($id);
            $hub->delete();

            $hub->Update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Hub Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (QueryException $e) {

            $notification = array(
                'message' => 'Hub could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function activeHubStatus($id, $status)
    {
        Hub::findorfail($id)->update([
            'is_active' => $status,
            'updated_by' => Auth::user()->id
        ]);
    }

    public function hubList()
    {
        return view('admin.hub_management.hublist');
    }

    public function hubData()
    {
        $manufacturerData = Hub::join('hub_manufacture_configs', 'hub_manufacture_configs.hub_id', 'hubs.id')
            ->join('manufacturers', 'manufacturers.id', 'hub_manufacture_configs.manufacturer_id')
            ->select('hubs.*', 'manufacturers.manufacturer_name')
            ->groupby('hub_manufacture_configs.hub_id')
            ->distinct()
            ->get();

        return datatables()->of($manufacturerData)
            ->addColumn('action', function ($row) {
                $html = '<a href="hub/' . $row->id . '"><i class="text-primary ti ti-pencil me-1"></i></a> ';
                $html .= '<i class="text-danger ti ti-trash me-1" id="confirm-color' . $row->id . '" onclick="showDelete(' . $row->id . ');"></i>';
                return $html;
            })->toJson();
    }

    public function hubDocument()
    {
        return view('admin.hub_management.hub_document');
    }
}
