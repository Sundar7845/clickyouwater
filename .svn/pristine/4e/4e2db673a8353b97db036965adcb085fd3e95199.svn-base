<?php

namespace App\Http\Controllers\Admin\Accounts;

use App\Enums\MenuPermissionType;
use App\Exports\ExpensesExport;
use App\Http\Controllers\Controller;
use App\Models\Expense;
use App\Models\ExpenseGroup;
use App\Models\Ledger;
use App\Models\Payment;
use App\Models\PaymentDet;
use App\Models\User;
use App\Traits\Common;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Facades\Excel;

class ExpenseController extends Controller
{
  use Common;
  public function expenses()
  {
    try {
      $expenseVendor = Ledger::where('ledger_type_id', 2)->get();
      $expenseGroup = ExpenseGroup::get();
      $companyLedger = Ledger::where('ledger_type_id', 1)->get();
      $employeeLeger = $this->getUserRolesForDropDown();

      return view('admin.accounts.expenses.expenses', compact('expenseVendor', 'employeeLeger', 'expenseGroup', 'companyLedger'));
    } catch (\Exception $e) {
      DB::rollback();
      $notification = array(
        'message' => 'Something went wrong!',
        'alert-type' => 'error'
      );
      return redirect()->route('expenses')->with($notification);
      $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function expenseCreate(Request $request)
  {
    DB::beginTransaction();
    try {
      DB::statement('SET FOREIGN_KEY_CHECKS=0;');
      $last_insert_expense_id = Expense::insertGetId([
        'expense_date' => $request->ddlDate,
        'expensegroup_id' => $request->ddlExpenseGroup,
        'expense_type_id' => $request->txtExpenseType,
        'ledger_id' => $request->ddlExpenselVendor,
        'company_ledger_id' => $request->ddlExpenselCompany,
        'employee_user_id' => $request->ddlExpenselEmployee,
        'amount' => $request->txtAmount,
        'is_paid' => $request->isPaid,
        'amount_paid' => $request->isPaid == 0 ? 0 : $request->txtAmount,
        'notes' => $request->txtExpenseDetail,
        'created_by' => Auth::user()->id,
        'created_at' => Carbon::now()

      ]);
      DB::statement('SET FOREIGN_KEY_CHECKS=1;');

      if ($request->isPaid == 0) {
        if ($request->ddlExpenselVendor) {
          Ledger::findorfail($request->ddlExpenselVendor)->update([
            'closing_balance' => $request->hdclosinglVendor + $request->txtAmount
          ]);
        }

        if ($request->ddlExpenselEmployee) {
          User::findorfail($request->ddlExpenselEmployee)->update([
            'closing_balance' => $request->hdPendingEmployee + $request->txtAmount
          ]);
        }
      } else {
        if ($request->ddlExpenselVendor) {
          Ledger::findorfail($request->ddlExpenselCompany)->update([
            'closing_balance' => $request->hdClosinglCompany - $request->txtAmount
          ]);
        }
        if ($request->ddlExpenselEmployee) {
          Ledger::findorfail($request->ddlExpenselCompany)->update([
            'closing_balance' => $request->hdClosinglCompany - $request->txtAmount
          ]);
        }
      }

      if ($request->hasFile('txtfileattachment')) {
        $path = $request->file('txtfileattachment')->store('temp');
        $file = $request->file('txtfileattachment');
        $extension = $file->getClientOriginalExtension();
        $fileName = $this->generateRandom(16) . '.' . $extension;

        Expense::findorfail($last_insert_expense_id)->update([
          'expense_proof_path' => $this->fileUpload($file, 'upload/expenses/' . $last_insert_expense_id, $fileName),
        ]);
      }
      DB::commit();
      $notification = array(
        'message' => 'Expense Created Successfully',
        'alert-type' => 'success'
      );
      return redirect()->route('expenses')->with($notification);
    } catch (\Exception $e) {
      DB::rollback();
      $notification = array(
        'message' => 'Something went wrong!',
        'alert-type' => 'error'
      );
      return redirect()->route('expenses')->with($notification);
      $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
    }
  }

  public function expenseList()
  {
    try {
      $expenseGroup = ExpenseGroup::get();
      $companyLedger = Ledger::where('ledger_type_id', 2)->get();
      $employeeLedger = $this->getUserRolesForDropDown();
      return view('admin.accounts.expenses.expense_list', compact('expenseGroup', 'companyLedger', 'employeeLedger'));
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function expenseData(Request $request)
  {
    try {
      $expenses = "";
      $query = Expense::select('expenses.*', 'ledgers.ledger_name', 'expense_groups.expensegroup_name')
        ->join('ledgers', 'ledgers.id', 'expenses.ledger_id')
        ->join('expense_groups', 'expense_groups.id', 'expenses.expensegroup_id')
        ->whereBetween('expense_date', [$request->startdate, $request->enddate]);

      if ($request->expensegroup_id > 0) {
        $query = $query->where('expenses.expensegroup_id', $request->expensegroup_id);
      }
      if ($request->ledger_id > 0) {
        $query = $query->where('expenses.ledger_id', $request->ledger_id);
      }

      $expenses = $query->get();

      return datatables()->of($expenses)
        ->addColumn('action', function ($row) {
          if ($row->is_cancelled == 1) {
            $html = '<span class="text-white badge bg-danger">Cancelled</span>';
          } else {
            if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
              $html = '<i class="text-danger ti ti-x me-1" title="cancel expense" 
          id="confrim-color(' . $row->id . ')" onclick="showCancel(' . $row->id . ');"></i>';
            }
          }

          return $html;
        })->toJson();
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function expenseEmployeeData(Request $request)
  {
    try {
      $expenses = "";
      $query = Expense::select('expenses.*', 'users.display_name', 'expense_groups.expensegroup_name')
        ->join('users', 'users.id', 'expenses.employee_user_id')
        ->join('expense_groups', 'expense_groups.id', 'expenses.expensegroup_id')
        ->whereBetween('expense_date', [$request->startdate, $request->enddate]);
      if ($request->expensegroup_id > 0) {
        $query = $query->where('expenses.expensegroup_id', $request->expensegroup_id);
      }
      if ($request->employee_user_id > 0) {
        $query = $query->where('expenses.employee_user_id', $request->employee_user_id);
      }
      $expenses = $query->get();
      return datatables()->of($expenses)
        ->addColumn('action', function ($row) {
          if ($row->is_cancelled == 1) {
            $html = '<span class="text-white badge bg-danger">Cancelled</span>';
          } else {
            if ($this->isUserHavePermission(MenuPermissionType::Delete)) {
              $html = '<i class="text-danger ti ti-x me-1" title="cancel expense" 
          id="confrim-color(' . $row->id . ')" onclick="showEmpCancel(' . $row->id . ');"></i>';
            }
          }
          return $html;
        })->toJson();
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function LedgerBalanceInfo(Request $request)
  {
    try {
      $companyLedgerBalanceInfo = Ledger::where('id', $request->ledger_id)->where('ledger_type_id', 1)->first();
      $vendorLedgerBalanceInfo = Ledger::where('id', $request->vendor_id)->where('ledger_type_id', 2)->first();
      $employeeLeger = $this->getUserRolesForDropDown()->where('id', $request->employee_id)->first();
      return response()->json([
        'companyLedgerBalanceInfo' => $companyLedgerBalanceInfo,
        'employeeLeger' => $employeeLeger,
        'vendorLedgerBalanceInfo' => $vendorLedgerBalanceInfo
      ]);
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function updateCancelStatus($id)
  {
    try {
      $paymentDet = PaymentDet::where('expense_id', $id)->select('payment_id')->get()->toArray();

      $paymentId = array_column($paymentDet, 'payment_id');

      $payment = Payment::where('is_cancelled', 0)->whereIn('id', $paymentId)->get()->count();

      if ($payment == 0) {
        $cancel = Expense::where('id', $id)->first();
        Expense::findorfail($id)->update([
          'is_cancelled' => 1
        ]);

        $ledger = Ledger::where('id', $cancel->ledger_id)->first();
        $companyLedger = Ledger::where('id', $cancel->company_ledger_id)->first();
        $user = User::where('id', $cancel->employee_user_id)->first();

        if ($cancel->company_ledger_id == null) {
          if ($cancel->ledger_id) {
            Ledger::findorfail($cancel->ledger_id)->update([
              'closing_balance' => $ledger->closing_balance - $cancel->amount
            ]);
          }
          if ($cancel->employee_user_id) {
            User::findorfail($cancel->employee_user_id)->update([
              'closing_balance' => $user->closing_balance - $cancel->amount
            ]);
          }
        } else {
          if ($cancel->company_ledger_id) {
            Ledger::findorfail($cancel->company_ledger_id)->update([
              'closing_balance' => $companyLedger->closing_balance + $cancel->amount
            ]);
          }
          if ($cancel->ledger_id && $cancel->company_ledger_id == null) {
            Ledger::findorfail($cancel->ledger_id)->update([
              'closing_balance' => $ledger->closing_balance + $cancel->amount
            ]);
          }
        }
        $notification = array(
          'message' => 'Expense Cancelled Successfully',
          'alert' => 'success'
        );

        return response()->json([
          'responseData' => $notification
        ]);
      } else {
        $notification = array(
          'message' => 'Expense Entry is being referenced with another instance',
          'alert' => 'error'
        );

        return response()->json([
          'responseData' => $notification
        ]);
      }
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }

  public function export()
  {
    try {
      return Excel::download(new ExpensesExport, 'expenses.xlsx');
    } catch (\Exception $e) {
      $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
    }
  }
}
