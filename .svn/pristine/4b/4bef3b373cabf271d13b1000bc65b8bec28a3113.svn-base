<?php

namespace App\Http\Controllers\Admin\ManufacturerManagement;

use App\Enums\DocumentModulesType;
use App\Http\Controllers\Controller;
use App\Models\Manufacturer;
use App\Models\ManufacturerDocuments;
use App\Traits\Common;
use App\Traits\Maps;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Validator;

class ManufacturerController extends Controller
{
    use Common, Maps;
    public function manufacturer($id = NULL)
    {
        try {
            $bindDocuments = $this->getDocumentConfigsByModule(DocumentModulesType::Manufacturer, $id);
            if ($bindDocuments->isEmpty()) {
                $bindDocuments = $this->getDocumentsByModule(DocumentModulesType::Manufacturer);
            }
            //Get states
            $states = $this->getStates();
            if ($id) {
                $man = Manufacturer::find($id);
                //Get Cities against state
                $cities = $this->getCities($man->state_id);
                //Get Areas against city
                $areas = $this->getAreas($man->city_id);
                $manExample = $man->manufacturer_code;
                // dd($bindDocuments);
                return view('admin.manufacturer_management.manufacture_edit', compact('bindDocuments', 'states', 'man', 'manExample', 'cities', 'areas'));
            }
            $man =  null;


            // $response = $this->getDistance("11.0643172,76.9605309", "11.0438472,76.9994912");
            // dd($response);

            // $response = $this->getServiceAvailable();
            // dd($response);
            $manExample = $this->getAutoGeneratedCode(DocumentModulesType::Manufacturer);
            return view('admin.manufacturer_management.manufacturer', compact('man', 'states', 'bindDocuments', 'manExample'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }


    public function manufactureCreate(Request $request)
    {
        DB::beginTransaction();
        try {
            $validator = Validator::make($request->all(), [
                'txtManufacturerId' => 'required',
                'txtManufacturerName' => 'required',
                'txtMobile' => 'required|numeric|digits:10|unique:manufacturers,mobile',
                'txtOffEmail' => 'required|email|unique:manufacturers,official_email',
                'txtLatitude' => 'required',
                'txtLongtitude' => 'required',
                'txtGeoLocation' => 'required',
                'txtCreditPeriod' => 'required',
                'txtSettlementPeriod' => 'required',
                'yearOfExp' => 'required',
                'txtNoOfBrands' => 'required',
                'txtAnnualTurnOver' => 'required',
                'txtSecurityDeposit' => 'required',
                'password' => 'required|min:6|confirmed',
                'ddlState' => 'required',
                'ddlCity' => 'required',
                'ddlArea' => 'required',
                'txtAddress' => 'required',
                'txtPincode' => 'required',
                'txtProprietorName' => 'required',
                'txtProprietorMobile' => 'required|numeric|digits:10',
                'txtProprietorEmail' => 'required|email',
                'txtContactPersonName' => 'required',
                'txtContactPersonMobile' => 'required|numeric|digits:10',
                'txtContactPersonEmail' => 'required|email'
            ]);

            if ($validator->fails()) {
                return redirect()->back()->withInput()->withErrors($validator);
            }

            //Create New Area Or Get Area ID
            $area_id = $this->getOrCreateAreaId($request->ddlArea, $request->ddlState, $request->ddlCity);

            $data = [
                "manufacturer_code" => $request->txtManufacturerId,
                "manufacturer_name" => $request->txtManufacturerName,
                "mobile" => $request->txtMobile,
                "official_email" => $request->txtOffEmail,
                "latitude" => $request->txtLatitude,
                "longtitude" => $request->txtLongtitude,
                "geo_location" => $request->txtGeoLocation,
                "credit_period" => $request->txtCreditPeriod,
                "settlement_period" => $request->txtSettlementPeriod,
                "years_of_experience" => $request->yearOfExp,
                "no_of_brands" => $request->txtNoOfBrands,
                "annual_turn_over" => $request->txtAnnualTurnOver,
                "security_deposit" => $request->txtSecurityDeposit,
                "password" => Hash::make($request->password),
                "is_thirdparty_tieup" => $request->chkThirdpartyTieup ?? 0,
                "no_of_thirdparty_brands" => $request->txtThirdpartyBrands ?? 0,
                "thirdparty_brand_name" => $request->txtThirdpartyBrandName ?? 0,
                "thirdparty_turnover" => $request->txtThirdPartyTurnover ?? 0,
                "total_turnover" => $request->txtTotalTurnover ?? 0,
                "state_id" => $request->ddlState,
                "city_id" => $request->ddlCity,
                "area_id" => $area_id,
                "address" => $request->txtAddress,
                "pincode" => $request->txtPincode,
                "proprietor_name" => $request->txtProprietorName,
                "proprietor_mobile" => $request->txtProprietorMobile,
                "proprietor_email" => $request->txtProprietorEmail,
                "contact_person_name" => $request->txtContactPersonName,
                "contact_person_mobile" => $request->txtContactPersonMobile,
                "contact_person_email" => $request->txtContactPersonEmail,
                'is_active' => 1,
                'created_by' => Auth::user()->id
            ];

            //Validate the documents for hub
            $is_valid = $this->validateDocuments($request, DocumentModulesType::Manufacturer);

            if (isset($is_valid->documentType->documenttype_name)) {
                $notification = array(
                    'message' => $is_valid->documentType->documenttype_name . ' Required',
                    'alert-type' => 'error'
                );
                return redirect()->route('manufacturer')->with($notification);
            }
            $last_inserted_manufacturer_id = DB::table('manufacturers')->insertGetId($data);

            $documents = $this->getDocumentsByModule(DocumentModulesType::Manufacturer);

            //Create hub documents in create mode
            $this->createManufactureDocuments($request, $documents, $last_inserted_manufacturer_id);

            //Increase hublive count in settings table
            $this->updateLiveCount(DocumentModulesType::Manufacturer, 1);

            //Create hub user account for login
            $this->createUser(
                $request->txtMobile,
                $request->txtOffEmail,
                $request->password,
                $last_inserted_manufacturer_id,
                $request->txtManufacturerName,
                $request->txtMobile,
                3,
                1,
                Auth::user()->id
            );

            $notification = array(
                'message' => 'Manufacturer Created Successfully',
                'alert-type' => 'success'
            );

            DB::commit();
            return redirect()->route('manufacturer-list')->with($notification);
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Something went worng',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
            return redirect()->back()->withInput()->with($notification);
        }
    }

    private function createManufactureDocuments(Request $request, $documents, $manufacture_id)
    {
        try {
            foreach ($documents as $doc) {
                if ($request->hasFile('file_' . $doc->id)) {
                    $path = $request->file('file_' . $doc->id)->store('temp');
                    $file = $request->file('file_' . $doc->id);
                    $extension = $file->getClientOriginalExtension();
                    $fileName = $this->generateRandom(16) . '.' . $extension;
                }
                $doc_no = 'doc_' . $doc->id;
                $existingfile_path = 'hdDocumentImg_' . $doc->id;
                ManufacturerDocuments::create([
                    'manufacture_id' => $manufacture_id,
                    'documenttype_id' => $doc->documenttype_id,
                    'documentmodule_id' => $doc->documentmodule_id,
                    'document_path' => ($request->hasFile('file_' . $doc->id)) ? $this->fileUpload($file, 'upload/Manufacture/' . $request->txtManufacturerId, $fileName) : ($request->$existingfile_path == null ? null : $request->$existingfile_path),
                    'document_number' => $request->$doc_no
                ]);
            }
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }

    public function manufactureUpdate(Request $request)
    {
        DB::beginTransaction();
        try {
            $validator = Validator::make($request->all(), [
                "txtManufacturerId" => 'required',
                "txtManufacturerName" => "required",
                "txtMobile" => "required|numeric|digits:10|unique:manufacturers,mobile," . $request->id,
                "txtOffEmail" => "required|email|unique:manufacturers,official_email," . $request->id,
                "txtLatitude" => "required",
                "txtLongtitude" => "required",
                "txtGeoLocation" => "required",
                "txtCreditPeriod" => "required",
                "txtSettlementPeriod" => "required",
                "yearOfExp" => "required",
                "txtNoOfBrands" => "required",
                "txtAnnualTurnOver" => "required",
                "txtSecurityDeposit" => "required",
                // 'password' => 'required|confirmed|min:6',
                "ddlState" => "required",
                "ddlCity" => "required",
                "ddlArea" => "required",
                "txtAddress" => "required",
                "txtPincode" => "required",
                "txtProprietorName" => "required",
                "txtProprietorMobile" => "required|numeric|digits:10",
                "txtProprietorEmail" => "required|email",
                "txtContactPersonName" => "required",
                "txtContactPersonMobile" => "required|numeric|digits:10",
                "txtContactPersonEmail" => "required|email"
            ]);

            if ($validator->fails()) {
                return redirect()->back()->withInput()->withErrors($validator);
            }

            //Create New Area Or Get Area ID
            $area_id = $this->getOrCreateAreaId($request->ddlArea, $request->ddlState, $request->ddlCity);

            //Validate the documents for hub
            $is_valid = $this->validateUpdateDocuments($request, DocumentModulesType::Manufacturer, $request->id);

            if ($is_valid !== true) {
                if ($is_valid->document_number == null || $is_valid->document_path == null) {
                    $notification = array(
                        'message' => $is_valid->documentType->documenttype_name . ' Required',
                        'alert-type' => 'error'
                    );
                    return redirect()->route('manufacturer', $request->id)->with($notification);
                }
            }


            $data = [
                "manufacturer_code" => $request->txtManufacturerId,
                "manufacturer_name" => $request->txtManufacturerName,
                "mobile" => $request->txtMobile,
                "official_email" => $request->txtOffEmail,
                "latitude" => $request->txtLatitude,
                "longtitude" => $request->txtLongtitude,
                "geo_location" => $request->txtGeoLocation,
                "credit_period" => $request->txtCreditPeriod,
                "settlement_period" => $request->txtSettlementPeriod,
                "years_of_experience" => $request->yearOfExp,
                "no_of_brands" => $request->txtNoOfBrands,
                "annual_turn_over" => $request->txtAnnualTurnOver,
                "security_deposit" => $request->txtSecurityDeposit,
                "password" => Hash::make($request->password),
                "is_thirdparty_tieup" => $request->chkThirdpartyTieup ?? 0,
                "no_of_thirdparty_brands" => $request->txtThirdpartyBrands ?? 0,
                "thirdparty_brand_name" => $request->txtThirdpartyBrandName ?? 0,
                "thirdparty_turnover" => $request->txtThirdPartyTurnover ?? 0,
                "total_turnover" => $request->txtTotalTurnover ?? 0,
                "state_id" => $request->ddlState,
                "city_id" => $request->ddlCity,
                "area_id" => $area_id,
                "address" => $request->txtAddress,
                "pincode" => $request->txtPincode,
                "proprietor_name" => $request->txtProprietorName,
                "proprietor_mobile" => $request->txtProprietorMobile,
                "proprietor_email" => $request->txtProprietorEmail,
                "contact_person_name" => $request->txtContactPersonName,
                "contact_person_mobile" => $request->txtContactPersonMobile,
                "contact_person_email" => $request->txtContactPersonEmail,
                'created_by' => Auth::user()->id
            ];
            $affectedRows = Manufacturer::where("id", $request->id)->update($data);
            $notification = array(
                'message' => 'Manufacturer Updated Successfully',
                'alert-type' => 'success'
            );

            $documents = $this->getDocumentConfigsByModule(DocumentModulesType::Manufacturer, $request->id);

            $nullDocuments = $this->getDocumentsByModule(DocumentModulesType::Manufacturer);

            foreach ($documents as $doc) {
                if ($request->hasFile('file_' . $doc->id)) {
                    @unlink($doc->document_path);
                }
            }

            ManufacturerDocuments::where('manufacture_id', $request->id)->delete();

            //Create hub documents in edit mode
            $this->createManufactureDocuments($request, $documents == null ? $documents : $nullDocuments, $request->id);

            DB::commit(); // Commit the transaction
            return redirect()->route('manufacturer-list')->with($notification);
        } catch (\Exception $e) {
            DB::rollback(); // Roll back the transaction if an error occurs
            $notification = array(
                'message' => 'Something went worng',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
            return redirect()->back()->withInput()->with($notification);
        }
    }

    public function manufacturerList()
    {
        try {
            //Get states
            $states = $this->getStates();
            $manufacturer = Manufacturer::get();
            return view('admin.manufacturer_management.manufacturerlist', compact('states', 'manufacturer'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
    public function manufacturerData(Request $request)
    {
        try {
            $manufacturerData = "";
            $query = DB::table('manufacturers as m')
                ->leftJoin('states as s', 's.id', '=', 'm.state_id')
                ->leftJoin('cities as c', 'c.id', '=', 'm.city_id')
                ->leftJoin('hub_manufacture_configs', 'm.id', '=', 'hub_manufacture_configs.manufacturer_id')
                ->leftJoin('logistics_manufacture_configs as lmc', 'lmc.manufacture_id', 'm.id')
                ->select(
                    'm.*',
                    's.state_name',
                    'c.city_name',
                    DB::raw('count(hub_manufacture_configs.hub_id) as hub_count'),
                    DB::raw('count(lmc.logistic_partner_id) as logistic_partner_count')
                )
                ->groupBy('m.id');

            if ($request->state_id > 0) {
                $query = $query->where('m.state_id', $request->state_id);
            }
            if ($request->city_id > 0) {
                $query = $query->where('m.city_id', $request->city_id);
            }
            if ($request->area_id > 0) {
                $query = $query->where('m.area_id', $request->area_id);
            }

            $manufacturerData = $query->get();

            return datatables()->of($manufacturerData)
                ->addColumn('action', function ($row) {
                    $html = '<a href="manufacturer/' . $row->id . '"><i class="text-primary ti ti-pencil me-1"></i></a> ';
                    $html .= '<i class="text-danger ti ti-trash me-1" id="confirm-color' . $row->id . '" onclick="showDelete(' . $row->id . ');"></i>';
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function activeStatus($id, $status)
    {
        DB::beginTransaction();
        try {
            Manufacturer::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function deleteManufacturer($id)
    {
        try {
            $manufacturer = Manufacturer::findorfail($id);
            $manufacturer->delete();

            $manufacturer->Update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Manufacturer Deleted Successfully',
                'alert' => 'success'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (QueryException $e) {

            $notification = array(
                'message' => 'Manufacturer could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
        }
    }

    public function view()
    {
        try {
            return view('admin.manufacturer_management.manufacture_view');
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function manufactureDocument($id)
    {
        try {
            $documentTitle = $this->documentTitle(DocumentModulesType::Manufacturer);
            $documents = $this->documentByUsers(DocumentModulesType::Manufacturer, $id);
            $documentmodule_id = DocumentModulesType::Manufacturer;
            $manufacturerDetails = Manufacturer::with('area', 'city', 'state')
                ->where('manufacturers.id', $id)
                ->first();
            $userCode = $manufacturerDetails->manufacturer_code;
            $userName = $manufacturerDetails->manufacturer_name;
            $userMobile = $manufacturerDetails->mobile;
            $userActiveStatus = $manufacturerDetails->is_active;
            $userAddress = $manufacturerDetails->address . ','
                . $manufacturerDetails->area->area_name . ','
                . $manufacturerDetails->city->city_name . ','
                . $manufacturerDetails->state->state_name . '-'
                . $manufacturerDetails->pincode;
            return view('admin.documents.documents', compact(
                'documents',
                'documentTitle',
                'documentmodule_id',
                'userCode',
                'userName',
                'userMobile',
                'userAddress',
                'userActiveStatus'
            ));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function verifyDocument($id, $status)
    {
        try {
            $this->updateDocumentVerification(DocumentModulesType::Manufacturer, $id, $status);
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }
}
