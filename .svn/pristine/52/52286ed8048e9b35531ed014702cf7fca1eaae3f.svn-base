<?php

namespace App\Http\Controllers\API;

use App\Enums\StatusTypes;
use App\Http\Controllers\Controller;
use App\Http\Resources\AddressResource;
use App\Http\Resources\UserAddressResource;
use App\Models\CustomerAddress;
use App\Models\Order;
use App\Models\OrderDet;
use App\Models\Products;
use App\Traits\Common;
use App\Traits\ResponseAPI;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class CanController extends Controller
{
    use Common;
    use ResponseAPI;
    public function getCansInHand()
    {

        try {

            // $userOrders = Order::where('user_id', Auth::user()->id)
            //     ->where('status_id', StatusTypes::OrderDelivered)
            //     ->get();

            // $total_emptycan = 0;
            // $total_qty = 0;
            // $address_details = [];
            // $data_address_product_wise = [];
            // $address_empty_can = 0;

            // if ($userOrders) {
            //     foreach ($userOrders as $orders) {
            //         if ($orders->orderDets) {
            //             foreach ($orders->orderDets as $orderDets) {
            //                 $total_emptycan += (int)$orderDets->return_empty_cans_qty;

            //                 // If the delivery address and product id combination is not yet in the array, add it
            //                 if (!isset($data_address_product_wise)) {
            //                     $data_address_product_wise[] = [
            //                         'empty_can' => 0,
            //                         'product_name' => 0,
            //                     ];
            //                 }

            //                 // Increment the empty can count and total qty for this delivery address and product id combination
            //                 $data_address_product_wise[] = [
            //                     'empty_can' => (int)$orderDets->qty - (int)$orderDets->return_empty_cans_qty,
            //                     'product_name' => $orderDets->products->product_name
            //                 ];

            //                 $address_empty_can += (int)$orderDets->qty - (int)$orderDets->return_empty_cans_qty;
            //             }
            //         }
            //         $total_qty += (int)$orders->total_qty;
            //     }

            //     $empty_can = $total_qty - $total_emptycan;
            //     $formattedAddress = UserAddressResource::collection($this->getCustomerAddress_details($orders->delivery_address_id));
            //     $formattedAddress = $formattedAddress->values(); // Convert the collection to an array

            //     $address_details[] = [
            //         'address' => $formattedAddress,
            //         'empty_can' => $address_empty_can,
            //         'product_wise' => $data_address_product_wise
            //     ];
            // } else {
            //     $response = [
            //         'status' => false,
            //         'data' => [
            //             "total_can_in_hand" => 0,
            //             "address_wise" => [],
            //         ],
            //         'message' => "No records found"
            //     ];
            //     return response($response, 200);
            // }

            // $response = [
            //     'status' => true,
            //     'data' => [
            //         "total_can_in_hand" => $empty_can,
            //         "address_wise" => $address_details,
            //     ],
            //     'message' => "Success"
            // ];
            // return response($response, 200);

            $response = [
                'status' => true,
                'data' => $this->getCansInHandAddressWise(),
                'message' => "Success"
            ];
            return response($response, 200);
        } catch (\Exception $e) {

            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
}
