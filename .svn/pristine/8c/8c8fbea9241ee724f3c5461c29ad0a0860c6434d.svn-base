<?php

namespace App\Http\Controllers\Admin\Masters;

use App\Http\Controllers\Controller;
use App\Models\Area;
use App\Models\RolePermission;
use App\Models\State;
use App\Rules\ForeignKeyExists;
use App\Traits\Common;
use Illuminate\Database\Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

class AreaController extends Controller
{
    use Common;
    public function area()
    {
        try {
            $filePermission = $this->chkUserFilePermission();
            $area = Area::with('state', 'city')->get();
            $states = State::orderBy('state_name', 'asc')->get();
            return view('admin.masters.area.area', compact('states', 'area', 'filePermission'));
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getCity(Request $request)
    {
        try {
            $data = $this->getCities($request->state_id);
            return response()->json($data);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }

    public function addArea(Request $request)
    {
        $request->validate([
            'ddlState' => 'required',
            'ddlCity' => 'required',
            'txtAreaName' => 'required'
        ]);

        DB::beginTransaction();
        try {

            if ($request->hdAreaId == null) {

                Area::create([
                    'state_id' => $request->ddlState,
                    'city_id' => $request->ddlCity,
                    'area_name' => $request->txtAreaName,
                    'radius' => $request->txtRadius,
                    'created_by' => Auth::user()->id
                ]);
                $notification = array(
                    'message' => 'Area Created Successfully',
                    'alert-type' => 'success'
                );
            } else {

                Area::findorfail($request->hdAreaId)->update([
                    'state_id' => $request->ddlState,
                    'city_id' => $request->ddlCity,
                    'area_name' => $request->txtAreaName,
                    'radius' => $request->txtRadius,
                    'updated_by' => Auth::user()->id
                ]);
                $notification = array(
                    'message' => 'Area Updated Successfully',
                    'alert-type' => 'success'
                );
            }
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Area Not Created!',
                'alert-type' => 'error'
            );
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
        return redirect()->route('area')->with($notification);
    }

    public function deleteArea(Request $request, $id)
    {
        $validate = $request->validate([
            'foreign_key' => [new ForeignKeyExists('Area', 'id')],
        ]);

        DB::beginTransaction();
        try {
            $area = Area::findorfail($id);
            $area->delete();
            $area->update([
                'deleted_by' => Auth::user()->id
            ]);

            $notification = array(
                'message' => 'Area Deleted Successfully',
                'alert' => 'success'
            );
            DB::commit();
            return response()->json([
                'responseData' => $notification
            ]);
        } catch (\Exception $e) {
            DB::rollback();
            $notification = array(
                'message' => 'Area could not be deleted',
                'alert' => 'error'
            );
            return response()->json([
                'responseData' => $notification
            ]);
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }

    public function getAreaById($id)
    {
        try {
            $area = Area::select('areas.*', 'states.state_name', 'cities.city_name')
                ->join('states', 'states.id', 'areas.state_id')
                ->join('cities', 'cities.id', 'areas.city_id')->where('areas.id', $id)->first();
            return response()->json([
                'area' => $area
            ]);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getAreaData()
    {
        try {
            $areas = Area::select('areas.*', 'states.state_name', 'cities.city_name')->join('states', 'states.id', 'areas.state_id')
                ->join('cities', 'cities.id', 'areas.city_id')->get();

            return datatables()->of($areas)
                ->addColumn('action', function ($row) {
                    $html = "";
                    if ($this->chkUserFilePermission()->is_edit == 1) {
                        $html = '<i class="text-primary ti ti-pencil me-1"
                onclick="doEdit(' . $row->id . ');"></i> ';
                    }
                    if ($this->chkUserFilePermission()->is_delete == 1) {
                        $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" 
                    onclick="showDelete(' . $row->id . ');"></i>';
                    }
                    return $html;
                })->toJson();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, 'GET', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function activeStatus($id, $status)
    {
        DB::beginTransaction();
        try {
            Area::findorfail($id)->update([
                'is_active' => $status,
                'updated_by' => Auth::user()->id
            ]);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
        }
    }

    public function getAreaByStates(Request $request)
    {
        try {
            return  Area::select('area_name', 'id')->where('city_id', $request->id)->get()->toArray();
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }

    public function getAreaByCity(Request $request)
    {
        try {
            return $this->getAreas($request->city_id);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
        }
    }
}
