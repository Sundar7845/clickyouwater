<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\Banners;
use App\Models\CustomerAddress;
use App\Models\Offer;
use App\Models\Reasons;
use App\Models\ReasonType;
use App\Models\User;
use App\Traits\Common;
use App\Traits\Maps;
use App\Traits\ResponseAPI;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class SettingsController extends Controller
{

    use Common;
    use Maps;
    use ResponseAPI;
    public function getAdminSettings()
    {
        try {

            $response = [
                'status' => true,
                'data' => $this->getAdminSetting(),
                // 'message'=>"Updated Successfully"
            ];
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function getReasons($id)
    {
        try {
            $reasons = Reasons::where('reason_type_id', $id)->get();
            $response = [
                'status' => true,
                'data' => $reasons,
                // 'message'=>"Updated Successfully"
            ];
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
    public function getReasonsTypes()
    {
        try {
            $reasons = ReasonType::all();
            $response = [
                'status' => true,
                'data' => $reasons,
                // 'message'=>"Updated Successfully"
            ];
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }

    public function getBanners()
    {
        try {

            $customer_id = User::where('id', Auth::id())->value('ref_id');
            $customer_address = CustomerAddress::where('customer_id', $customer_id)
                ->where('is_default', 1)
                ->select('state_id', 'city_id', 'latitude', 'longitude')
                ->first();

            $hub_id = $this->getServiceAvailable($customer_address->latitude, $customer_address->longitude, $customer_address->state_id, $customer_address->city_id);

            $offers = DB::table('offers as o')
                ->select('o.id', 'offer_image_path')
                ->join('offer_hub_allocations as oha', 'oha.offer_id', '=', 'o.id')
                ->leftJoin('offer_allocations as oa', function ($join) use ($customer_address) {
                    $join->on('oa.offer_id', '=', 'o.id')
                        ->whereRaw("FIND_IN_SET($customer_address->state_id, oa.state_id)");
                })
                ->where(function ($query) {
                    $query->where('o.start_date', '>=', DB::raw('NOW()'))
                        ->orWhere('o.end_date', '>=', DB::raw('NOW()'));
                })
                ->where('oha.hub_id', '=', $hub_id)
                // ->whereNotNull('oa.state_id')
                ->get();

            //TODO::state_id scenarios not working

            // Append base URL to offer field
            foreach ($offers as $offer) {
                $offer->offer_image_path = $this->getBaseUrl() . '/' . $offer->offer_image_path;
            }

            $banners = Banners::where('is_active', 1)->select('id', 'banner_img')->get();

            // Append base URL to banner field
            foreach ($banners as $banner) {
                $banner->banner_img = $this->getBaseUrl() . '/' . $banner->banner_img;
            }

            $response = [
                'status' => true,
                'offers' => $offers,
                'banners' => $banners
            ];
            return response($response, 200);
        } catch (\Exception $e) {
            $this->Log(__FUNCTION__, request()->method(), $e->getMessage(), Auth::user()->id, request()->ip(), gethostname(), 1);
            return $this->error($e->getMessage(), 200);
        }
    }
}
