<?php

namespace App\Http\Controllers\Admin\LogisticManagement;

use App\Enums\DocumentModulesType;
use App\Http\Controllers\Controller;
use App\Models\Area;
use App\Models\BillNoSetting;
use App\Models\City;
use App\Models\FuelType;
use App\Models\Hub;
use App\Models\HubManufactureConfig;
use App\Models\LogisticPartner;
use App\Models\LogisticPartnerDocuments;
use App\Models\LogisticsHubConfig;
use App\Models\LogisticsManufactureConfig;
use App\Models\Manufacturer;
use App\Models\State;
use App\Models\VehicleBrand;
use App\Models\VehicleType;
use App\Traits\Common;
use Illuminate\Database\QueryException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;

class LogisticController extends Controller
{
   use Common;
   public function addLogisticPartner($id = NULL)
   {
      try {
         $hub = Hub::get();
         $states = State::orderBy('state_name', 'ASC')->get();
         $man = Manufacturer::all();
         $fueltypes = FuelType::all();
         $vehicletypes = VehicleType::all();
         $vehiclebrands = VehicleBrand::all();
         $documents = $this->getDocumentsByModule(DocumentModulesType::Logistic);
         if ($id) {
            $log = LogisticPartner::find($id);
            $manconfiq = LogisticsManufactureConfig::where('logistic_partner_id', $id)->pluck('manufacture_id')->toArray();
            $hubconfiq = LogisticsHubConfig::where('logistic_partner_id', $id)->pluck('hub_id')->toArray();
            $cities = City::where('state_id', $log->state_id)->get();
            $areas = Area::where('city_id', $log->city_id)->first();
            $logExample = $log->logistic_partner_code;
            $bindDocuments = $this->getDocumentConfigsByModule(DocumentModulesType::Logistic, $id);
            return view('admin.logistic_management.add_logistic', compact('bindDocuments', 'states', 'documents', 'log', 'hub', 'manconfiq', 'hubconfiq', 'man', 'logExample', 'cities', 'areas', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
         }

         $log = null;
         $bindDocuments = "";
         $logExample = $this->getAutoGeneratedCode(DocumentModulesType::Logistic);
         $manconfiq = LogisticsManufactureConfig::where('logistic_partner_id', $id)->pluck('manufacture_id')->toArray();
         $hubconfiq = LogisticsHubConfig::where('logistic_partner_id', $id)->pluck('hub_id')->toArray();
         return view('admin.logistic_management.add_logistic', compact('log', 'bindDocuments', 'man', 'documents', 'manconfiq', 'hubconfiq', 'hub', 'states', 'logExample', 'fueltypes', 'vehicletypes', 'vehiclebrands'));
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function addLogisticPartnerCreate(Request $request)
   {
      DB::beginTransaction();
      try {
         if ($request->hdLogisticId == null) {

            $request->validate([
               'txtLogisticId' =>  'required',
               'txtLogisticName' =>  'required',
               'ddlManufacturerName' =>  'required',
               'ddlHubName' =>  'required',
               'txtYearsOfExperience' =>  'required',
               'txtMobile' =>  'required|numeric|digits:10|unique:logistic_partners,mobile',
               'txtEmail' =>  'required|email|unique:logistic_partners,email',
               'txtCreditPeriod' =>  'required',
               'txtSettlementPeriod' =>  'required',
               'password' => 'required|min:6|confirmed',
               'ddlState' =>  'required',
               'ddlCity' =>  'required',
               'ddlArea' =>  'required',
               'txtAddress' =>  'required',
               'txtPincode2' =>  'required',
               'txtProprietorName' =>  'required',
               'txtProprietorMobile' =>  'required|numeric|digits:10|unique:logistic_partners,proprietor_mobile',
               'txtProprietorEmail' =>  'required|email|unique:logistic_partners,proprietor_email',
               'txtContactPersonName' =>  'required',
               'txtContactPersonMobile' =>  'required|numeric|digits:10|unique:logistic_partners,contact_person_mobile',
               'txtContactPersonEmail' =>  'required|email|unique:logistic_partners,contact_person_email'
            ]);

            // Validate the documents for hub
            $is_valid = $this->validateDocuments($request, DocumentModulesType::Logistic);

            if (isset($is_valid->documenttype_name)) {
               $notification = array(
                  'message' => $is_valid->documenttype_name . ' Required',
                  'alert-type' => 'error'
               );
               return redirect()->route('logistic')->with($notification);
            }

            $data = $request->all();

            $last_inserted_logistic_id = LogisticPartner::insertGetId([
               'logistic_partner_code' => $request->txtLogisticId,
               'logistic_partner_name' => $request->txtLogisticName,
               'years_of_experience' => $request->txtYearsOfExperience,
               'mobile' => $request->txtMobile,
               'email' => $request->txtEmail,
               'credit_period' => $request->txtCreditPeriod,
               'settlement_period' => $request->txtSettlementPeriod,
               'password' => Hash::make($request->password),
               'state_id' => $request->ddlState,
               'city_id' => $request->ddlCity,
               'area_id' => $request->ddlArea,
               'address' => $request->txtAddress,
               'pincode' => $request->txtPincode2,
               'proprietor_name' => $request->txtProprietorName,
               'proprietor_mobile' => $request->txtProprietorMobile,
               'proprietor_email' => $request->txtProprietorEmail,
               'contact_person_name' => $request->txtContactPersonName,
               'contact_person_mobile' => $request->txtContactPersonMobile,
               'contact_person_email' => $request->txtContactPersonEmail,
               'is_active' => 1,
               'created_by' => Auth::user()->id

            ]);
            foreach ($data['ddlManufacturerName'] as $value) {
               LogisticsManufactureConfig::create([
                  'logistic_partner_id' => $last_inserted_logistic_id,
                  'manufacture_id' => $value

               ]);
            }

            foreach ($data['ddlHubName'] as $value) {
               $datas = LogisticsHubConfig::create([
                  'logistic_partner_id' => $last_inserted_logistic_id,
                  'hub_id' => $value

               ]);
            }

            $documents = $this->getDocumentsByModule(DocumentModulesType::Logistic);

            //Create hub documents in create mode
            $this->createLogisticDocuments($request, $documents, $last_inserted_logistic_id);

            //Increase hublive count in settings table
            $this->updateLiveCount(DocumentModulesType::Logistic, 1);

            //Create hub user account for login
            $this->createUser(
               $request->txtMobile,
               $request->txtEmail,
               $request->password,
               $last_inserted_logistic_id,
               $request->txtLogisticName,
               $request->txtMobile,
               5,
               1,
               Auth::user()->id
            );


            $notification = array(
               'message' => 'Logistic Created Successfully',
               'alert-type' => 'success'
            );
         } else {

            $request->validate([

               'txtLogisticId' =>  'required',
               'txtLogisticName' =>  'required',
               'ddlManufacturerName' =>  'required',
               'ddlHubName' =>  'required',
               'txtYearsOfExperience' =>  'required',
               'txtMobile' =>  'required|numeric|digits:10|unique:logistic_partners,mobile,' . $request->hdLogisticId,
               'txtEmail' =>  'required|email|unique:logistic_partners,email,' . $request->hdLogisticId,
               'txtCreditPeriod' =>  'required',
               'txtSettlementPeriod' =>  'required',
               'password' => 'required|min:6|confirmed',
               'ddlState' =>  'required',
               'ddlCity' =>  'required',
               'ddlArea' =>  'required',
               'txtAddress' =>  'required',
               'txtPincode2' =>  'required',
               'txtProprietorName' =>  'required',
               'txtProprietorMobile' =>  'required|numeric|digits:10|unique:logistic_partners,proprietor_mobile,' . $request->hdLogisticId,
               'txtProprietorEmail' =>  'required|email|unique:logistic_partners,proprietor_email,' . $request->hdLogisticId,
               'txtContactPersonName' =>  'required',
               'txtContactPersonMobile' =>  'required|numeric|digits:10|unique:logistic_partners,contact_person_mobile,' . $request->hdLogisticId,
               'txtContactPersonEmail' =>  'required|email|unique:logistic_partners,contact_person_email,' . $request->hdLogisticId
            ]);

            //Validate the documents for hub
            $is_valid = $this->validateUpdateDocuments($request, DocumentModulesType::Logistic, $request->hdLogisticId);

            if (isset($is_valid->document_number) || isset($is_valid->document_path)) {
               $notification = array(
                  'message' => $is_valid->documenttype_name . ' Required',
                  'alert-type' => 'error'
               );
               return redirect()->route('logistic', $request->hdLogisticId)->with($notification);
            }

            $data = $request->all();

            LogisticPartner::findorFail($request->hdLogisticId)->update([
               'logistic_partner_code' => $request->txtLogisticId,
               'logistic_partner_name' => $request->txtLogisticName,
               'years_of_experience' => $request->txtYearsOfExperience,
               'mobile' => $request->txtMobile,
               'email' => $request->txtEmail,
               'credit_period' => $request->txtCreditPeriod,
               'settlement_period' => $request->txtSettlementPeriod,
               'password' => Hash::make($request->password),
               'state_id' => $request->ddlState,
               'city_id' => $request->ddlCity,
               'area_id' => $request->ddlArea,
               'address' => $request->txtAddress,
               'pincode' => $request->txtPincode2,
               'proprietor_name' => $request->txtProprietorName,
               'proprietor_mobile' => $request->txtProprietorMobile,
               'proprietor_email' => $request->txtProprietorEmail,
               'contact_person_name' => $request->txtContactPersonName,
               'contact_person_mobile' => $request->txtContactPersonMobile,
               'contact_person_email' => $request->txtContactPersonEmail,
               'updated_by' => Auth::user()->id
            ]);

            LogisticsManufactureConfig::where('logistic_partner_id', $request->hdLogisticId)->delete();
            foreach ($data['ddlManufacturerName'] as $value) {
               LogisticsManufactureConfig::where('logistic_partner_id', $request->hdLogisticId)->updateorCreate([
                  'logistic_partner_id' => $request->hdLogisticId,
                  'manufacture_id' => $value

               ]);
            }

            LogisticsHubConfig::where('logistic_partner_id', $request->hdLogisticId)->delete();
            foreach ($data['ddlHubName'] as $value) {
               LogisticsHubConfig::where('logistic_partner_id', $request->hdLogisticId)->updateorCreate([
                  'logistic_partner_id' => $request->hdLogisticId,
                  'hub_id' => $value

               ]);
            }

            $documents = $this->getDocumentConfigsByModule(DocumentModulesType::Logistic, $request->hdLogisticId);

            $nullDocuments = $this->getDocumentsByModule(DocumentModulesType::Logistic);

            foreach ($documents as $doc) {
               if ($request->hasFile('file_' . $doc->id)) {
                  @unlink($doc->document_path);
               }
            }
            LogisticPartnerDocuments::where('logistic_partner_id', $request->hdLogisticId)->delete();

            //Create hub documents in edit mode
            $this->createLogisticDocuments($request, $documents == null ? $documents : $nullDocuments, $request->hdLogisticId);

            $notification = array(
               'message' => 'Logistic Partner Updated Successfully',
               'alert-type' => 'success'
            );
         }
         DB::commit();
         return redirect()->route('logistic-list')->with($notification);
      } catch (\Exception $e) {
         DB::rollback();
         $notification = array(
            'message' => 'Logistic Partner Not Created!',
            'alert-type' => 'error'
         );
         $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
      }
   }

   private function createLogisticDocuments($request, $documents, $logistic_id)
   {
      try {
         foreach ($documents as $doc) {
            if ($request->hasFile('file_' . $doc->id)) {
               $path = $request->file('file_' . $doc->id)->store('temp');
               $file = $request->file('file_' . $doc->id);
               $extension = $file->getClientOriginalExtension();
               $fileName = $this->generateRandom(16) . '.' . $extension;
            }
            $doc_no = 'doc_' . $doc->id;
            $existingfile_path = 'hdDocumentImg_' . $doc->id;
            LogisticPartnerDocuments::create([
               'logistic_partner_id' => $logistic_id,
               'documentconfig_id' => $doc->id,
               'document_path' => ($request->hasFile('file_' . $doc->id)) ? $this->fileUpload($file, 'upload/logistics/' . $request->txtLogisticId, $fileName) : ($request->$existingfile_path == null ? '' : $request->$existingfile_path),
               'document_number' => $request->$doc_no
            ]);
         }
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
      }
   }

   public function logisticData(Request $request)
   {
      try {
         $logisticData = "";
         $query = DB::table('logistic_partners')
            ->join('logistics_manufacture_configs', 'logistic_partners.id', '=', 'logistics_manufacture_configs.logistic_partner_id')
            ->join('logistics_hub_configs', 'logistics_hub_configs.logistic_partner_id', '=', 'logistic_partners.id')
            ->join('manufacturers', 'logistics_manufacture_configs.manufacture_id', '=', 'manufacturers.id')
            ->join('hubs', 'logistics_hub_configs.hub_id', '=', 'hubs.id')
            ->select('logistic_partners.*', 'manufacturers.manufacturer_name', 'hubs.hub_name')
            ->groupby('logistics_manufacture_configs.logistic_partner_id')->distinct();

         if ($request->state_id > 0) {
            $query = $query->where('logistic_partners.state_id', $request->state_id);
         }
         if ($request->city_id > 0) {
            $query = $query->where('logistic_partners.city_id', $request->city_id);
         }
         if ($request->area_id > 0) {
            $query = $query->where('logistic_partners.area_id', $request->area_id);
         }

         $logisticData = $query->get();
         return datatables()->of($logisticData)
            ->addColumn('action', function ($row) {
               $html = '<a href="addlogistic/' . $row->id . '"><i class="text-primary ti ti-pencil me-1"></i></a> ';
               $html .= '<i class="text-danger ti ti-trash me-1" id="confrim-color(' . $row->id . ')" onclick="showDelete(' . $row->id . ');"></i>';
               return $html;
            })->toJson();
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function activeStatus($id, $status)
   {
      DB::beginTransaction();
      try {
         LogisticPartner::findorfail($id)->update([
            'is_active' => $status,
            'updated_by' => Auth::user()->id
         ]);
         DB::commit();
      } catch (\Exception $e) {
         DB::rollback();
         $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function DeletelogisticList($id)
   {

      try {
         $logistic = LogisticPartner::findorfail($id);
         $logistic->delete();
         LogisticsManufactureConfig::where('logistic_partner_id', $id)->delete();
         LogisticsHubConfig::where('logistic_partner_id', $id)->delete();

         $logistic->Update([
            'deleted_by' => Auth::user()->id
         ]);

         $notification = array(
            'message' => 'LogisticPartner Deleted Successfully',
            'alert' => 'success'
         );
         return response()->json([
            'responseData' => $notification
         ]);
      } catch (QueryException $e) {

         $notification = array(
            'message' => 'LogisticPartner could not be deleted',
            'alert' => 'error'
         );
         return response()->json([
            'responseData' => $notification
         ]);
      }
   }

   public function logisticPartnerList()
   {
      try {
         $states = State::orderBy('state_name', 'ASC')->get();
         return view('admin.logistic_management.logistic_list', compact('states'));
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }


   // public function getHubs(Request $request)
   //  {
   //      try {
   //          $data = $this->getH($request->manufacturer_id);
   //          return response()->json($data);
   //      } catch (\Exception $e) {
   //          $this->Log(__FUNCTION__, $request->method(), $e->getMessage(), Auth::user()->id, $request->ip(), gethostname());
   //      }
   //  }

   public function getHubs(Request $request)
   {
      $data_array = $request->all();
      $manufacturers = $data_array['manufacturer_id'];
      $results = collect();

      foreach ($manufacturers as $value) {
         $data = HubManufactureConfig::select('hub_manufacture_configs.*', 'hubs.hub_name')
            ->join('hubs', 'hubs.id', 'hub_manufacture_configs.hub_id')
            ->where('manufacturer_id', $value)
            ->orderBy('hub_name', 'asc')
            ->get(["hub_name", "id"]);

         // Concatenate the data with the existing results
         $results = $results->concat($data);
      }
      return response()->json($results);
   }

   public function logisticDocument($id)
   {
      try {
         $documentTitle = $this->documentTitle(DocumentModulesType::Logistic);
         $documents = $this->documentByUsers(DocumentModulesType::Logistic, $id);
         $documentmodule_id = DocumentModulesType::Logistic;
         return view('admin.documents.documents', compact('documents', 'documentTitle', 'documentmodule_id'));
      } catch (\Exception $e) {
         $this->Log(__FUNCTION__, "GET", $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }

   public function verifyDocument($id, $status)
   {
      try {
         $this->updateDocumentVerification(DocumentModulesType::Logistic, $id, $status);
      } catch (\Exception $e) {
         DB::rollback();
         $this->Log(__FUNCTION__, 'POST', $e->getMessage(), Auth::user()->id, request()->ip(), gethostname());
      }
   }
}
